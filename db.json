{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/logo.png","path":"images/logo.png","modified":1,"renderable":0},{"_id":"source/images/aaron.jpg","path":"images/aaron.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"89fdc1df51336fdfec2ca3166d1c9cefbdef13bc","modified":1506663039000},{"_id":"themes/yilia/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1464007293000},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1464007293000},{"_id":"themes/yilia/_config.yml","hash":"cede85c49775d4c2f4c2cee433b985df23523a66","modified":1464148627000},{"_id":"themes/yilia/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1464007293000},{"_id":"source/_posts/Docker-outside-of-Docker.md","hash":"303bfa00e64a9f9a54a0803cea39d4770423ef13","modified":1511150397000},{"_id":"source/_posts/.DS_Store","hash":"0795eb623569c4722a37ba7b20b30dd0e3e9f485","modified":1467873331000},{"_id":"source/_posts/Write-failed-Broken-pipe.md","hash":"ec5bdabece62b710ee41379e734246ab9d89231f","modified":1499225806000},{"_id":"source/_posts/anaconda安装tensorflow.md","hash":"93f11253965353388f896d129fba3f2770b89fa8","modified":1503978483000},{"_id":"source/_posts/YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1.md","hash":"2b3567fab968b74da4b9a8233e898d93208b92c0","modified":1490701083000},{"_id":"source/_posts/centos7安装postgresql.md","hash":"1597e9bbdf14d73b89ae0f56cc0b7c0da330b0bc","modified":1512635269000},{"_id":"source/_posts/centOS下配置Virtualenv-Flask-Gunicorn-Supervisor-Nginx.md","hash":"397dd820d248f23421f6e08d6674d50de41059ad","modified":1499417331000},{"_id":"source/_posts/curl测试restful服务.md","hash":"dab011ac85161641f833a428c2daf97095775bef","modified":1468975248000},{"_id":"source/_posts/docker-compose的使用.md","hash":"a008c092f958f8328c562b276e7bd890dc45eb5b","modified":1501134286000},{"_id":"source/_posts/docker创建私有仓库.md","hash":"3e4264249d6d36d068c33be55ba57788034bd8bc","modified":1500888849000},{"_id":"source/_posts/docker容器启动iptables报错.md","hash":"f6e7566987c5b655ca23412278e5fcb1d619c64c","modified":1490703864000},{"_id":"source/_posts/flask-exthook-ExtDeprecationWarning警告的消除.md","hash":"2b00384de9f10f01abccf89935e9ddc22305cc5e","modified":1466128014000},{"_id":"source/_posts/flask-migrate数据库迁移.md","hash":"3e82f56c197592dfc4ec0c3836b429c34ed61086","modified":1470881189000},{"_id":"source/_posts/docker部署.md","hash":"9d4dbe8c900cd5af47226fad8ce735daacffe953","modified":1490702774000},{"_id":"source/_posts/docker设置http代理.md","hash":"3367507d014c8cbbe040a8b13b605702567f846a","modified":1500951012000},{"_id":"source/_posts/git删除tag.md","hash":"e206331ca0d54172bff2d7488c38aa6aba4b168c","modified":1479885722000},{"_id":"source/_posts/jenkins自动部署docker应用.md","hash":"2dbfd1e1e6df8de09f1f96653d657f4a1fb631ce","modified":1511150768000},{"_id":"source/_posts/js七牛上传实践.md","hash":"a59ede5322d52555927845dcc31263e8b7f7f909","modified":1468197584000},{"_id":"source/_posts/git撤销merge操作.md","hash":"37c814ea6f23b34f14b9fb74feb6dd6e47ea6620","modified":1474177272000},{"_id":"source/_posts/linux虚拟机磁盘扩容.md","hash":"515bda819ad36ca9379da14130fe89a610c5f985","modified":1490700692000},{"_id":"source/_posts/java工程启动No-Route-to-host.md","hash":"a1dd253e60c4c1487d5469df1da3fcf75ca47326","modified":1490703521000},{"_id":"source/_posts/mac下批量替换文本.md","hash":"d39a6d9e0c307190286a61f4012f6dd189a89446","modified":1465363978000},{"_id":"source/_posts/mac下搭建hexo至github.md","hash":"c9626e42f3b1d72f6754075699fbe151450ede04","modified":1466128261000},{"_id":"source/_posts/pip-freeze.md","hash":"db40ab08a9a0d689046a49a4bd91602988500624","modified":1464661593000},{"_id":"source/_posts/react-native初体验.md","hash":"70e9c6664682db16ebe0f755a26e76e189dbe907","modified":1470880360000},{"_id":"source/_posts/shell反向删除文件.md","hash":"55698586deac41596b790bdc77fb70d814aaf8bd","modified":1466759878000},{"_id":"source/_posts/react-native与webapi交互.md","hash":"54f742725cd5b18e84580384465aa6271dbbea09","modified":1470639087000},{"_id":"source/_posts/supervisor管理服务器进程.md","hash":"9ea1c9569c7eb95b9511d9d2ec1a228c20da8c6d","modified":1500375444000},{"_id":"source/_posts/web.py与gunicorn.md","hash":"14c40b97a19b35081c2df60c1c11c5d6212166ac","modified":1499419493000},{"_id":"source/_posts/win10启动vagrant.md","hash":"976e8667d9ea60dbf6ce1de5b829874aa97d14df","modified":1500369296000},{"_id":"source/_posts/上传IOS-APP一直卡在-Authenticating-with-the-iTunes-store.md","hash":"23601a6ea013e698d4cbee9f706f28eff26c86ec","modified":1506663757000},{"_id":"source/_posts/使用virtualenv.md","hash":"b2b7db5c185a8fdc00e123d55d49c9d0684d5b32","modified":1464362772000},{"_id":"source/_posts/跨平台开发环境集中管理化之vagrant.md","hash":"9c71667db15f00b9684f6d435e8c1fec2fc2939e","modified":1470985046000},{"_id":"source/_posts/关于android资源文件路径.md","hash":"3272d665e52e28df90233a5b5e230fac52677d27","modified":1509935533000},{"_id":"source/_posts/搭建gitbucket的docker环境.md","hash":"021f9bac68bf934cc4685a8c51628614701803ab","modified":1482826461000},{"_id":"source/_posts/配置gitbucket的webhook触发jenkins自动构建.md","hash":"f7c3b4c775293c224fce042b141396139a358a55","modified":1511158167000},{"_id":"source/_posts/认识javascript.md","hash":"6ab435dd112eb0809c9fe3522ac3ad5fe06a23e7","modified":1470657470000},{"_id":"source/images/logo.png","hash":"a221de8117c2f85b65088042a929dab93b8c6ca1","modified":1464147156000},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"154ba3f579c6295c558c47456b8023ff4f0cc214","modified":1464007408000},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"0e51cf7c560e073e6ecc501023e32e783df28278","modified":1464007408000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1464007293000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1464007293000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1464007263000},{"_id":"themes/yilia/.git/index","hash":"3d2a7f3f6287ae1e4bee3eea697664140e6f5fb9","modified":1464007553000},{"_id":"themes/yilia/.git/packed-refs","hash":"102a8556f68dca2b07b7ef5c523080d0dcbbe257","modified":1464007293000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1464007293000},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1464007293000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1464007293000},{"_id":"themes/yilia/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1464007293000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1464007293000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1464007293000},{"_id":"themes/yilia/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1464007293000},{"_id":"themes/yilia/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1464007293000},{"_id":"themes/yilia/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1464007293000},{"_id":"themes/yilia/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1464007293000},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1464007293000},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1464007293000},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1464007293000},{"_id":"source/images/aaron.jpg","hash":"d1b44d6c31c7e0bd1687c5ddaac98259b62633b8","modified":1464148205000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1464007293000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1464007293000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1464007263000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1464007263000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1464007263000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1464007263000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1464007263000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1464007263000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1464007263000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1464007263000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1464007263000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"efab37f728b89f639851ac0989be7bab32e3b528","modified":1464007293000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1464007263000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"082504c9fd8600306d4ca55f03e3cbb0ddd99dd7","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"f7068535c0df7e7bc6614a046e7d4b262a65d8b2","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"47dc7c1d35928a7b026c683547f8482d2e524c63","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1464007293000},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1464007293000},{"_id":"themes/yilia/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1464007293000},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1464007293000},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1464007293000},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1464007293000},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1464007293000},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1464007293000},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1464007293000},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1464007293000},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1464007293000},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1464007293000},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1464007293000},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1464007293000},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1464007293000},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1464007293000},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1464007293000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1464007293000},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1464007293000},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1464007293000},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1464007293000},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1464007293000},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1464007293000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1464007293000},{"_id":"themes/yilia/source/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1464007293000},{"_id":"themes/yilia/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1464007293000},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1464007293000},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1464007293000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"154ba3f579c6295c558c47456b8023ff4f0cc214","modified":1464007293000},{"_id":"themes/yilia/.git/objects/pack/pack-8720154b4a9cfed216fbde3ba2ae357175a243c2.idx","hash":"10b95afc2dfb41649d2105d919957e91954d7c63","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1464007293000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1464007293000},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1464007293000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1464007293000},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1464007293000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1464007293000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1464007293000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1464007293000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1464007293000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1464007293000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1464007293000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"efab37f728b89f639851ac0989be7bab32e3b528","modified":1464007293000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1464007293000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"efab37f728b89f639851ac0989be7bab32e3b528","modified":1464007293000},{"_id":"themes/yilia/.git/objects/pack/pack-8720154b4a9cfed216fbde3ba2ae357175a243c2.pack","hash":"c22047a03f1b86f8c5940887b0c4f1bc4b79666c","modified":1464007293000},{"_id":"public/2017/11/20/配置gitbucket的webhook触发jenkins自动构建/index.html","hash":"a0720902a30783b5bf03e5d0363b36f7eae5fac8","modified":1512635369173},{"_id":"public/2017/11/04/关于android资源文件路径/index.html","hash":"9aa30efef56dc36d5f132831464d897ca48ded36","modified":1512635369233},{"_id":"public/2017/07/24/docker设置http代理/index.html","hash":"71a4912d78f1ebbd249603dff796356f18bf7a03","modified":1512635369611},{"_id":"public/2017/09/29/上传IOS-APP一直卡在-Authenticating-with-the-iTunes-store/index.html","hash":"4ede89063339d90db4cbfeb3391a9321b3bb7e2c","modified":1512635369635},{"_id":"public/2017/08/29/anaconda安装tensorflow/index.html","hash":"1533174f6fb313ac2a00d9f4c636a0132e16f533","modified":1512635369635},{"_id":"public/2017/07/18/win10启动vagrant/index.html","hash":"513c62d20cd3e28db85b495fafd244080a9a06af","modified":1512635369635},{"_id":"public/2017/07/07/web.py与gunicorn/index.html","hash":"9770fd7fcdd4f923b7c815f50690d0abe629c618","modified":1512635369635},{"_id":"public/2017/07/05/Write-failed-Broken-pipe/index.html","hash":"8f4a4e71e3e3920e2121c07e1b710f9ea13d9b39","modified":1512635369636},{"_id":"public/2017/03/28/docker容器启动iptables报错/index.html","hash":"4d8c79b17f0bc104c263dce1e859d11608ed7f28","modified":1512635369636},{"_id":"public/2017/11/17/jenkins自动部署docker应用/index.html","hash":"0b40b3be3ecf87c7358d433122f32521302a2d24","modified":1512635369636},{"_id":"public/2017/11/16/Docker-outside-of-Docker/index.html","hash":"305ffdcfdad9d2781ef119cd61e4401afa97839a","modified":1512635369636},{"_id":"public/2017/07/27/docker-compose的使用/index.html","hash":"584f148f34302d6ca75f587cc32139376c68274f","modified":1512635369636},{"_id":"public/2017/07/24/docker创建私有仓库/index.html","hash":"45ab7992d9db49ca6b2ad476e70365b6a9ba1aa1","modified":1512635369636},{"_id":"public/2017/07/07/supervisor管理服务器进程/index.html","hash":"782981e3c220ee90f1917e2c2c60a90750d35e65","modified":1512635369636},{"_id":"public/2017/12/07/centos7安装postgresql/index.html","hash":"0a7604a4e08fe34750c77087fb52495b4af0d812","modified":1512635369663},{"_id":"public/2017/03/28/YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1/index.html","hash":"dea4e45242674d59f7c04f3c5fd904d2f0607355","modified":1512635369671},{"_id":"public/2017/03/28/linux虚拟机磁盘扩容/index.html","hash":"111eb2fdb2f15a09cd64bb95f56e01864887488d","modified":1512635369671},{"_id":"public/2016/11/23/git删除tag/index.html","hash":"35b36d6213cc0a386e2aee69e1ab25c5738a3d2b","modified":1512635369671},{"_id":"public/2016/09/18/git撤销merge操作/index.html","hash":"5280937ee8416d31a6f42cd2d7eee7f8be176e88","modified":1512635369672},{"_id":"public/2016/08/11/flask-migrate数据库迁移/index.html","hash":"41d8bc4cbbbc9cdfdf45be3a48d4b342e9ec6cf1","modified":1512635369672},{"_id":"public/2016/07/19/curl测试restful服务/index.html","hash":"49163e6ebf5553f985f8a598ff991d6ba91b3042","modified":1512635369672},{"_id":"public/2016/07/07/react-native初体验/index.html","hash":"b0a319e8dd5ee3cebbd0589395d189a55a809e1b","modified":1512635369672},{"_id":"public/2016/06/24/js七牛上传实践/index.html","hash":"acb2e223f5bbcd628952e90ea18c5358640397d9","modified":1512635369672},{"_id":"public/2016/06/24/shell反向删除文件/index.html","hash":"e0e64d0ce6a6c5068164452621262ee64e666fe0","modified":1512635369672},{"_id":"public/2016/06/17/flask-exthook-ExtDeprecationWarning警告的消除/index.html","hash":"31a1b6c0aa0e101220fef95c632cf42484c3bee7","modified":1512635369672},{"_id":"public/2016/05/31/pip-freeze/index.html","hash":"9d0c2a4d209aea020a9047f685c8609b3c714dfd","modified":1512635369672},{"_id":"public/2016/06/08/mac下批量替换文本/index.html","hash":"57002a749e88ccb47aadad3fa6cec1805908d681","modified":1512635369672},{"_id":"public/2016/05/27/使用virtualenv/index.html","hash":"41db4be0583186ce2e75b84bd8284ca4a7a889cf","modified":1512635369672},{"_id":"public/2016/05/22/mac下搭建hexo至github/index.html","hash":"4908458053526a273e4e881aa7697377109b5b86","modified":1512635369672},{"_id":"public/archives/page/4/index.html","hash":"6d995d090662690edc216bcdb97d9e343c3e3001","modified":1512635369672},{"_id":"public/archives/2016/06/index.html","hash":"2584a6035165001a404cdc767fb13f7d2760ed17","modified":1512635369672},{"_id":"public/archives/2016/05/index.html","hash":"7087789be6e9b1fa907d0956d4012ce79172d97a","modified":1512635369672},{"_id":"public/archives/2016/07/index.html","hash":"0eddb3365d668988a611cfed921c98f7a259d5aa","modified":1512635369672},{"_id":"public/archives/2016/08/index.html","hash":"0602765c194605450ac43ba281e42b0c24086cd4","modified":1512635369672},{"_id":"public/archives/2016/09/index.html","hash":"ef2603387f9500466eac1944239b9fc5ba1bdaea","modified":1512635369672},{"_id":"public/archives/2016/11/index.html","hash":"7582cef745cb1903c8f9958eef38fc996140b06d","modified":1512635369672},{"_id":"public/archives/2016/12/index.html","hash":"9d0d75ffd142f40a13c1360683afb676ccafbf1d","modified":1512635369673},{"_id":"public/archives/2017/03/index.html","hash":"90b06317dac2b15de6211e2b54221e4b7e46ab84","modified":1512635369673},{"_id":"public/archives/2017/08/index.html","hash":"24e83b2323d41508f21e8722cbf5160854e11ea3","modified":1512635369673},{"_id":"public/archives/2017/09/index.html","hash":"5a78be2fcf51c48dc6e0e3c208d539454f6ad8b7","modified":1512635369673},{"_id":"public/archives/2017/11/index.html","hash":"f8e5970f0a33b1e9a97ea07c5f8313fe6e37f0b8","modified":1512635369673},{"_id":"public/tags/持续集成/index.html","hash":"62b00eef64e9554482e877a446cd52fdc147d610","modified":1512635369673},{"_id":"public/tags/jenkins/index.html","hash":"778e1b8ca7b8f3db4b09fd28d1f3178e3ac8f2a9","modified":1512635369673},{"_id":"public/tags/CI/index.html","hash":"2f0f7e57996e0f81a042b7e80309accbd1623aa9","modified":1512635369673},{"_id":"public/tags/aliyun/index.html","hash":"53b23fe36665122f14b37a4593542c97dc4d9a8d","modified":1512635369673},{"_id":"public/tags/anaconda/index.html","hash":"14bb028cae966d3988d4a05fe7c5cfa19849e8f6","modified":1512635369673},{"_id":"public/tags/conda/index.html","hash":"51582e83054a29f95c6e73061b929d69ef5e8346","modified":1512635369673},{"_id":"public/tags/tensorflow/index.html","hash":"2b3cca2c3c8d5b7962158064d18a1abe89398fca","modified":1512635369673},{"_id":"public/tags/hexo/index.html","hash":"6759c4e113ed526e80673c1ae784b6d922b2fd31","modified":1512635369673},{"_id":"public/tags/DooD/index.html","hash":"e7c7e271307a2c6cf38117701901ec72c6a3fa45","modified":1512635369673},{"_id":"public/tags/centOS/index.html","hash":"a8f502a45ca06616a1c6c102a37dacd2444d55a1","modified":1512635369673},{"_id":"public/tags/postgresql/index.html","hash":"9ee03ebb891228227cbcc1e1182b009a813c6be7","modified":1512635369673},{"_id":"public/tags/flask/index.html","hash":"993be0c855c190fc5905134772132c732912df5d","modified":1512635369673},{"_id":"public/tags/Gunicorn/index.html","hash":"10264947e400ca4d7fda88b1e0aaab82240759b2","modified":1512635369673},{"_id":"public/tags/Supervisor/index.html","hash":"8bb3f75ea598ae9f4bffaf2e2ba83eaa83e4860c","modified":1512635369673},{"_id":"public/tags/curl/index.html","hash":"9136d53a52019c1113eb08abea5614f8178b5c3e","modified":1512635369673},{"_id":"public/tags/docker-compose/index.html","hash":"1c977f18226ba2d79e67b3e4c24e5f009973683f","modified":1512635369673},{"_id":"public/tags/restful/index.html","hash":"f3232bd10b76f6bd3b66cafab259546b46caa3b7","modified":1512635369673},{"_id":"public/tags/registry/index.html","hash":"b0b985705e2b622f542c9a2351e4d45ce8730f80","modified":1512635369673},{"_id":"public/tags/Virtualenv/index.html","hash":"417e8ef657e5fc69faac1b05180be2b57973d749","modified":1512635369673},{"_id":"public/tags/iptables/index.html","hash":"e4383ae2458162d9d48ba22b567e106a2da3f16c","modified":1512635369673},{"_id":"public/tags/shell/index.html","hash":"85860187ad11f85a433bb2e5dde67fff32b637a4","modified":1512635369673},{"_id":"public/tags/flask-ext-migrate/index.html","hash":"a4ddbbce16aa1bb73e761782848f5552031a1e84","modified":1512635369674},{"_id":"public/tags/python/index.html","hash":"24efccf9b4fe15048f7800c6edb2e544dcf2fea2","modified":1512635369674},{"_id":"public/tags/flask-migrate/index.html","hash":"a97f803b207be19a82a99611b88db40046b61f13","modified":1512635369674},{"_id":"public/tags/redis/index.html","hash":"0de67997852be403b986b3eab1bcc93f1234964c","modified":1512635369674},{"_id":"public/tags/web/index.html","hash":"af76e9b5087979fcf8545aa773e4c3d78b4a254f","modified":1512635369674},{"_id":"public/tags/proxy/index.html","hash":"5dce31f4a677ba4eee583aa99f3692c17afa4695","modified":1512635369674},{"_id":"public/tags/持续部署/index.html","hash":"2b5912fa49724667c92c00df942abc6409944ab4","modified":1512635369674},{"_id":"public/tags/git/index.html","hash":"66f820284ff02465430e4483d5a4371e855d1f34","modified":1512635369674},{"_id":"public/tags/js/index.html","hash":"9309cd241f2fa730458c77c90b6485aee9bb08ed","modified":1512635369674},{"_id":"public/tags/七牛/index.html","hash":"2f1fb7459d04559bfb3b3a3ae9b03ad090e68b55","modified":1512635369674},{"_id":"public/tags/linux/index.html","hash":"0e012cc74d1727bf157d98b6a405fbb19e6dca96","modified":1512635369674},{"_id":"public/tags/磁盘扩容/index.html","hash":"a2a2d54589909993d4dd373afdf9c886d419ee5a","modified":1512635369674},{"_id":"public/tags/java/index.html","hash":"ddc9d39d09a4c18f895f4384dabd9aec35a5a113","modified":1512635369674},{"_id":"public/tags/No-Route-to-host/index.html","hash":"1abf7e16f2e43a4e844a355953e4c01fa79f630e","modified":1512635369674},{"_id":"public/tags/grep/index.html","hash":"8e49caa8645d6fcfdd31cf9b6ae7dce061700439","modified":1512635369674},{"_id":"public/tags/mac/index.html","hash":"c244f770abd8f13313ba507b905810d0d8f87fad","modified":1512635369674},{"_id":"public/tags/sed/index.html","hash":"837987d0da85a32eea8a2f1e13a2c9e9ba3a0625","modified":1512635369674},{"_id":"public/tags/react-native/index.html","hash":"3e3aa95dfc7c9d68c7e423636b5cb353a0d92137","modified":1512635369674},{"_id":"public/tags/supervisor/index.html","hash":"7178e16186867dfb10c177e9e51bd29b526ae693","modified":1512635369674},{"_id":"public/tags/Runtime-is-not-ready-for-debugging/index.html","hash":"78c032c2fba084e7c05ab9c3f592f7daa68ac670","modified":1512635369674},{"_id":"public/tags/npmjs-org-443/index.html","hash":"ff439def05c3ad4ed1db52e5b438c6924b99da8f","modified":1512635369674},{"_id":"public/tags/Network-request-failed/index.html","hash":"9840cc6e9b8323f0d083111728d89b69eda563f2","modified":1512635369674},{"_id":"public/tags/web-py/index.html","hash":"ee34c54e71728657ef39fdbf1113d4d62fb396d3","modified":1512635369674},{"_id":"public/tags/sprintboot/index.html","hash":"08883696204651fbe78d12d96ce6cbd233f6a1df","modified":1512635369674},{"_id":"public/tags/gunicorn/index.html","hash":"752dd60275eba24e0e24398ce0fcdb07599898e5","modified":1512635369674},{"_id":"public/tags/win10/index.html","hash":"e0df84d8fa28a21395e7f712b47e7d1140f14c09","modified":1512635369674},{"_id":"public/tags/app/index.html","hash":"d9d010dc62d31edfac61269aa0b4bef80537cd9a","modified":1512635369675},{"_id":"public/tags/ios/index.html","hash":"863ff44d549877ed218d55512ecd28c9673d0031","modified":1512635369675},{"_id":"public/tags/跨平台/index.html","hash":"84dc33bf5e8ad77538c4b298588691d9d2a5cf83","modified":1512635369675},{"_id":"public/tags/webhook/index.html","hash":"848e6fd35f3fba328479e884c1302e457b0b92ed","modified":1512635369675},{"_id":"public/tags/android/index.html","hash":"df1313a27994ba3a87f4a31cbca6928026ee13cd","modified":1512635369675},{"_id":"public/tags/gitbucket/index.html","hash":"e6e205f68ad7c5fec0842034e98350f730599d79","modified":1512635369675},{"_id":"public/tags/闭包/index.html","hash":"ef23a2df3754e05bb3ec8238caf3bf792153dcd2","modified":1512635369675},{"_id":"public/tags/作用域/index.html","hash":"471bd292b4de7a908f23a289b695a89b937b617e","modified":1512635369675},{"_id":"public/tags/上下文/index.html","hash":"c45534c74712328d56481222569885dbfdaaea9c","modified":1512635369675},{"_id":"public/tags/vagrant/index.html","hash":"31ef7d8b9e813ac35dd63f115908b14c0729022b","modified":1512635369675},{"_id":"public/2017/03/28/java工程启动No-Route-to-host/index.html","hash":"60f27e868dcd9425638cb83fd774c532a46ea234","modified":1512635369675},{"_id":"public/2017/03/28/docker部署/index.html","hash":"2371ba4cc63375040b7bfe766e5b1803f3b298c2","modified":1512635369675},{"_id":"public/2016/12/27/搭建gitbucket的docker环境/index.html","hash":"699ebda23af4fbe88556780916e517edba0fc745","modified":1512635369675},{"_id":"public/2016/08/12/跨平台开发环境集中管理化之vagrant/index.html","hash":"0b5fa640b3bf778259552d10f7f22fabb1c32db9","modified":1512635369675},{"_id":"public/2016/08/08/react-native与webapi交互/index.html","hash":"1dbc30b0720fdbf77b743e768828bd7c4e74eb3b","modified":1512635369675},{"_id":"public/2016/08/08/认识javascript/index.html","hash":"03d82f74d3beec16ef4e2fcc155416d956c4c1ba","modified":1512635369675},{"_id":"public/2016/07/18/centOS下配置Virtualenv-Flask-Gunicorn-Supervisor-Nginx/index.html","hash":"d075673d6b3aec46d5af58e627b2c019d3a02b51","modified":1512635369675},{"_id":"public/archives/index.html","hash":"b1e7a8b555910195c8caa68189a36ec405812f77","modified":1512635369675},{"_id":"public/archives/page/3/index.html","hash":"fff7c9383509172469bf21a8c41953e27e436f10","modified":1512635369675},{"_id":"public/archives/2016/index.html","hash":"c1bf8ea8baebd0c1f7cbb40db91fdd1fb4e84850","modified":1512635369675},{"_id":"public/archives/2016/page/2/index.html","hash":"d951f4c2670631e95945e85571ef9d1d35f52489","modified":1512635369675},{"_id":"public/archives/page/2/index.html","hash":"20507e74d9e16b6ea2528cb213bf4a3b4922ba99","modified":1512635369675},{"_id":"public/archives/2017/page/2/index.html","hash":"3449085351479db2c33dbb90cc87f88e4591be9f","modified":1512635369675},{"_id":"public/archives/2017/index.html","hash":"086e66b599b617fdfd82e71ee8141f39ca2143dd","modified":1512635369675},{"_id":"public/archives/2017/07/index.html","hash":"a8341da456afec97adf8585d058b5fc45438ea7d","modified":1512635369675},{"_id":"public/tags/docker/index.html","hash":"9654cd2f810c9af2a0a1d09b8b8d03d4b648e12b","modified":1512635369675},{"_id":"public/index.html","hash":"f5c7f40acfe3874d3db7adec8954f93f9a533b5a","modified":1512635369676},{"_id":"public/page/3/index.html","hash":"45e35b7de01f696804cabbb874d855ece3addf30","modified":1512635369676},{"_id":"public/page/2/index.html","hash":"20d816a8b88ea91f8092e071086aa1d6d58bd71a","modified":1512635369676},{"_id":"public/page/4/index.html","hash":"aa60237df39c9d11c8459fca50cf08b21985ce0e","modified":1512635369676},{"_id":"public/archives/2017/12/index.html","hash":"32b3ee002c0d5a774f574503309307c03df4eab2","modified":1512635369684},{"_id":"public/tags/centos7/index.html","hash":"428355c024e9d6a77a1217c4184a1bb607e6b78f","modified":1512635369684},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1512635369684},{"_id":"public/images/logo.png","hash":"a221de8117c2f85b65088042a929dab93b8c6ca1","modified":1512635369684},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1512635369684},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1512635369684},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1512635369684},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1512635369684},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1512635369684},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1512635369684},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1512635369684},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1512635369684},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1512635369684},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1512635369684},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1512635369684},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1512635369685},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1512635369685},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1512635369685},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1512635369685},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1512635369685},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1512635369685},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1512635369686},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1512635369686},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1512635369686},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1512635369686},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1512635369686},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1512635369686},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1512635369686},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1512635369686},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1512635369686},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1512635369686},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1512635369686},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1512635370789},{"_id":"public/images/aaron.jpg","hash":"d1b44d6c31c7e0bd1687c5ddaac98259b62633b8","modified":1512635370791},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1512635370798},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1512635370799},{"_id":"public/js/main.js","hash":"0640b68a76fab3c693b3cd1e4d04d14be1e53940","modified":1512635370799},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1512635370799},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1512635370799},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1512635370799},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1512635370799},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1512635370799},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1512635370799},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1512635370799},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1512635370799},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1512635370800},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1512635370800},{"_id":"public/css/style.css","hash":"10e9b93cf935a165020e48334a40b84b0f895401","modified":1512635370800}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Docker outside of Docker","date":"2017-11-16T08:06:20.000Z","_content":"## 添加用户jenkins至docker组\n```shell\n# 如果不存在docker组就groupadd一个\n$ sudo groupadd docker\n\n# 添加用户jenkins至docker组 \n$ sudo gpasswd -a jenkins docker\n\n# 重启docker服务\n$ sudo service docker restart\n```\n\n\n## 自定义jenkins镜像\n镜像Dockerfile    \n\n```shell\nFrom jenkins\n\nUSER root\nAGR dockerGid=995\n\nRUN echo \"docker:x:${dockerGid}:jenkins\" >> /etc/group\n\nUSER jenkins\n```\n\n其中的dockerGid是docker组id，可以在宿主机里**cat /etc/group | grep ^docker**查看组id序号。    \n\n### docker:dial unix /var/run/docker.sock:permission denied.\n上面的dockerfile内容关键是将宿主机的docker组及用户配置，写入docker镜像里，防止在docker容器里运行docker命令没有权限，会报错。    \n**一定要注意，设置的dockerGid一定要与宿主机的组id一致。**\n\n### build自定义镜像\n```shell\ndocker build -t local_jenkins\n```\n\n## Docker进程监听的Unix域socket\n### /var/run/docker.sock\n这个文件是什么呢？简单地说，它是Docker守护进程(Docker daemon)默认监听的Unix域套接字(Unix domain socket)，容器中的进程可以通过它与Docker守护进程进行通信。\n### 管理jenkins的docker-compose\n```shell\nversion: '2'\nservices:\n  my_jenkins:\n    image: local_jenkins\n    volumes:\n      - ./jenkins_home:/var/jenkins_home\n      - /bin/docker:/usr/bin/docker\n      - /usr/bin/docker.sock:/var/run/docker.sock\n    ports:\n      - \"8081:8080\"\n```\n在这个docker-compose中，我们挂载了**/bin/docker**,**/var/run/docker.sock**，实现了DooD(Docker outside of Docker)。在jenkins镜像里run起来的容器实际上就是运行在宿主机上的。\n\n\n\n\n","source":"_posts/Docker-outside-of-Docker.md","raw":"---\ntitle: Docker outside of Docker\ndate: 2017-11-16 16:06:20\ntags: [持续集成, CI, DooD, jenkins, docker]\n---\n## 添加用户jenkins至docker组\n```shell\n# 如果不存在docker组就groupadd一个\n$ sudo groupadd docker\n\n# 添加用户jenkins至docker组 \n$ sudo gpasswd -a jenkins docker\n\n# 重启docker服务\n$ sudo service docker restart\n```\n\n\n## 自定义jenkins镜像\n镜像Dockerfile    \n\n```shell\nFrom jenkins\n\nUSER root\nAGR dockerGid=995\n\nRUN echo \"docker:x:${dockerGid}:jenkins\" >> /etc/group\n\nUSER jenkins\n```\n\n其中的dockerGid是docker组id，可以在宿主机里**cat /etc/group | grep ^docker**查看组id序号。    \n\n### docker:dial unix /var/run/docker.sock:permission denied.\n上面的dockerfile内容关键是将宿主机的docker组及用户配置，写入docker镜像里，防止在docker容器里运行docker命令没有权限，会报错。    \n**一定要注意，设置的dockerGid一定要与宿主机的组id一致。**\n\n### build自定义镜像\n```shell\ndocker build -t local_jenkins\n```\n\n## Docker进程监听的Unix域socket\n### /var/run/docker.sock\n这个文件是什么呢？简单地说，它是Docker守护进程(Docker daemon)默认监听的Unix域套接字(Unix domain socket)，容器中的进程可以通过它与Docker守护进程进行通信。\n### 管理jenkins的docker-compose\n```shell\nversion: '2'\nservices:\n  my_jenkins:\n    image: local_jenkins\n    volumes:\n      - ./jenkins_home:/var/jenkins_home\n      - /bin/docker:/usr/bin/docker\n      - /usr/bin/docker.sock:/var/run/docker.sock\n    ports:\n      - \"8081:8080\"\n```\n在这个docker-compose中，我们挂载了**/bin/docker**,**/var/run/docker.sock**，实现了DooD(Docker outside of Docker)。在jenkins镜像里run起来的容器实际上就是运行在宿主机上的。\n\n\n\n\n","slug":"Docker-outside-of-Docker","published":1,"updated":"2017-11-20T03:59:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ic800008rlx0rmtv5z8","content":"<h2 id=\"添加用户jenkins至docker组\"><a href=\"#添加用户jenkins至docker组\" class=\"headerlink\" title=\"添加用户jenkins至docker组\"></a>添加用户jenkins至docker组</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 如果不存在docker组就groupadd一个</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo groupadd docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 添加用户jenkins至docker组 </span><br><span class=\"line\"><span class=\"meta\">$</span> sudo gpasswd -a jenkins docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 重启docker服务</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo service docker restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义jenkins镜像\"><a href=\"#自定义jenkins镜像\" class=\"headerlink\" title=\"自定义jenkins镜像\"></a>自定义jenkins镜像</h2><p>镜像Dockerfile    </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">From jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\">AGR dockerGid=995</span><br><span class=\"line\"></span><br><span class=\"line\">RUN echo \"docker:x:$&#123;dockerGid&#125;:jenkins\" &gt;&gt; /etc/group</span><br><span class=\"line\"></span><br><span class=\"line\">USER jenkins</span><br></pre></td></tr></table></figure>\n<p>其中的dockerGid是docker组id，可以在宿主机里<strong>cat /etc/group | grep ^docker</strong>查看组id序号。    </p>\n<h3 id=\"docker-dial-unix-var-run-docker-sock-permission-denied\"><a href=\"#docker-dial-unix-var-run-docker-sock-permission-denied\" class=\"headerlink\" title=\"docker:dial unix /var/run/docker.sock:permission denied.\"></a>docker:dial unix /var/run/docker.sock:permission denied.</h3><p>上面的dockerfile内容关键是将宿主机的docker组及用户配置，写入docker镜像里，防止在docker容器里运行docker命令没有权限，会报错。<br><strong>一定要注意，设置的dockerGid一定要与宿主机的组id一致。</strong></p>\n<h3 id=\"build自定义镜像\"><a href=\"#build自定义镜像\" class=\"headerlink\" title=\"build自定义镜像\"></a>build自定义镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t local_jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"Docker进程监听的Unix域socket\"><a href=\"#Docker进程监听的Unix域socket\" class=\"headerlink\" title=\"Docker进程监听的Unix域socket\"></a>Docker进程监听的Unix域socket</h2><h3 id=\"var-run-docker-sock\"><a href=\"#var-run-docker-sock\" class=\"headerlink\" title=\"/var/run/docker.sock\"></a>/var/run/docker.sock</h3><p>这个文件是什么呢？简单地说，它是Docker守护进程(Docker daemon)默认监听的Unix域套接字(Unix domain socket)，容器中的进程可以通过它与Docker守护进程进行通信。</p>\n<h3 id=\"管理jenkins的docker-compose\"><a href=\"#管理jenkins的docker-compose\" class=\"headerlink\" title=\"管理jenkins的docker-compose\"></a>管理jenkins的docker-compose</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: '2'</span><br><span class=\"line\">services:</span><br><span class=\"line\">  my_jenkins:</span><br><span class=\"line\">    image: local_jenkins</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./jenkins_home:/var/jenkins_home</span><br><span class=\"line\">      - /bin/docker:/usr/bin/docker</span><br><span class=\"line\">      - /usr/bin/docker.sock:/var/run/docker.sock</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - \"8081:8080\"</span><br></pre></td></tr></table></figure>\n<p>在这个docker-compose中，我们挂载了<strong>/bin/docker</strong>,<strong>/var/run/docker.sock</strong>，实现了DooD(Docker outside of Docker)。在jenkins镜像里run起来的容器实际上就是运行在宿主机上的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"添加用户jenkins至docker组\"><a href=\"#添加用户jenkins至docker组\" class=\"headerlink\" title=\"添加用户jenkins至docker组\"></a>添加用户jenkins至docker组</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 如果不存在docker组就groupadd一个</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo groupadd docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 添加用户jenkins至docker组 </span><br><span class=\"line\"><span class=\"meta\">$</span> sudo gpasswd -a jenkins docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 重启docker服务</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo service docker restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义jenkins镜像\"><a href=\"#自定义jenkins镜像\" class=\"headerlink\" title=\"自定义jenkins镜像\"></a>自定义jenkins镜像</h2><p>镜像Dockerfile    </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">From jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\">AGR dockerGid=995</span><br><span class=\"line\"></span><br><span class=\"line\">RUN echo \"docker:x:$&#123;dockerGid&#125;:jenkins\" &gt;&gt; /etc/group</span><br><span class=\"line\"></span><br><span class=\"line\">USER jenkins</span><br></pre></td></tr></table></figure>\n<p>其中的dockerGid是docker组id，可以在宿主机里<strong>cat /etc/group | grep ^docker</strong>查看组id序号。    </p>\n<h3 id=\"docker-dial-unix-var-run-docker-sock-permission-denied\"><a href=\"#docker-dial-unix-var-run-docker-sock-permission-denied\" class=\"headerlink\" title=\"docker:dial unix /var/run/docker.sock:permission denied.\"></a>docker:dial unix /var/run/docker.sock:permission denied.</h3><p>上面的dockerfile内容关键是将宿主机的docker组及用户配置，写入docker镜像里，防止在docker容器里运行docker命令没有权限，会报错。<br><strong>一定要注意，设置的dockerGid一定要与宿主机的组id一致。</strong></p>\n<h3 id=\"build自定义镜像\"><a href=\"#build自定义镜像\" class=\"headerlink\" title=\"build自定义镜像\"></a>build自定义镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t local_jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"Docker进程监听的Unix域socket\"><a href=\"#Docker进程监听的Unix域socket\" class=\"headerlink\" title=\"Docker进程监听的Unix域socket\"></a>Docker进程监听的Unix域socket</h2><h3 id=\"var-run-docker-sock\"><a href=\"#var-run-docker-sock\" class=\"headerlink\" title=\"/var/run/docker.sock\"></a>/var/run/docker.sock</h3><p>这个文件是什么呢？简单地说，它是Docker守护进程(Docker daemon)默认监听的Unix域套接字(Unix domain socket)，容器中的进程可以通过它与Docker守护进程进行通信。</p>\n<h3 id=\"管理jenkins的docker-compose\"><a href=\"#管理jenkins的docker-compose\" class=\"headerlink\" title=\"管理jenkins的docker-compose\"></a>管理jenkins的docker-compose</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: '2'</span><br><span class=\"line\">services:</span><br><span class=\"line\">  my_jenkins:</span><br><span class=\"line\">    image: local_jenkins</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./jenkins_home:/var/jenkins_home</span><br><span class=\"line\">      - /bin/docker:/usr/bin/docker</span><br><span class=\"line\">      - /usr/bin/docker.sock:/var/run/docker.sock</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - \"8081:8080\"</span><br></pre></td></tr></table></figure>\n<p>在这个docker-compose中，我们挂载了<strong>/bin/docker</strong>,<strong>/var/run/docker.sock</strong>，实现了DooD(Docker outside of Docker)。在jenkins镜像里run起来的容器实际上就是运行在宿主机上的。</p>\n"},{"title":"Write failed: Broken pipe","date":"2017-07-05T02:52:07.000Z","_content":"### Write failed: Broken pipe\n\nssh远程连接阿里云centos服务器时，隔几分钟不操作，就会报错：    \n```\nWrite failed: Broken pipe   \n```\n\n解决方法：    \n在/etc/ssh/sshd_config文件中，添加如下配置：　    \n```\nClientAliveInterval 60   \n```\n重启一下就生效了。","source":"_posts/Write-failed-Broken-pipe.md","raw":"---\ntitle: 'Write failed: Broken pipe'\ndate: 2017-07-05 10:52:07\ntags: [aliyun]\n---\n### Write failed: Broken pipe\n\nssh远程连接阿里云centos服务器时，隔几分钟不操作，就会报错：    \n```\nWrite failed: Broken pipe   \n```\n\n解决方法：    \n在/etc/ssh/sshd_config文件中，添加如下配置：　    \n```\nClientAliveInterval 60   \n```\n重启一下就生效了。","slug":"Write-failed-Broken-pipe","published":1,"updated":"2017-07-05T03:36:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ice00018rlxdyvmj1yu","content":"<h3 id=\"Write-failed-Broken-pipe\"><a href=\"#Write-failed-Broken-pipe\" class=\"headerlink\" title=\"Write failed: Broken pipe\"></a>Write failed: Broken pipe</h3><p>ssh远程连接阿里云centos服务器时，隔几分钟不操作，就会报错：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Write</span> failed: <span class=\"keyword\">Broken </span>pipe</span><br></pre></td></tr></table></figure></p>\n<p>解决方法：<br>在/etc/ssh/sshd_config文件中，添加如下配置：　<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClientAliveInterval <span class=\"number\">60</span></span><br></pre></td></tr></table></figure></p>\n<p>重启一下就生效了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Write-failed-Broken-pipe\"><a href=\"#Write-failed-Broken-pipe\" class=\"headerlink\" title=\"Write failed: Broken pipe\"></a>Write failed: Broken pipe</h3><p>ssh远程连接阿里云centos服务器时，隔几分钟不操作，就会报错：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Write</span> failed: <span class=\"keyword\">Broken </span>pipe</span><br></pre></td></tr></table></figure></p>\n<p>解决方法：<br>在/etc/ssh/sshd_config文件中，添加如下配置：　<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClientAliveInterval <span class=\"number\">60</span></span><br></pre></td></tr></table></figure></p>\n<p>重启一下就生效了。</p>\n"},{"title":"anaconda安装tensorflow","date":"2017-08-29T03:30:25.000Z","_content":"## 下载anaconda\n\nanaconda是一个用于科学计算的python发行版，支持linux、mac、windows系统。    \n[anaconda官方下载地址](https://www.continuum.io/downloads)    \n我下载的版本是python27的anaconda2-4.4.0-Windows-x86_64.exe    \n\n## 创建python3的anaconda环境\n```shell\nconda create -n python3 python=3.5.2 anaconda\n```\n\n## 安装tensorflow\n```shell\n# 查看当前版本分支\nconda info -e\n\n# 切换python3的环境\nactivate python3\n\n# 安装tensorflow\nconda install tensorflow\n```\n\n## 启动spyder\n```shell\n# 在python3的虚拟环境下\nspyder\n```\n","source":"_posts/anaconda安装tensorflow.md","raw":"---\ntitle: anaconda安装tensorflow\ndate: 2017-08-29 11:30:25\ntags: [anaconda, conda, tensorflow]\n---\n## 下载anaconda\n\nanaconda是一个用于科学计算的python发行版，支持linux、mac、windows系统。    \n[anaconda官方下载地址](https://www.continuum.io/downloads)    \n我下载的版本是python27的anaconda2-4.4.0-Windows-x86_64.exe    \n\n## 创建python3的anaconda环境\n```shell\nconda create -n python3 python=3.5.2 anaconda\n```\n\n## 安装tensorflow\n```shell\n# 查看当前版本分支\nconda info -e\n\n# 切换python3的环境\nactivate python3\n\n# 安装tensorflow\nconda install tensorflow\n```\n\n## 启动spyder\n```shell\n# 在python3的虚拟环境下\nspyder\n```\n","slug":"anaconda安装tensorflow","published":1,"updated":"2017-08-29T03:48:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81icm00038rlxib4j8hlt","content":"<h2 id=\"下载anaconda\"><a href=\"#下载anaconda\" class=\"headerlink\" title=\"下载anaconda\"></a>下载anaconda</h2><p>anaconda是一个用于科学计算的python发行版，支持linux、mac、windows系统。<br><a href=\"https://www.continuum.io/downloads\" target=\"_blank\" rel=\"noopener\">anaconda官方下载地址</a><br>我下载的版本是python27的anaconda2-4.4.0-Windows-x86_64.exe    </p>\n<h2 id=\"创建python3的anaconda环境\"><a href=\"#创建python3的anaconda环境\" class=\"headerlink\" title=\"创建python3的anaconda环境\"></a>创建python3的anaconda环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n python3 python=3.5.2 anaconda</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装tensorflow\"><a href=\"#安装tensorflow\" class=\"headerlink\" title=\"安装tensorflow\"></a>安装tensorflow</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前版本分支</span></span><br><span class=\"line\">conda info -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换python3的环境</span></span><br><span class=\"line\">activate python3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装tensorflow</span></span><br><span class=\"line\">conda install tensorflow</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动spyder\"><a href=\"#启动spyder\" class=\"headerlink\" title=\"启动spyder\"></a>启动spyder</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在python3的虚拟环境下</span></span><br><span class=\"line\">spyder</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下载anaconda\"><a href=\"#下载anaconda\" class=\"headerlink\" title=\"下载anaconda\"></a>下载anaconda</h2><p>anaconda是一个用于科学计算的python发行版，支持linux、mac、windows系统。<br><a href=\"https://www.continuum.io/downloads\" target=\"_blank\" rel=\"noopener\">anaconda官方下载地址</a><br>我下载的版本是python27的anaconda2-4.4.0-Windows-x86_64.exe    </p>\n<h2 id=\"创建python3的anaconda环境\"><a href=\"#创建python3的anaconda环境\" class=\"headerlink\" title=\"创建python3的anaconda环境\"></a>创建python3的anaconda环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n python3 python=3.5.2 anaconda</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装tensorflow\"><a href=\"#安装tensorflow\" class=\"headerlink\" title=\"安装tensorflow\"></a>安装tensorflow</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前版本分支</span></span><br><span class=\"line\">conda info -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换python3的环境</span></span><br><span class=\"line\">activate python3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装tensorflow</span></span><br><span class=\"line\">conda install tensorflow</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动spyder\"><a href=\"#启动spyder\" class=\"headerlink\" title=\"启动spyder\"></a>启动spyder</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在python3的虚拟环境下</span></span><br><span class=\"line\">spyder</span><br></pre></td></tr></table></figure>\n"},{"title":"YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1","date":"2017-03-28T11:35:15.000Z","_content":"在hexo generate时，报错:\n\n    YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1\n    \n原因是在tags:hexo之间hexo之前要加一个空格！！！","source":"_posts/YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1.md","raw":"---\ntitle: >-\n  YAMLException: can not read a block mapping entry; a multiline key may not be\n  an implicit key at line 4, column 1\ndate: 2017-03-28 19:35:15\ntags: hexo\n---\n在hexo generate时，报错:\n\n    YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1\n    \n原因是在tags:hexo之间hexo之前要加一个空格！！！","slug":"YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1","published":1,"updated":"2017-03-28T11:38:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ico00048rlxuij6n0bh","content":"<p>在hexo generate时，报错:</p>\n<pre><code>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1\n</code></pre><p>原因是在tags:hexo之间hexo之前要加一个空格！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在hexo generate时，报错:</p>\n<pre><code>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1\n</code></pre><p>原因是在tags:hexo之间hexo之前要加一个空格！！！</p>\n"},{"title":"centos7安装postgresql","date":"2017-12-07T08:13:46.000Z","_content":"## 安装启动postgresql\n\n```shell\nyum install postgresql-server\nservice postgresql initdb\nservice postgresql start\n```\n## 修改管理员密码\n\n```shell\nsu - postgres\npsql\n$ ALTER USER postgres WITH PASSWORD 'postgres';\n```\n\n## 配置远程访问\n\n修改**/var/lib/pgsql/data/postgresql.conf**\n```shell\nlisten_addresses = '*'\n```\n\n修改客户端认证配置文件**/var/lib/pgsql/data/pg_hba.conf**,添加\n\n```shell\nhost  all  all   10.0.0.0/8  md5\n```\n\n## 重启服务\n\n```shell\nservice postgresql restart\n```\n","source":"_posts/centos7安装postgresql.md","raw":"---\ntitle: centos7安装postgresql\ndate: 2017-12-07 16:13:46\ntags: [centos7, postgresql]\n---\n## 安装启动postgresql\n\n```shell\nyum install postgresql-server\nservice postgresql initdb\nservice postgresql start\n```\n## 修改管理员密码\n\n```shell\nsu - postgres\npsql\n$ ALTER USER postgres WITH PASSWORD 'postgres';\n```\n\n## 配置远程访问\n\n修改**/var/lib/pgsql/data/postgresql.conf**\n```shell\nlisten_addresses = '*'\n```\n\n修改客户端认证配置文件**/var/lib/pgsql/data/pg_hba.conf**,添加\n\n```shell\nhost  all  all   10.0.0.0/8  md5\n```\n\n## 重启服务\n\n```shell\nservice postgresql restart\n```\n","slug":"centos7安装postgresql","published":1,"updated":"2017-12-07T08:27:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81icq00068rlx7swyxeq7","content":"<h2 id=\"安装启动postgresql\"><a href=\"#安装启动postgresql\" class=\"headerlink\" title=\"安装启动postgresql\"></a>安装启动postgresql</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install postgresql-server</span><br><span class=\"line\">service postgresql initdb</span><br><span class=\"line\">service postgresql start</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改管理员密码\"><a href=\"#修改管理员密码\" class=\"headerlink\" title=\"修改管理员密码\"></a>修改管理员密码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su - postgres</span><br><span class=\"line\">psql</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ALTER USER postgres WITH PASSWORD <span class=\"string\">'postgres'</span>;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置远程访问\"><a href=\"#配置远程访问\" class=\"headerlink\" title=\"配置远程访问\"></a>配置远程访问</h2><p>修改<strong>/var/lib/pgsql/data/postgresql.conf</strong><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen_addresses = '*'</span><br></pre></td></tr></table></figure></p>\n<p>修改客户端认证配置文件<strong>/var/lib/pgsql/data/pg_hba.conf</strong>,添加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host  all  all   10.0.0.0/8  md5</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service postgresql restart</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装启动postgresql\"><a href=\"#安装启动postgresql\" class=\"headerlink\" title=\"安装启动postgresql\"></a>安装启动postgresql</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install postgresql-server</span><br><span class=\"line\">service postgresql initdb</span><br><span class=\"line\">service postgresql start</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改管理员密码\"><a href=\"#修改管理员密码\" class=\"headerlink\" title=\"修改管理员密码\"></a>修改管理员密码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su - postgres</span><br><span class=\"line\">psql</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ALTER USER postgres WITH PASSWORD <span class=\"string\">'postgres'</span>;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置远程访问\"><a href=\"#配置远程访问\" class=\"headerlink\" title=\"配置远程访问\"></a>配置远程访问</h2><p>修改<strong>/var/lib/pgsql/data/postgresql.conf</strong><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen_addresses = '*'</span><br></pre></td></tr></table></figure></p>\n<p>修改客户端认证配置文件<strong>/var/lib/pgsql/data/pg_hba.conf</strong>,添加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host  all  all   10.0.0.0/8  md5</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service postgresql restart</span><br></pre></td></tr></table></figure>\n"},{"title":"centOS下配置Virtualenv+Flask+Gunicorn+Supervisor+Nginx","date":"2016-07-18T08:59:19.000Z","_content":"在阿里云上部署flask环境。  \n\n## 安装virtualenv并创建工程  \n\n    $ pip install virtualenv\n    $ virtualenv stooge\n    $ cd stooge\n    $ source bin/activate\n\n## 安装flask并创建一个服务  \n\n    $ pip install flask\n    $ touch runserver.py\n    $ vim runserver.py\n    $ chmod a+x runserver.py\n        \n### runserver.py  \n\n    from flask import Flask\n    \n    app = Flask(__name__)\n    \n    @app.route('/')\n    def hello_world():\n    \treturn 'Hello World!'\n    \n    if __name__ == '__main__':\n    \tapp.run()\n \n## 安装Gunicorn  \n \n Gunicorn是一个开源Python WSGI UNIX的HTTP服务器，默认是同步工作，支持Gevent，Eventlet异步。  \n\n    $ pip install gunicorn\n\n### gunicorn.conf  \n\n在项目stooge根目录下, 配置gevent workers数处理并发，及绑定本地的端口号。 \n\n    #worker process number\n    workers = 3\n    #bind local port\n    bind = '127.0.0.1:8000'\n\n## 安装Supervisor    \n\n    $ sudo pip install supervisor\n\nsupervisor是用python实现的一款进程管理工具。supervisor会帮你把管理的应用程序转成daemon程序，而且可以方便的通过命令开启，关闭，重启等操作。而且它管理的进程一旦崩溃会自动重启，这样就可以保证程序在执行中断后自我修复。  \n\n### supervisor配置\n\nsupervisor包括两部分：   \n\n* supervisord  (server端)\n* supervisorctl  (client端)\n\n重定向配置文件  \n\n    $ sudo echo_supervisord_conf > /etc/supervisord.conf\n    \n虽然可以把所有的配置项都写到supervisord.conf文件里，但并不推荐这样做。而是通过include的方式把不同的程序组写到不同的配置文件里。  \n\n修改supervisord.conf的include section  \n\n    [include]\n    files = /etc/supervisor/conf.d/*.conf\n    \n添加program配置  \n\n新建目录/etc/supervisor/conf.d，并创建stooge.conf\n\n    $ touch stooge.conf\n    $ vim stooge.conf\n    [program:stooge]\n    command=/home/$username/stooge/bin/gunicorn runserver:app -c /home/$username/stooge/gunicorn.conf\n    directory=/home/$username/stooge\n    user=$username\n    autostart=true\n    autorestart=true\n    stdout_logfile=/home/$username/stooge/logs/gunicorn_supervisor.log\n\n这样的配置，通过[program:stooge]来告诉supervisord需要管理哪个进程。可以在client端(supervisorctl或web页面)显示，并对该进程start,restart,stop。\n\n### supervisorctl\n\nsupervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定配置文件。  \n\n    $ supervisord -c /etc/supervisord.conf\n\nshell 命令  \n\n    $ supervisorctl status #查看程序状态\n    $ supervisorctl stop stooge\n    $ supervisorctl start stooge\n    $ supervisorctl restart stooge\n    $ supervisorctl reread #读取有更新的配置文件\n    $ supervisorctl update #重启配置文件修改过的进程\n\n在这里我们启动stooge  \n\n    $ supervisorctl start stooge\n\n## 安装nginx\n    $ yum install nginx\n\ncentos7下的nginx1.6.3没有sites-available和sites-enabled子目录。但是有conf.d子目录。和配置supervisord一样，也是可以通过include的方式把不同的程序组写到不同的配置文件里。\n\n### nginx配置\n\n确保/etc/nginx/nginx.conf中，http模块中引入conf.d子目录。  \n  \n    include /etc/nginx/conf.d/*.conf\n\n在/etc/nginx/conf.d下创建stooge.conf  \n\n    server {\n    \tlisten 80;\n    \tserver_name xx.xx.xx.xx;\n    \t\n    \troot /home/$username/stooge/;\n    \taccess_log /home/$username/stooge/access.log;\n    \terror_log /home/$username/stooge/error.log;\n    \t\n    \tlocation / {\n    \t\tproxy_set_header X-Forword-For $proxy_add_x_forwarded_for;\n    \t\tproxy_set_header Host $http_host;\n    \t\tproxy_redirect off;\n    \t\tif (!-f $request_filename) {\n    \t\t\tproxy_pass http://127.0.0.1:8000;\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    }\n\n重启nginx服务  \n\n    $sudo service nginx restart\n\n## 配置firewalld  \n\n安装完nginx后，80端口是没有开放的，外网无法访问。  \n增加http,https到/etc/firewalld/zones/public.xml文件。  \n    \n    <service name=\"http\"/>\n    <service name=\"https\"/>\n    \n## 访问helloworld服务\n\n外网访问ip，显示helloworld了！\n\n\n\n    \n\n\n\n","source":"_posts/centOS下配置Virtualenv-Flask-Gunicorn-Supervisor-Nginx.md","raw":"---\ntitle: centOS下配置Virtualenv+Flask+Gunicorn+Supervisor+Nginx\ndate: 2016-07-18 16:59:19\ntags: [centOS,Virtualenv,flask,Gunicorn,Supervisor]\n---\n在阿里云上部署flask环境。  \n\n## 安装virtualenv并创建工程  \n\n    $ pip install virtualenv\n    $ virtualenv stooge\n    $ cd stooge\n    $ source bin/activate\n\n## 安装flask并创建一个服务  \n\n    $ pip install flask\n    $ touch runserver.py\n    $ vim runserver.py\n    $ chmod a+x runserver.py\n        \n### runserver.py  \n\n    from flask import Flask\n    \n    app = Flask(__name__)\n    \n    @app.route('/')\n    def hello_world():\n    \treturn 'Hello World!'\n    \n    if __name__ == '__main__':\n    \tapp.run()\n \n## 安装Gunicorn  \n \n Gunicorn是一个开源Python WSGI UNIX的HTTP服务器，默认是同步工作，支持Gevent，Eventlet异步。  \n\n    $ pip install gunicorn\n\n### gunicorn.conf  \n\n在项目stooge根目录下, 配置gevent workers数处理并发，及绑定本地的端口号。 \n\n    #worker process number\n    workers = 3\n    #bind local port\n    bind = '127.0.0.1:8000'\n\n## 安装Supervisor    \n\n    $ sudo pip install supervisor\n\nsupervisor是用python实现的一款进程管理工具。supervisor会帮你把管理的应用程序转成daemon程序，而且可以方便的通过命令开启，关闭，重启等操作。而且它管理的进程一旦崩溃会自动重启，这样就可以保证程序在执行中断后自我修复。  \n\n### supervisor配置\n\nsupervisor包括两部分：   \n\n* supervisord  (server端)\n* supervisorctl  (client端)\n\n重定向配置文件  \n\n    $ sudo echo_supervisord_conf > /etc/supervisord.conf\n    \n虽然可以把所有的配置项都写到supervisord.conf文件里，但并不推荐这样做。而是通过include的方式把不同的程序组写到不同的配置文件里。  \n\n修改supervisord.conf的include section  \n\n    [include]\n    files = /etc/supervisor/conf.d/*.conf\n    \n添加program配置  \n\n新建目录/etc/supervisor/conf.d，并创建stooge.conf\n\n    $ touch stooge.conf\n    $ vim stooge.conf\n    [program:stooge]\n    command=/home/$username/stooge/bin/gunicorn runserver:app -c /home/$username/stooge/gunicorn.conf\n    directory=/home/$username/stooge\n    user=$username\n    autostart=true\n    autorestart=true\n    stdout_logfile=/home/$username/stooge/logs/gunicorn_supervisor.log\n\n这样的配置，通过[program:stooge]来告诉supervisord需要管理哪个进程。可以在client端(supervisorctl或web页面)显示，并对该进程start,restart,stop。\n\n### supervisorctl\n\nsupervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定配置文件。  \n\n    $ supervisord -c /etc/supervisord.conf\n\nshell 命令  \n\n    $ supervisorctl status #查看程序状态\n    $ supervisorctl stop stooge\n    $ supervisorctl start stooge\n    $ supervisorctl restart stooge\n    $ supervisorctl reread #读取有更新的配置文件\n    $ supervisorctl update #重启配置文件修改过的进程\n\n在这里我们启动stooge  \n\n    $ supervisorctl start stooge\n\n## 安装nginx\n    $ yum install nginx\n\ncentos7下的nginx1.6.3没有sites-available和sites-enabled子目录。但是有conf.d子目录。和配置supervisord一样，也是可以通过include的方式把不同的程序组写到不同的配置文件里。\n\n### nginx配置\n\n确保/etc/nginx/nginx.conf中，http模块中引入conf.d子目录。  \n  \n    include /etc/nginx/conf.d/*.conf\n\n在/etc/nginx/conf.d下创建stooge.conf  \n\n    server {\n    \tlisten 80;\n    \tserver_name xx.xx.xx.xx;\n    \t\n    \troot /home/$username/stooge/;\n    \taccess_log /home/$username/stooge/access.log;\n    \terror_log /home/$username/stooge/error.log;\n    \t\n    \tlocation / {\n    \t\tproxy_set_header X-Forword-For $proxy_add_x_forwarded_for;\n    \t\tproxy_set_header Host $http_host;\n    \t\tproxy_redirect off;\n    \t\tif (!-f $request_filename) {\n    \t\t\tproxy_pass http://127.0.0.1:8000;\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    }\n\n重启nginx服务  \n\n    $sudo service nginx restart\n\n## 配置firewalld  \n\n安装完nginx后，80端口是没有开放的，外网无法访问。  \n增加http,https到/etc/firewalld/zones/public.xml文件。  \n    \n    <service name=\"http\"/>\n    <service name=\"https\"/>\n    \n## 访问helloworld服务\n\n外网访问ip，显示helloworld了！\n\n\n\n    \n\n\n\n","slug":"centOS下配置Virtualenv-Flask-Gunicorn-Supervisor-Nginx","published":1,"updated":"2017-07-07T08:48:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ics00078rlxx1qrs5sw","content":"<p>在阿里云上部署flask环境。  </p>\n<h2 id=\"安装virtualenv并创建工程\"><a href=\"#安装virtualenv并创建工程\" class=\"headerlink\" title=\"安装virtualenv并创建工程\"></a>安装virtualenv并创建工程</h2><pre><code>$ pip install virtualenv\n$ virtualenv stooge\n$ cd stooge\n$ source bin/activate\n</code></pre><h2 id=\"安装flask并创建一个服务\"><a href=\"#安装flask并创建一个服务\" class=\"headerlink\" title=\"安装flask并创建一个服务\"></a>安装flask并创建一个服务</h2><pre><code>$ pip install flask\n$ touch runserver.py\n$ vim runserver.py\n$ chmod a+x runserver.py\n</code></pre><h3 id=\"runserver-py\"><a href=\"#runserver-py\" class=\"headerlink\" title=\"runserver.py\"></a>runserver.py</h3><pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(&apos;/&apos;)\ndef hello_world():\n    return &apos;Hello World!&apos;\n\nif __name__ == &apos;__main__&apos;:\n    app.run()\n</code></pre><h2 id=\"安装Gunicorn\"><a href=\"#安装Gunicorn\" class=\"headerlink\" title=\"安装Gunicorn\"></a>安装Gunicorn</h2><p> Gunicorn是一个开源Python WSGI UNIX的HTTP服务器，默认是同步工作，支持Gevent，Eventlet异步。  </p>\n<pre><code>$ pip install gunicorn\n</code></pre><h3 id=\"gunicorn-conf\"><a href=\"#gunicorn-conf\" class=\"headerlink\" title=\"gunicorn.conf\"></a>gunicorn.conf</h3><p>在项目stooge根目录下, 配置gevent workers数处理并发，及绑定本地的端口号。 </p>\n<pre><code>#worker process number\nworkers = 3\n#bind local port\nbind = &apos;127.0.0.1:8000&apos;\n</code></pre><h2 id=\"安装Supervisor\"><a href=\"#安装Supervisor\" class=\"headerlink\" title=\"安装Supervisor\"></a>安装Supervisor</h2><pre><code>$ sudo pip install supervisor\n</code></pre><p>supervisor是用python实现的一款进程管理工具。supervisor会帮你把管理的应用程序转成daemon程序，而且可以方便的通过命令开启，关闭，重启等操作。而且它管理的进程一旦崩溃会自动重启，这样就可以保证程序在执行中断后自我修复。  </p>\n<h3 id=\"supervisor配置\"><a href=\"#supervisor配置\" class=\"headerlink\" title=\"supervisor配置\"></a>supervisor配置</h3><p>supervisor包括两部分：   </p>\n<ul>\n<li>supervisord  (server端)</li>\n<li>supervisorctl  (client端)</li>\n</ul>\n<p>重定向配置文件  </p>\n<pre><code>$ sudo echo_supervisord_conf &gt; /etc/supervisord.conf\n</code></pre><p>虽然可以把所有的配置项都写到supervisord.conf文件里，但并不推荐这样做。而是通过include的方式把不同的程序组写到不同的配置文件里。  </p>\n<p>修改supervisord.conf的include section  </p>\n<pre><code>[include]\nfiles = /etc/supervisor/conf.d/*.conf\n</code></pre><p>添加program配置  </p>\n<p>新建目录/etc/supervisor/conf.d，并创建stooge.conf</p>\n<pre><code>$ touch stooge.conf\n$ vim stooge.conf\n[program:stooge]\ncommand=/home/$username/stooge/bin/gunicorn runserver:app -c /home/$username/stooge/gunicorn.conf\ndirectory=/home/$username/stooge\nuser=$username\nautostart=true\nautorestart=true\nstdout_logfile=/home/$username/stooge/logs/gunicorn_supervisor.log\n</code></pre><p>这样的配置，通过[program:stooge]来告诉supervisord需要管理哪个进程。可以在client端(supervisorctl或web页面)显示，并对该进程start,restart,stop。</p>\n<h3 id=\"supervisorctl\"><a href=\"#supervisorctl\" class=\"headerlink\" title=\"supervisorctl\"></a>supervisorctl</h3><p>supervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定配置文件。  </p>\n<pre><code>$ supervisord -c /etc/supervisord.conf\n</code></pre><p>shell 命令  </p>\n<pre><code>$ supervisorctl status #查看程序状态\n$ supervisorctl stop stooge\n$ supervisorctl start stooge\n$ supervisorctl restart stooge\n$ supervisorctl reread #读取有更新的配置文件\n$ supervisorctl update #重启配置文件修改过的进程\n</code></pre><p>在这里我们启动stooge  </p>\n<pre><code>$ supervisorctl start stooge\n</code></pre><h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><pre><code>$ yum install nginx\n</code></pre><p>centos7下的nginx1.6.3没有sites-available和sites-enabled子目录。但是有conf.d子目录。和配置supervisord一样，也是可以通过include的方式把不同的程序组写到不同的配置文件里。</p>\n<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><p>确保/etc/nginx/nginx.conf中，http模块中引入conf.d子目录。  </p>\n<pre><code>include /etc/nginx/conf.d/*.conf\n</code></pre><p>在/etc/nginx/conf.d下创建stooge.conf  </p>\n<pre><code>server {\n    listen 80;\n    server_name xx.xx.xx.xx;\n\n    root /home/$username/stooge/;\n    access_log /home/$username/stooge/access.log;\n    error_log /home/$username/stooge/error.log;\n\n    location / {\n        proxy_set_header X-Forword-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        if (!-f $request_filename) {\n            proxy_pass http://127.0.0.1:8000;\n            break;\n        }\n    }\n}\n</code></pre><p>重启nginx服务  </p>\n<pre><code>$sudo service nginx restart\n</code></pre><h2 id=\"配置firewalld\"><a href=\"#配置firewalld\" class=\"headerlink\" title=\"配置firewalld\"></a>配置firewalld</h2><p>安装完nginx后，80端口是没有开放的，外网无法访问。<br>增加http,https到/etc/firewalld/zones/public.xml文件。  </p>\n<pre><code>&lt;service name=&quot;http&quot;/&gt;\n&lt;service name=&quot;https&quot;/&gt;\n</code></pre><h2 id=\"访问helloworld服务\"><a href=\"#访问helloworld服务\" class=\"headerlink\" title=\"访问helloworld服务\"></a>访问helloworld服务</h2><p>外网访问ip，显示helloworld了！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在阿里云上部署flask环境。  </p>\n<h2 id=\"安装virtualenv并创建工程\"><a href=\"#安装virtualenv并创建工程\" class=\"headerlink\" title=\"安装virtualenv并创建工程\"></a>安装virtualenv并创建工程</h2><pre><code>$ pip install virtualenv\n$ virtualenv stooge\n$ cd stooge\n$ source bin/activate\n</code></pre><h2 id=\"安装flask并创建一个服务\"><a href=\"#安装flask并创建一个服务\" class=\"headerlink\" title=\"安装flask并创建一个服务\"></a>安装flask并创建一个服务</h2><pre><code>$ pip install flask\n$ touch runserver.py\n$ vim runserver.py\n$ chmod a+x runserver.py\n</code></pre><h3 id=\"runserver-py\"><a href=\"#runserver-py\" class=\"headerlink\" title=\"runserver.py\"></a>runserver.py</h3><pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(&apos;/&apos;)\ndef hello_world():\n    return &apos;Hello World!&apos;\n\nif __name__ == &apos;__main__&apos;:\n    app.run()\n</code></pre><h2 id=\"安装Gunicorn\"><a href=\"#安装Gunicorn\" class=\"headerlink\" title=\"安装Gunicorn\"></a>安装Gunicorn</h2><p> Gunicorn是一个开源Python WSGI UNIX的HTTP服务器，默认是同步工作，支持Gevent，Eventlet异步。  </p>\n<pre><code>$ pip install gunicorn\n</code></pre><h3 id=\"gunicorn-conf\"><a href=\"#gunicorn-conf\" class=\"headerlink\" title=\"gunicorn.conf\"></a>gunicorn.conf</h3><p>在项目stooge根目录下, 配置gevent workers数处理并发，及绑定本地的端口号。 </p>\n<pre><code>#worker process number\nworkers = 3\n#bind local port\nbind = &apos;127.0.0.1:8000&apos;\n</code></pre><h2 id=\"安装Supervisor\"><a href=\"#安装Supervisor\" class=\"headerlink\" title=\"安装Supervisor\"></a>安装Supervisor</h2><pre><code>$ sudo pip install supervisor\n</code></pre><p>supervisor是用python实现的一款进程管理工具。supervisor会帮你把管理的应用程序转成daemon程序，而且可以方便的通过命令开启，关闭，重启等操作。而且它管理的进程一旦崩溃会自动重启，这样就可以保证程序在执行中断后自我修复。  </p>\n<h3 id=\"supervisor配置\"><a href=\"#supervisor配置\" class=\"headerlink\" title=\"supervisor配置\"></a>supervisor配置</h3><p>supervisor包括两部分：   </p>\n<ul>\n<li>supervisord  (server端)</li>\n<li>supervisorctl  (client端)</li>\n</ul>\n<p>重定向配置文件  </p>\n<pre><code>$ sudo echo_supervisord_conf &gt; /etc/supervisord.conf\n</code></pre><p>虽然可以把所有的配置项都写到supervisord.conf文件里，但并不推荐这样做。而是通过include的方式把不同的程序组写到不同的配置文件里。  </p>\n<p>修改supervisord.conf的include section  </p>\n<pre><code>[include]\nfiles = /etc/supervisor/conf.d/*.conf\n</code></pre><p>添加program配置  </p>\n<p>新建目录/etc/supervisor/conf.d，并创建stooge.conf</p>\n<pre><code>$ touch stooge.conf\n$ vim stooge.conf\n[program:stooge]\ncommand=/home/$username/stooge/bin/gunicorn runserver:app -c /home/$username/stooge/gunicorn.conf\ndirectory=/home/$username/stooge\nuser=$username\nautostart=true\nautorestart=true\nstdout_logfile=/home/$username/stooge/logs/gunicorn_supervisor.log\n</code></pre><p>这样的配置，通过[program:stooge]来告诉supervisord需要管理哪个进程。可以在client端(supervisorctl或web页面)显示，并对该进程start,restart,stop。</p>\n<h3 id=\"supervisorctl\"><a href=\"#supervisorctl\" class=\"headerlink\" title=\"supervisorctl\"></a>supervisorctl</h3><p>supervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定配置文件。  </p>\n<pre><code>$ supervisord -c /etc/supervisord.conf\n</code></pre><p>shell 命令  </p>\n<pre><code>$ supervisorctl status #查看程序状态\n$ supervisorctl stop stooge\n$ supervisorctl start stooge\n$ supervisorctl restart stooge\n$ supervisorctl reread #读取有更新的配置文件\n$ supervisorctl update #重启配置文件修改过的进程\n</code></pre><p>在这里我们启动stooge  </p>\n<pre><code>$ supervisorctl start stooge\n</code></pre><h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><pre><code>$ yum install nginx\n</code></pre><p>centos7下的nginx1.6.3没有sites-available和sites-enabled子目录。但是有conf.d子目录。和配置supervisord一样，也是可以通过include的方式把不同的程序组写到不同的配置文件里。</p>\n<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><p>确保/etc/nginx/nginx.conf中，http模块中引入conf.d子目录。  </p>\n<pre><code>include /etc/nginx/conf.d/*.conf\n</code></pre><p>在/etc/nginx/conf.d下创建stooge.conf  </p>\n<pre><code>server {\n    listen 80;\n    server_name xx.xx.xx.xx;\n\n    root /home/$username/stooge/;\n    access_log /home/$username/stooge/access.log;\n    error_log /home/$username/stooge/error.log;\n\n    location / {\n        proxy_set_header X-Forword-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        if (!-f $request_filename) {\n            proxy_pass http://127.0.0.1:8000;\n            break;\n        }\n    }\n}\n</code></pre><p>重启nginx服务  </p>\n<pre><code>$sudo service nginx restart\n</code></pre><h2 id=\"配置firewalld\"><a href=\"#配置firewalld\" class=\"headerlink\" title=\"配置firewalld\"></a>配置firewalld</h2><p>安装完nginx后，80端口是没有开放的，外网无法访问。<br>增加http,https到/etc/firewalld/zones/public.xml文件。  </p>\n<pre><code>&lt;service name=&quot;http&quot;/&gt;\n&lt;service name=&quot;https&quot;/&gt;\n</code></pre><h2 id=\"访问helloworld服务\"><a href=\"#访问helloworld服务\" class=\"headerlink\" title=\"访问helloworld服务\"></a>访问helloworld服务</h2><p>外网访问ip，显示helloworld了！</p>\n"},{"title":"curl测试restful服务","date":"2016-07-19T08:00:06.000Z","_content":"利用curl，可以很方便的测试restful服务，发送HTTP GET，POST，PUT，DELETE请求。也可以改变HTTP header来指定特别条件。\n\n### curl参数\n> -X/--request [GET|POST|PUT|DELETE|...]  <mark>指定http request方式</mark>    \n> -H/--header                             <mark>设定request请求的header</mark>  \n> -i/--include                            <mark>显示response响应的header</mark>  \n> -d/--data                               <mark>设定request的参数</mark>  \n> -v/--verbose                            <mark>输出更多的信息</mark>  \n> -u/--user                               <mark>使用者账号，密码</mark>  \n> -b/--cookie                             <mark>cookie</mark>\n\n### GET\n    $ curl -i http://localhost:5000/rest/api/v1.0/tasks\n\n### POST\n    $ curl -i -H \"Content-Type: application/json\" -X POST -d '{\"title\":\"learn python\"}' http://localhost:5000/rest/api/v1.0/tasks  \n\n### PUT\n    $ curl -i -H \"Content-Type: application/json\" -X PUT -d '{\"title\":\"learn nodejs\"}' http://localhost:5000/rest/api/v1.0/tasks/2\n\n### DELETE\n    $ curl -i -X DELETE http://localhost:5000/rest/api/v1.0/tasks/1\n  ","source":"_posts/curl测试restful服务.md","raw":"---\ntitle: curl测试restful服务\ndate: 2016-07-19 16:00:06\ntags: [curl,restful]\n---\n利用curl，可以很方便的测试restful服务，发送HTTP GET，POST，PUT，DELETE请求。也可以改变HTTP header来指定特别条件。\n\n### curl参数\n> -X/--request [GET|POST|PUT|DELETE|...]  <mark>指定http request方式</mark>    \n> -H/--header                             <mark>设定request请求的header</mark>  \n> -i/--include                            <mark>显示response响应的header</mark>  \n> -d/--data                               <mark>设定request的参数</mark>  \n> -v/--verbose                            <mark>输出更多的信息</mark>  \n> -u/--user                               <mark>使用者账号，密码</mark>  \n> -b/--cookie                             <mark>cookie</mark>\n\n### GET\n    $ curl -i http://localhost:5000/rest/api/v1.0/tasks\n\n### POST\n    $ curl -i -H \"Content-Type: application/json\" -X POST -d '{\"title\":\"learn python\"}' http://localhost:5000/rest/api/v1.0/tasks  \n\n### PUT\n    $ curl -i -H \"Content-Type: application/json\" -X PUT -d '{\"title\":\"learn nodejs\"}' http://localhost:5000/rest/api/v1.0/tasks/2\n\n### DELETE\n    $ curl -i -X DELETE http://localhost:5000/rest/api/v1.0/tasks/1\n  ","slug":"curl测试restful服务","published":1,"updated":"2016-07-20T00:40:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81icv00088rlxaajzgy2o","content":"<p>利用curl，可以很方便的测试restful服务，发送HTTP GET，POST，PUT，DELETE请求。也可以改变HTTP header来指定特别条件。</p>\n<h3 id=\"curl参数\"><a href=\"#curl参数\" class=\"headerlink\" title=\"curl参数\"></a>curl参数</h3><blockquote>\n<p>-X/–request [GET|POST|PUT|DELETE|…]  <mark>指定http request方式</mark><br>-H/–header                             <mark>设定request请求的header</mark><br>-i/–include                            <mark>显示response响应的header</mark><br>-d/–data                               <mark>设定request的参数</mark><br>-v/–verbose                            <mark>输出更多的信息</mark><br>-u/–user                               <mark>使用者账号，密码</mark><br>-b/–cookie                             <mark>cookie</mark></p>\n</blockquote>\n<h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h3><pre><code>$ curl -i http://localhost:5000/rest/api/v1.0/tasks\n</code></pre><h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><pre><code>$ curl -i -H &quot;Content-Type: application/json&quot; -X POST -d &apos;{&quot;title&quot;:&quot;learn python&quot;}&apos; http://localhost:5000/rest/api/v1.0/tasks  \n</code></pre><h3 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h3><pre><code>$ curl -i -H &quot;Content-Type: application/json&quot; -X PUT -d &apos;{&quot;title&quot;:&quot;learn nodejs&quot;}&apos; http://localhost:5000/rest/api/v1.0/tasks/2\n</code></pre><h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><pre><code>$ curl -i -X DELETE http://localhost:5000/rest/api/v1.0/tasks/1\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>利用curl，可以很方便的测试restful服务，发送HTTP GET，POST，PUT，DELETE请求。也可以改变HTTP header来指定特别条件。</p>\n<h3 id=\"curl参数\"><a href=\"#curl参数\" class=\"headerlink\" title=\"curl参数\"></a>curl参数</h3><blockquote>\n<p>-X/–request [GET|POST|PUT|DELETE|…]  <mark>指定http request方式</mark><br>-H/–header                             <mark>设定request请求的header</mark><br>-i/–include                            <mark>显示response响应的header</mark><br>-d/–data                               <mark>设定request的参数</mark><br>-v/–verbose                            <mark>输出更多的信息</mark><br>-u/–user                               <mark>使用者账号，密码</mark><br>-b/–cookie                             <mark>cookie</mark></p>\n</blockquote>\n<h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h3><pre><code>$ curl -i http://localhost:5000/rest/api/v1.0/tasks\n</code></pre><h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><pre><code>$ curl -i -H &quot;Content-Type: application/json&quot; -X POST -d &apos;{&quot;title&quot;:&quot;learn python&quot;}&apos; http://localhost:5000/rest/api/v1.0/tasks  \n</code></pre><h3 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h3><pre><code>$ curl -i -H &quot;Content-Type: application/json&quot; -X PUT -d &apos;{&quot;title&quot;:&quot;learn nodejs&quot;}&apos; http://localhost:5000/rest/api/v1.0/tasks/2\n</code></pre><h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><pre><code>$ curl -i -X DELETE http://localhost:5000/rest/api/v1.0/tasks/1\n</code></pre>"},{"title":"docker-compose的使用","date":"2017-07-27T04:09:33.000Z","_content":"docker compose是一个用来定义和运行复杂应用的docker工具。使用compose，你可以在一个文件中定义一个多容器应用，然后使用一条命令来启动应用。    \n\n## 下载docker-compose\n\n```shell\ncurl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n## 创建应用目录\n```shell\nmkdir compose-gitbucket\ntouch docker-compose.yml\n```\n\n## docker-compose.yml配置文件\n```yml\ngitbucket:\n  image: f99aq8ove/gitbucket\n  volumes:\n    - ./gitbucket:/gitbucket\n  ports:\n    - \"8080:8080\"\n    - \"29418:29418\"\n  restart: always\n```\n\n## docker-compose命令\n> build 构建或重建服务    \n> help 命令帮助    \n> kill 杀掉容器    \n> logs 显示容器的输出内容    \n> port 打印绑定的开放端口    \n> ps 显示容器    \n> pull 拉取服务镜像    \n> restart 重启服务    \n> rm 删除停止的容器    \n> run 运行一个一次性命令    \n> scale 设置服务的容器数目    \n> start 开启服务    \n> stop 停止服务    \n> up 创建并启动容器    \n\n一般up之后，又改写了yml配置文件，则需要rm掉旧的容器，再up。\n\n## 后台启动\n在应用目录下启动\n\n```shell\ndocker-compose up -d\n```\n","source":"_posts/docker-compose的使用.md","raw":"---\ntitle: docker-compose的使用\ndate: 2017-07-27 12:09:33\ntags: [docker, docker-compose]\n---\ndocker compose是一个用来定义和运行复杂应用的docker工具。使用compose，你可以在一个文件中定义一个多容器应用，然后使用一条命令来启动应用。    \n\n## 下载docker-compose\n\n```shell\ncurl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n## 创建应用目录\n```shell\nmkdir compose-gitbucket\ntouch docker-compose.yml\n```\n\n## docker-compose.yml配置文件\n```yml\ngitbucket:\n  image: f99aq8ove/gitbucket\n  volumes:\n    - ./gitbucket:/gitbucket\n  ports:\n    - \"8080:8080\"\n    - \"29418:29418\"\n  restart: always\n```\n\n## docker-compose命令\n> build 构建或重建服务    \n> help 命令帮助    \n> kill 杀掉容器    \n> logs 显示容器的输出内容    \n> port 打印绑定的开放端口    \n> ps 显示容器    \n> pull 拉取服务镜像    \n> restart 重启服务    \n> rm 删除停止的容器    \n> run 运行一个一次性命令    \n> scale 设置服务的容器数目    \n> start 开启服务    \n> stop 停止服务    \n> up 创建并启动容器    \n\n一般up之后，又改写了yml配置文件，则需要rm掉旧的容器，再up。\n\n## 后台启动\n在应用目录下启动\n\n```shell\ndocker-compose up -d\n```\n","slug":"docker-compose的使用","published":1,"updated":"2017-07-27T05:44:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81id4000a8rlxj5tyc3yl","content":"<p>docker compose是一个用来定义和运行复杂应用的docker工具。使用compose，你可以在一个文件中定义一个多容器应用，然后使用一条命令来启动应用。    </p>\n<h2 id=\"下载docker-compose\"><a href=\"#下载docker-compose\" class=\"headerlink\" title=\"下载docker-compose\"></a>下载docker-compose</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建应用目录\"><a href=\"#创建应用目录\" class=\"headerlink\" title=\"创建应用目录\"></a>创建应用目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir compose-gitbucket</span><br><span class=\"line\">touch docker-compose.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose-yml配置文件\"><a href=\"#docker-compose-yml配置文件\" class=\"headerlink\" title=\"docker-compose.yml配置文件\"></a>docker-compose.yml配置文件</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">gitbucket:</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"string\">f99aq8ove/gitbucket</span></span><br><span class=\"line\"><span class=\"attr\">  volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">./gitbucket:/gitbucket</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"8080:8080\"</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"29418:29418\"</span></span><br><span class=\"line\"><span class=\"attr\">  restart:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose命令\"><a href=\"#docker-compose命令\" class=\"headerlink\" title=\"docker-compose命令\"></a>docker-compose命令</h2><blockquote>\n<p>build 构建或重建服务<br>help 命令帮助<br>kill 杀掉容器<br>logs 显示容器的输出内容<br>port 打印绑定的开放端口<br>ps 显示容器<br>pull 拉取服务镜像<br>restart 重启服务<br>rm 删除停止的容器<br>run 运行一个一次性命令<br>scale 设置服务的容器数目<br>start 开启服务<br>stop 停止服务<br>up 创建并启动容器    </p>\n</blockquote>\n<p>一般up之后，又改写了yml配置文件，则需要rm掉旧的容器，再up。</p>\n<h2 id=\"后台启动\"><a href=\"#后台启动\" class=\"headerlink\" title=\"后台启动\"></a>后台启动</h2><p>在应用目录下启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>docker compose是一个用来定义和运行复杂应用的docker工具。使用compose，你可以在一个文件中定义一个多容器应用，然后使用一条命令来启动应用。    </p>\n<h2 id=\"下载docker-compose\"><a href=\"#下载docker-compose\" class=\"headerlink\" title=\"下载docker-compose\"></a>下载docker-compose</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建应用目录\"><a href=\"#创建应用目录\" class=\"headerlink\" title=\"创建应用目录\"></a>创建应用目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir compose-gitbucket</span><br><span class=\"line\">touch docker-compose.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose-yml配置文件\"><a href=\"#docker-compose-yml配置文件\" class=\"headerlink\" title=\"docker-compose.yml配置文件\"></a>docker-compose.yml配置文件</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">gitbucket:</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"string\">f99aq8ove/gitbucket</span></span><br><span class=\"line\"><span class=\"attr\">  volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">./gitbucket:/gitbucket</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"8080:8080\"</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"29418:29418\"</span></span><br><span class=\"line\"><span class=\"attr\">  restart:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose命令\"><a href=\"#docker-compose命令\" class=\"headerlink\" title=\"docker-compose命令\"></a>docker-compose命令</h2><blockquote>\n<p>build 构建或重建服务<br>help 命令帮助<br>kill 杀掉容器<br>logs 显示容器的输出内容<br>port 打印绑定的开放端口<br>ps 显示容器<br>pull 拉取服务镜像<br>restart 重启服务<br>rm 删除停止的容器<br>run 运行一个一次性命令<br>scale 设置服务的容器数目<br>start 开启服务<br>stop 停止服务<br>up 创建并启动容器    </p>\n</blockquote>\n<p>一般up之后，又改写了yml配置文件，则需要rm掉旧的容器，再up。</p>\n<h2 id=\"后台启动\"><a href=\"#后台启动\" class=\"headerlink\" title=\"后台启动\"></a>后台启动</h2><p>在应用目录下启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n"},{"title":"docker创建私有仓库","date":"2017-07-24T08:50:48.000Z","_content":"\n## 拉取registry的镜像\n```\ndocker pull registry:2.1.1\n```\n## 启动容器\n```\ndocker run -d -v /root/compose-docker-registry:/var/lib/registry -p 5000:5000 --restart=always --name registry2 --privileged registry:2.1.1\n```\n## 打包镜像push到本地仓库\n```\ndocker tag postgres $registry-address:5000/postgres\ndocker push $registry-address:5000/postgres\n```\n   \n## list仓库中的镜像\n在client端执行\n```\ncurl -XGET http://$registry-address:5000/v2/_catalog    \n```\n\n## 可能问题\n\n#### docker received unexpected HTTP status:501 Not Implemented\n这个问题是client端配置了docker的http-proxy，没有将docker的私有仓库registry所在ip设为例外导致的。\n#### server gave HTTP response to HTTPS client\nregistry默认的是https协议，因此需要在client端配置insecure-registries。    \n我的docker版本是1.12.1，配置文件是/etc/docker/daemon.json    \n```\n{\"insecure-registries\":[\"$registry-address:5000\"]}\n```\n        ","source":"_posts/docker创建私有仓库.md","raw":"---\ntitle: docker创建私有仓库\ndate: 2017-07-24 16:50:48\ntags: [docker, registry]\n---\n\n## 拉取registry的镜像\n```\ndocker pull registry:2.1.1\n```\n## 启动容器\n```\ndocker run -d -v /root/compose-docker-registry:/var/lib/registry -p 5000:5000 --restart=always --name registry2 --privileged registry:2.1.1\n```\n## 打包镜像push到本地仓库\n```\ndocker tag postgres $registry-address:5000/postgres\ndocker push $registry-address:5000/postgres\n```\n   \n## list仓库中的镜像\n在client端执行\n```\ncurl -XGET http://$registry-address:5000/v2/_catalog    \n```\n\n## 可能问题\n\n#### docker received unexpected HTTP status:501 Not Implemented\n这个问题是client端配置了docker的http-proxy，没有将docker的私有仓库registry所在ip设为例外导致的。\n#### server gave HTTP response to HTTPS client\nregistry默认的是https协议，因此需要在client端配置insecure-registries。    \n我的docker版本是1.12.1，配置文件是/etc/docker/daemon.json    \n```\n{\"insecure-registries\":[\"$registry-address:5000\"]}\n```\n        ","slug":"docker创建私有仓库","published":1,"updated":"2017-07-24T09:34:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ida000b8rlxfis2ofyr","content":"<h2 id=\"拉取registry的镜像\"><a href=\"#拉取registry的镜像\" class=\"headerlink\" title=\"拉取registry的镜像\"></a>拉取registry的镜像</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">pull</span> <span class=\"selector-tag\">registry</span><span class=\"selector-pseudo\">:2.1.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v <span class=\"string\">/root/compose-docker-registry</span>:<span class=\"string\">/var/lib/registry</span> -p 5000<span class=\"function\">:5000</span> <span class=\"params\">--restart=always</span> <span class=\"params\">--name</span> registry2 <span class=\"params\">--privileged</span> registry<span class=\"function\">:2.1.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"打包镜像push到本地仓库\"><a href=\"#打包镜像push到本地仓库\" class=\"headerlink\" title=\"打包镜像push到本地仓库\"></a>打包镜像push到本地仓库</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag postgres <span class=\"variable\">$registry</span>-<span class=\"selector-tag\">address</span>:<span class=\"number\">5000</span>/postgres</span><br><span class=\"line\">docker push <span class=\"variable\">$registry</span>-<span class=\"selector-tag\">address</span>:<span class=\"number\">5000</span>/postgres</span><br></pre></td></tr></table></figure>\n<h2 id=\"list仓库中的镜像\"><a href=\"#list仓库中的镜像\" class=\"headerlink\" title=\"list仓库中的镜像\"></a>list仓库中的镜像</h2><p>在client端执行<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET http:<span class=\"regexp\">//</span><span class=\"variable\">$registry</span>-address:<span class=\"number\">5000</span><span class=\"regexp\">/v2/</span>_catalog</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可能问题\"><a href=\"#可能问题\" class=\"headerlink\" title=\"可能问题\"></a>可能问题</h2><h4 id=\"docker-received-unexpected-HTTP-status-501-Not-Implemented\"><a href=\"#docker-received-unexpected-HTTP-status-501-Not-Implemented\" class=\"headerlink\" title=\"docker received unexpected HTTP status:501 Not Implemented\"></a>docker received unexpected HTTP status:501 Not Implemented</h4><p>这个问题是client端配置了docker的http-proxy，没有将docker的私有仓库registry所在ip设为例外导致的。</p>\n<h4 id=\"server-gave-HTTP-response-to-HTTPS-client\"><a href=\"#server-gave-HTTP-response-to-HTTPS-client\" class=\"headerlink\" title=\"server gave HTTP response to HTTPS client\"></a>server gave HTTP response to HTTPS client</h4><p>registry默认的是https协议，因此需要在client端配置insecure-registries。<br>我的docker版本是1.12.1，配置文件是/etc/docker/daemon.json<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"insecure-registries\"</span>:[<span class=\"string\">\"$registry-address:5000\"</span>]&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"拉取registry的镜像\"><a href=\"#拉取registry的镜像\" class=\"headerlink\" title=\"拉取registry的镜像\"></a>拉取registry的镜像</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">pull</span> <span class=\"selector-tag\">registry</span><span class=\"selector-pseudo\">:2.1.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v <span class=\"string\">/root/compose-docker-registry</span>:<span class=\"string\">/var/lib/registry</span> -p 5000<span class=\"function\">:5000</span> <span class=\"params\">--restart=always</span> <span class=\"params\">--name</span> registry2 <span class=\"params\">--privileged</span> registry<span class=\"function\">:2.1.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"打包镜像push到本地仓库\"><a href=\"#打包镜像push到本地仓库\" class=\"headerlink\" title=\"打包镜像push到本地仓库\"></a>打包镜像push到本地仓库</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag postgres <span class=\"variable\">$registry</span>-<span class=\"selector-tag\">address</span>:<span class=\"number\">5000</span>/postgres</span><br><span class=\"line\">docker push <span class=\"variable\">$registry</span>-<span class=\"selector-tag\">address</span>:<span class=\"number\">5000</span>/postgres</span><br></pre></td></tr></table></figure>\n<h2 id=\"list仓库中的镜像\"><a href=\"#list仓库中的镜像\" class=\"headerlink\" title=\"list仓库中的镜像\"></a>list仓库中的镜像</h2><p>在client端执行<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET http:<span class=\"regexp\">//</span><span class=\"variable\">$registry</span>-address:<span class=\"number\">5000</span><span class=\"regexp\">/v2/</span>_catalog</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可能问题\"><a href=\"#可能问题\" class=\"headerlink\" title=\"可能问题\"></a>可能问题</h2><h4 id=\"docker-received-unexpected-HTTP-status-501-Not-Implemented\"><a href=\"#docker-received-unexpected-HTTP-status-501-Not-Implemented\" class=\"headerlink\" title=\"docker received unexpected HTTP status:501 Not Implemented\"></a>docker received unexpected HTTP status:501 Not Implemented</h4><p>这个问题是client端配置了docker的http-proxy，没有将docker的私有仓库registry所在ip设为例外导致的。</p>\n<h4 id=\"server-gave-HTTP-response-to-HTTPS-client\"><a href=\"#server-gave-HTTP-response-to-HTTPS-client\" class=\"headerlink\" title=\"server gave HTTP response to HTTPS client\"></a>server gave HTTP response to HTTPS client</h4><p>registry默认的是https协议，因此需要在client端配置insecure-registries。<br>我的docker版本是1.12.1，配置文件是/etc/docker/daemon.json<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"insecure-registries\"</span>:[<span class=\"string\">\"$registry-address:5000\"</span>]&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"docker容器启动iptables报错","date":"2017-03-28T12:22:32.000Z","_content":"### 错误信息\n```\ndocker0: iptables: No chain/target/match by that name\n```\n### 重启docker\n```\nservice docker restart\n```\n### 列出iptables的所有规则\n```\niptables -L\n```\n可以看到iptables里面多出了Chain Docker的选项。    \n经验为：在启动firewalld之后，iptables被激活，此时没有docker chain，重启docker后被加入到iptable里面。\n","source":"_posts/docker容器启动iptables报错.md","raw":"---\ntitle: docker容器启动iptables报错\ndate: 2017-03-28 20:22:32\ntags: [docker,iptables]\n---\n### 错误信息\n```\ndocker0: iptables: No chain/target/match by that name\n```\n### 重启docker\n```\nservice docker restart\n```\n### 列出iptables的所有规则\n```\niptables -L\n```\n可以看到iptables里面多出了Chain Docker的选项。    \n经验为：在启动firewalld之后，iptables被激活，此时没有docker chain，重启docker后被加入到iptable里面。\n","slug":"docker容器启动iptables报错","published":1,"updated":"2017-03-28T12:24:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81idd000d8rlxcdt98i85","content":"<h3 id=\"错误信息\"><a href=\"#错误信息\" class=\"headerlink\" title=\"错误信息\"></a>错误信息</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">docker0:</span> <span class=\"attr\">iptables:</span> <span class=\"literal\">No</span> <span class=\"string\">chain/target/match</span> <span class=\"string\">by</span> <span class=\"string\">that</span> <span class=\"string\">name</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重启docker\"><a href=\"#重启docker\" class=\"headerlink\" title=\"重启docker\"></a>重启docker</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">service docker restart</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"列出iptables的所有规则\"><a href=\"#列出iptables的所有规则\" class=\"headerlink\" title=\"列出iptables的所有规则\"></a>列出iptables的所有规则</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">iptables -L</span></span><br></pre></td></tr></table></figure>\n<p>可以看到iptables里面多出了Chain Docker的选项。<br>经验为：在启动firewalld之后，iptables被激活，此时没有docker chain，重启docker后被加入到iptable里面。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"错误信息\"><a href=\"#错误信息\" class=\"headerlink\" title=\"错误信息\"></a>错误信息</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">docker0:</span> <span class=\"attr\">iptables:</span> <span class=\"literal\">No</span> <span class=\"string\">chain/target/match</span> <span class=\"string\">by</span> <span class=\"string\">that</span> <span class=\"string\">name</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重启docker\"><a href=\"#重启docker\" class=\"headerlink\" title=\"重启docker\"></a>重启docker</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">service docker restart</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"列出iptables的所有规则\"><a href=\"#列出iptables的所有规则\" class=\"headerlink\" title=\"列出iptables的所有规则\"></a>列出iptables的所有规则</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">iptables -L</span></span><br></pre></td></tr></table></figure>\n<p>可以看到iptables里面多出了Chain Docker的选项。<br>经验为：在启动firewalld之后，iptables被激活，此时没有docker chain，重启docker后被加入到iptable里面。</p>\n"},{"title":"flask.exthook.ExtDeprecationWarning警告的消除","date":"2016-06-17T01:12:32.000Z","_content":"flask升级到0.11版后，弃用了以 **flask.ext.xxx** 导入扩展模块的形式，改为 **flask_xxx**。\n如果仍然沿用原来的形式，flask会报警告flask.exthook.ExtDeprecationWarning。  \n\nflask团队提供了<a href=\"https://github.com/pallets/flask-ext-migrate\">flask-ext-migrate</a>的转换工具。  \n\npip安装：  \n\n    $ pip install flask-ext-migrate\n\n转换：  \n\n    $ flask_ext_migrate xxx.py\n \n<mark>但目前pip上的版本上存在bug，最新的github上fix了这个问题。</mark>  \n这个转换工具一次只能转换一个python文件。  \n随便写个shell批量处理吧。  \n\n    $ for f in `find . -name \"*.py\"`\n    > {\n    > flask_ext_migrate $f\n    > }\n\n\n\n\n\n\n\n\n","source":"_posts/flask-exthook-ExtDeprecationWarning警告的消除.md","raw":"---\ntitle: flask.exthook.ExtDeprecationWarning警告的消除\ndate: 2016-06-17 09:12:32\ntags: [flask,shell,flask-ext-migrate]\n---\nflask升级到0.11版后，弃用了以 **flask.ext.xxx** 导入扩展模块的形式，改为 **flask_xxx**。\n如果仍然沿用原来的形式，flask会报警告flask.exthook.ExtDeprecationWarning。  \n\nflask团队提供了<a href=\"https://github.com/pallets/flask-ext-migrate\">flask-ext-migrate</a>的转换工具。  \n\npip安装：  \n\n    $ pip install flask-ext-migrate\n\n转换：  \n\n    $ flask_ext_migrate xxx.py\n \n<mark>但目前pip上的版本上存在bug，最新的github上fix了这个问题。</mark>  \n这个转换工具一次只能转换一个python文件。  \n随便写个shell批量处理吧。  \n\n    $ for f in `find . -name \"*.py\"`\n    > {\n    > flask_ext_migrate $f\n    > }\n\n\n\n\n\n\n\n\n","slug":"flask-exthook-ExtDeprecationWarning警告的消除","published":1,"updated":"2016-06-17T01:46:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81idf000e8rlx0xks0ako","content":"<p>flask升级到0.11版后，弃用了以 <strong>flask.ext.xxx</strong> 导入扩展模块的形式，改为 <strong>flask_xxx</strong>。<br>如果仍然沿用原来的形式，flask会报警告flask.exthook.ExtDeprecationWarning。  </p>\n<p>flask团队提供了<a href=\"https://github.com/pallets/flask-ext-migrate\" target=\"_blank\" rel=\"noopener\">flask-ext-migrate</a>的转换工具。  </p>\n<p>pip安装：  </p>\n<pre><code>$ pip install flask-ext-migrate\n</code></pre><p>转换：  </p>\n<pre><code>$ flask_ext_migrate xxx.py\n</code></pre><p><mark>但目前pip上的版本上存在bug，最新的github上fix了这个问题。</mark><br>这个转换工具一次只能转换一个python文件。<br>随便写个shell批量处理吧。  </p>\n<pre><code>$ for f in `find . -name &quot;*.py&quot;`\n&gt; {\n&gt; flask_ext_migrate $f\n&gt; }\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>flask升级到0.11版后，弃用了以 <strong>flask.ext.xxx</strong> 导入扩展模块的形式，改为 <strong>flask_xxx</strong>。<br>如果仍然沿用原来的形式，flask会报警告flask.exthook.ExtDeprecationWarning。  </p>\n<p>flask团队提供了<a href=\"https://github.com/pallets/flask-ext-migrate\" target=\"_blank\" rel=\"noopener\">flask-ext-migrate</a>的转换工具。  </p>\n<p>pip安装：  </p>\n<pre><code>$ pip install flask-ext-migrate\n</code></pre><p>转换：  </p>\n<pre><code>$ flask_ext_migrate xxx.py\n</code></pre><p><mark>但目前pip上的版本上存在bug，最新的github上fix了这个问题。</mark><br>这个转换工具一次只能转换一个python文件。<br>随便写个shell批量处理吧。  </p>\n<pre><code>$ for f in `find . -name &quot;*.py&quot;`\n&gt; {\n&gt; flask_ext_migrate $f\n&gt; }\n</code></pre>"},{"title":"flask-migrate数据库迁移","date":"2016-08-11T01:50:52.000Z","_content":"在迭代开发中，会阶段性的变更数据库模型，更新数据库。  \n变更时，为了不丢失数据库中的数据，可以使用数据库迁移工具。  \n\n**flask－migrate**是对Alembic的轻量级封装，并且已经被集成到了flask-script中。  \n## 安装\n    $ pip install flask-migrate\n\n## 配置\n    from flask_sqlalchemy import SQLAlchemy as SQLAlchemy\n    from flask_script import Manager, Shell\n    from flask_migrate import Migrate, MigrateCommand\n    \n    app = Flask(__name__)\n    manager = Manager(app)\n    db = SQLAlchemy(app)\n    migrate = Migrate(app, db)\n    \n    manager.add_command(\"shell\", Shell(make_context=make_shell_context))\n    manager.add_command('db', MigrateCommand)\n    \n    if __name__ == '__main__':\n        manager.run()\n        \n## 创建迁移仓库\n    $ python xxx.py db init\n## 创建迁移脚本\n    $ python xxx.py db migrate\n## 数据库迁移\n    $ python xxx.py db upgrade    \n    ","source":"_posts/flask-migrate数据库迁移.md","raw":"---\ntitle: flask-migrate数据库迁移\ndate: 2016-08-11 09:50:52\ntags: [python, flask, flask-migrate]\n---\n在迭代开发中，会阶段性的变更数据库模型，更新数据库。  \n变更时，为了不丢失数据库中的数据，可以使用数据库迁移工具。  \n\n**flask－migrate**是对Alembic的轻量级封装，并且已经被集成到了flask-script中。  \n## 安装\n    $ pip install flask-migrate\n\n## 配置\n    from flask_sqlalchemy import SQLAlchemy as SQLAlchemy\n    from flask_script import Manager, Shell\n    from flask_migrate import Migrate, MigrateCommand\n    \n    app = Flask(__name__)\n    manager = Manager(app)\n    db = SQLAlchemy(app)\n    migrate = Migrate(app, db)\n    \n    manager.add_command(\"shell\", Shell(make_context=make_shell_context))\n    manager.add_command('db', MigrateCommand)\n    \n    if __name__ == '__main__':\n        manager.run()\n        \n## 创建迁移仓库\n    $ python xxx.py db init\n## 创建迁移脚本\n    $ python xxx.py db migrate\n## 数据库迁移\n    $ python xxx.py db upgrade    \n    ","slug":"flask-migrate数据库迁移","published":1,"updated":"2016-08-11T02:06:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81idi000g8rlx571tgg7v","content":"<p>在迭代开发中，会阶段性的变更数据库模型，更新数据库。<br>变更时，为了不丢失数据库中的数据，可以使用数据库迁移工具。  </p>\n<p><strong>flask－migrate</strong>是对Alembic的轻量级封装，并且已经被集成到了flask-script中。  </p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>$ pip install flask-migrate\n</code></pre><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><pre><code>from flask_sqlalchemy import SQLAlchemy as SQLAlchemy\nfrom flask_script import Manager, Shell\nfrom flask_migrate import Migrate, MigrateCommand\n\napp = Flask(__name__)\nmanager = Manager(app)\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n\nmanager.add_command(&quot;shell&quot;, Shell(make_context=make_shell_context))\nmanager.add_command(&apos;db&apos;, MigrateCommand)\n\nif __name__ == &apos;__main__&apos;:\n    manager.run()\n</code></pre><h2 id=\"创建迁移仓库\"><a href=\"#创建迁移仓库\" class=\"headerlink\" title=\"创建迁移仓库\"></a>创建迁移仓库</h2><pre><code>$ python xxx.py db init\n</code></pre><h2 id=\"创建迁移脚本\"><a href=\"#创建迁移脚本\" class=\"headerlink\" title=\"创建迁移脚本\"></a>创建迁移脚本</h2><pre><code>$ python xxx.py db migrate\n</code></pre><h2 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h2><pre><code>$ python xxx.py db upgrade    \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>在迭代开发中，会阶段性的变更数据库模型，更新数据库。<br>变更时，为了不丢失数据库中的数据，可以使用数据库迁移工具。  </p>\n<p><strong>flask－migrate</strong>是对Alembic的轻量级封装，并且已经被集成到了flask-script中。  </p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>$ pip install flask-migrate\n</code></pre><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><pre><code>from flask_sqlalchemy import SQLAlchemy as SQLAlchemy\nfrom flask_script import Manager, Shell\nfrom flask_migrate import Migrate, MigrateCommand\n\napp = Flask(__name__)\nmanager = Manager(app)\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n\nmanager.add_command(&quot;shell&quot;, Shell(make_context=make_shell_context))\nmanager.add_command(&apos;db&apos;, MigrateCommand)\n\nif __name__ == &apos;__main__&apos;:\n    manager.run()\n</code></pre><h2 id=\"创建迁移仓库\"><a href=\"#创建迁移仓库\" class=\"headerlink\" title=\"创建迁移仓库\"></a>创建迁移仓库</h2><pre><code>$ python xxx.py db init\n</code></pre><h2 id=\"创建迁移脚本\"><a href=\"#创建迁移脚本\" class=\"headerlink\" title=\"创建迁移脚本\"></a>创建迁移脚本</h2><pre><code>$ python xxx.py db migrate\n</code></pre><h2 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h2><pre><code>$ python xxx.py db upgrade    \n</code></pre>"},{"title":"docker部署web环境","date":"2017-03-28T12:04:17.000Z","_content":"### postgresql\n```\n1. docker pull sameersbn/postgresql\n2. docker run --name=postgresql -itd --restart always \\\n--publish 5432:5432 \\\n--volume /opt/postgresql/data:/var/lib/postgresql \\\n--env 'DB_USER=mymebyo_adm01' --env 'DB_PASS=mymebyo_adm01' --env 'DB_NAME=mymebyo' \\\nsameersbn/postgresql    \n```\n### redis\n```\n1. docker pull redis\n2. docker run --name=redis -p 6379:6379 -v /opt/redis/data:/data -d redis redis-server --appendonly yes\n```\n**redis-server --appendonly yes** :在容器执行redis-server启动命令，并打开redis持久化配置\n### java web\n```\n1. docker pull java\n2. docker run -it --volume /var/www:/var/www --publish 8082:8080 --link postgresql:mebyo --link redis:redis java /bin/bash\n3. java -jar mebyo-1.0.0.jar\n```","source":"_posts/docker部署.md","raw":"---\ntitle: docker部署web环境\ndate: 2017-03-28 20:04:17\ntags: [docker,postgresql,redis,web]\n---\n### postgresql\n```\n1. docker pull sameersbn/postgresql\n2. docker run --name=postgresql -itd --restart always \\\n--publish 5432:5432 \\\n--volume /opt/postgresql/data:/var/lib/postgresql \\\n--env 'DB_USER=mymebyo_adm01' --env 'DB_PASS=mymebyo_adm01' --env 'DB_NAME=mymebyo' \\\nsameersbn/postgresql    \n```\n### redis\n```\n1. docker pull redis\n2. docker run --name=redis -p 6379:6379 -v /opt/redis/data:/data -d redis redis-server --appendonly yes\n```\n**redis-server --appendonly yes** :在容器执行redis-server启动命令，并打开redis持久化配置\n### java web\n```\n1. docker pull java\n2. docker run -it --volume /var/www:/var/www --publish 8082:8080 --link postgresql:mebyo --link redis:redis java /bin/bash\n3. java -jar mebyo-1.0.0.jar\n```","slug":"docker部署","published":1,"updated":"2017-03-28T12:06:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81idk000h8rlxahu4s1ao","content":"<h3 id=\"postgresql\"><a href=\"#postgresql\" class=\"headerlink\" title=\"postgresql\"></a>postgresql</h3><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. docker pull sameersbn/postgresql</span><br><span class=\"line\"><span class=\"number\">2</span>. docker run --name=postgresql -itd --restart always \\</span><br><span class=\"line\">--publish <span class=\"number\">5432</span>:<span class=\"number\">5432</span> \\</span><br><span class=\"line\">--volume /opt/postgresql/<span class=\"symbol\">data:</span>/var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">postgresql</span> \\</span></span><br><span class=\"line\">--env <span class=\"string\">'DB_USER=mymebyo_adm01'</span> --env <span class=\"string\">'DB_PASS=mymebyo_adm01'</span> --env <span class=\"string\">'DB_NAME=mymebyo'</span> \\</span><br><span class=\"line\">sameersbn/postgresql</span><br></pre></td></tr></table></figure>\n<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. docker pull redis</span><br><span class=\"line\">2. docker <span class=\"builtin-name\">run</span> <span class=\"attribute\">--name</span>=redis -p 6379:6379 -v /opt/redis/data:/data -d redis redis-server --appendonly <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n<p><strong>redis-server –appendonly yes</strong> :在容器执行redis-server启动命令，并打开redis持久化配置</p>\n<h3 id=\"java-web\"><a href=\"#java-web\" class=\"headerlink\" title=\"java web\"></a>java web</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. docker pull java</span><br><span class=\"line\">2. docker run -it <span class=\"params\">--volume</span> <span class=\"string\">/var/www</span>:<span class=\"string\">/var/www</span> <span class=\"params\">--publish</span> 8082<span class=\"function\">:8080</span> <span class=\"params\">--link</span> postgresql<span class=\"function\">:mebyo</span> <span class=\"params\">--link</span> redis<span class=\"function\">:redis</span> java <span class=\"string\">/bin/bash</span></span><br><span class=\"line\">3. java -jar mebyo-1.0.0.jar</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"postgresql\"><a href=\"#postgresql\" class=\"headerlink\" title=\"postgresql\"></a>postgresql</h3><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. docker pull sameersbn/postgresql</span><br><span class=\"line\"><span class=\"number\">2</span>. docker run --name=postgresql -itd --restart always \\</span><br><span class=\"line\">--publish <span class=\"number\">5432</span>:<span class=\"number\">5432</span> \\</span><br><span class=\"line\">--volume /opt/postgresql/<span class=\"symbol\">data:</span>/var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">postgresql</span> \\</span></span><br><span class=\"line\">--env <span class=\"string\">'DB_USER=mymebyo_adm01'</span> --env <span class=\"string\">'DB_PASS=mymebyo_adm01'</span> --env <span class=\"string\">'DB_NAME=mymebyo'</span> \\</span><br><span class=\"line\">sameersbn/postgresql</span><br></pre></td></tr></table></figure>\n<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. docker pull redis</span><br><span class=\"line\">2. docker <span class=\"builtin-name\">run</span> <span class=\"attribute\">--name</span>=redis -p 6379:6379 -v /opt/redis/data:/data -d redis redis-server --appendonly <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n<p><strong>redis-server –appendonly yes</strong> :在容器执行redis-server启动命令，并打开redis持久化配置</p>\n<h3 id=\"java-web\"><a href=\"#java-web\" class=\"headerlink\" title=\"java web\"></a>java web</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. docker pull java</span><br><span class=\"line\">2. docker run -it <span class=\"params\">--volume</span> <span class=\"string\">/var/www</span>:<span class=\"string\">/var/www</span> <span class=\"params\">--publish</span> 8082<span class=\"function\">:8080</span> <span class=\"params\">--link</span> postgresql<span class=\"function\">:mebyo</span> <span class=\"params\">--link</span> redis<span class=\"function\">:redis</span> java <span class=\"string\">/bin/bash</span></span><br><span class=\"line\">3. java -jar mebyo-1.0.0.jar</span><br></pre></td></tr></table></figure>"},{"title":"docker设置http代理","date":"2017-07-24T08:51:51.000Z","_content":"#### 创建目录\n```\nmkdir /etc/systemd/system/docker.service.d\n```\n\n#### 创建http-proxy.conf文件\n```\ntouch /etc/systemd/system/docker.service.d/http-proxy.conf\n```\n\n#### 在http-proxy.conf文件中记入\n\n```\n[Service]\nEnvironment=\"HTTP_PROXY=http://username:passwd@hostname:port/\" \"NO_PROXY=localhost,127.0.0.1\"\n```\n\n#### reload配置及重启docker服务\n```\nsystemctl daemon-reload\nsystemctl show docker --property Environment\nsystemctl restart docker.service\n```\n","source":"_posts/docker设置http代理.md","raw":"---\ntitle: docker设置http代理\ndate: 2017-07-24 16:51:51\ntags: [docker, proxy]\n---\n#### 创建目录\n```\nmkdir /etc/systemd/system/docker.service.d\n```\n\n#### 创建http-proxy.conf文件\n```\ntouch /etc/systemd/system/docker.service.d/http-proxy.conf\n```\n\n#### 在http-proxy.conf文件中记入\n\n```\n[Service]\nEnvironment=\"HTTP_PROXY=http://username:passwd@hostname:port/\" \"NO_PROXY=localhost,127.0.0.1\"\n```\n\n#### reload配置及重启docker服务\n```\nsystemctl daemon-reload\nsystemctl show docker --property Environment\nsystemctl restart docker.service\n```\n","slug":"docker设置http代理","published":1,"updated":"2017-07-25T02:50:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81idn000j8rlxgvzsfdhk","content":"<h4 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /etc/systemd/system/docker<span class=\"selector-class\">.service</span><span class=\"selector-class\">.d</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建http-proxy-conf文件\"><a href=\"#创建http-proxy-conf文件\" class=\"headerlink\" title=\"创建http-proxy.conf文件\"></a>创建http-proxy.conf文件</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/systemd/system/docker<span class=\"selector-class\">.service</span><span class=\"selector-class\">.d</span>/http-proxy.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"在http-proxy-conf文件中记入\"><a href=\"#在http-proxy-conf文件中记入\" class=\"headerlink\" title=\"在http-proxy.conf文件中记入\"></a>在http-proxy.conf文件中记入</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">Environment</span>=<span class=\"string\">\"HTTP_PROXY=http://username:passwd@hostname:port/\"</span> <span class=\"string\">\"NO_PROXY=localhost,127.0.0.1\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"reload配置及重启docker服务\"><a href=\"#reload配置及重启docker服务\" class=\"headerlink\" title=\"reload配置及重启docker服务\"></a>reload配置及重启docker服务</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl show docker --<span class=\"keyword\">property</span><span class=\"title\"> </span>Environment</span><br><span class=\"line\">systemctl restart docker.service</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /etc/systemd/system/docker<span class=\"selector-class\">.service</span><span class=\"selector-class\">.d</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建http-proxy-conf文件\"><a href=\"#创建http-proxy-conf文件\" class=\"headerlink\" title=\"创建http-proxy.conf文件\"></a>创建http-proxy.conf文件</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/systemd/system/docker<span class=\"selector-class\">.service</span><span class=\"selector-class\">.d</span>/http-proxy.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"在http-proxy-conf文件中记入\"><a href=\"#在http-proxy-conf文件中记入\" class=\"headerlink\" title=\"在http-proxy.conf文件中记入\"></a>在http-proxy.conf文件中记入</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">Environment</span>=<span class=\"string\">\"HTTP_PROXY=http://username:passwd@hostname:port/\"</span> <span class=\"string\">\"NO_PROXY=localhost,127.0.0.1\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"reload配置及重启docker服务\"><a href=\"#reload配置及重启docker服务\" class=\"headerlink\" title=\"reload配置及重启docker服务\"></a>reload配置及重启docker服务</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl show docker --<span class=\"keyword\">property</span><span class=\"title\"> </span>Environment</span><br><span class=\"line\">systemctl restart docker.service</span><br></pre></td></tr></table></figure>\n"},{"title":"git删除tag","date":"2016-11-23T07:07:14.000Z","_content":"同事在git上误打了tag，并且只删除了本地的tag，没有删除origin上的tag。管理员账户登录了git仓库的web页面，找到了这个tag但还是没有办法删掉。  \nok！只有命令行开搞！  \n#### 配置ssh config\n![webapi](http://obksgg9lx.bkt.clouddn.com/ssh-config.png)\n#### 删除tag\n![webapi](http://obksgg9lx.bkt.clouddn.com/delete-tag.png)\n#### 主要命令\n    ssh-agent\n    eval `ssh-agent`\n    ssh-add $git_rsa\n    git tag -d $tag_name\n    git push origin :refs/tags/tag_name\n","source":"_posts/git删除tag.md","raw":"---\ntitle: git删除tag\ndate: 2016-11-23 15:07:14\ntags: git\n---\n同事在git上误打了tag，并且只删除了本地的tag，没有删除origin上的tag。管理员账户登录了git仓库的web页面，找到了这个tag但还是没有办法删掉。  \nok！只有命令行开搞！  \n#### 配置ssh config\n![webapi](http://obksgg9lx.bkt.clouddn.com/ssh-config.png)\n#### 删除tag\n![webapi](http://obksgg9lx.bkt.clouddn.com/delete-tag.png)\n#### 主要命令\n    ssh-agent\n    eval `ssh-agent`\n    ssh-add $git_rsa\n    git tag -d $tag_name\n    git push origin :refs/tags/tag_name\n","slug":"git删除tag","published":1,"updated":"2016-11-23T07:22:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81idq000l8rlxtmlq94u4","content":"<p>同事在git上误打了tag，并且只删除了本地的tag，没有删除origin上的tag。管理员账户登录了git仓库的web页面，找到了这个tag但还是没有办法删掉。<br>ok！只有命令行开搞！  </p>\n<h4 id=\"配置ssh-config\"><a href=\"#配置ssh-config\" class=\"headerlink\" title=\"配置ssh config\"></a>配置ssh config</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/ssh-config.png\" alt=\"webapi\"></p>\n<h4 id=\"删除tag\"><a href=\"#删除tag\" class=\"headerlink\" title=\"删除tag\"></a>删除tag</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/delete-tag.png\" alt=\"webapi\"></p>\n<h4 id=\"主要命令\"><a href=\"#主要命令\" class=\"headerlink\" title=\"主要命令\"></a>主要命令</h4><pre><code>ssh-agent\neval `ssh-agent`\nssh-add $git_rsa\ngit tag -d $tag_name\ngit push origin :refs/tags/tag_name\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>同事在git上误打了tag，并且只删除了本地的tag，没有删除origin上的tag。管理员账户登录了git仓库的web页面，找到了这个tag但还是没有办法删掉。<br>ok！只有命令行开搞！  </p>\n<h4 id=\"配置ssh-config\"><a href=\"#配置ssh-config\" class=\"headerlink\" title=\"配置ssh config\"></a>配置ssh config</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/ssh-config.png\" alt=\"webapi\"></p>\n<h4 id=\"删除tag\"><a href=\"#删除tag\" class=\"headerlink\" title=\"删除tag\"></a>删除tag</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/delete-tag.png\" alt=\"webapi\"></p>\n<h4 id=\"主要命令\"><a href=\"#主要命令\" class=\"headerlink\" title=\"主要命令\"></a>主要命令</h4><pre><code>ssh-agent\neval `ssh-agent`\nssh-add $git_rsa\ngit tag -d $tag_name\ngit push origin :refs/tags/tag_name\n</code></pre>"},{"title":"jenkins自动部署docker应用","date":"2017-11-17T10:29:54.000Z","_content":"## 项目背景\n目前需要部署一个基于python flask的web服务，数据库使用的是postgresql。\n \n## 思路&流程\n* 准备docker镜像\n* jenkins拉取远端源码--git\n* 实现应用打包--jenkins本地\n* 把应用打包进docker镜像--dockerfile\n* 镜像同步到docker私有仓库--shell docker命令\n* 删除老的docker容器--shell docker命令\n* 运行新的docker容器--shell docker命令\n\n### 准备docker镜像\n#### 创建自定义flask镜像\n基于**tiangolo/uwsgi-nginx-flask**创建flask的镜像。    \n自定义flask镜像的dockerfile:\n\n```shell\nFROM tiangolo/uwsgi-nginx-flask:python2.7\n\nCOPY ./app /app\nCOPY ./lib/libseuif97.so /usr/lib\nRUN pip install -r requirements.txt\n```\n\n因为网络环境不好，安装requirements.txt中python的第三方库时，发生报错，因此我将基本的库事先安装好。    \n并且把需要的so静态文件也COPY进镜像中。    \n后面如果有变化，可以根据需要在jenkins中再动态生成dockerfile并执行。\n\n```shell\ndocker build -t test-flask .\n```\n\n#### 创建自定义的postgresql\n自定义postgresql镜像的dockerfile:\n\n```shell\nFROM postgres:9.3\n\nADD ./sql /docker-entrypoint-initdb.d/\n```\n我们有一些master表，以及基础数据，我们需要在运行这个容器之前，将这些基础数据insert进db这个docker之中。    \n可以把各种sql文件放入/sql路径下。\n\n#### commit到私有docker仓库\n\n```shell\ndocker commit -m \"flask插件安装\" -a \"liubing\" $containId liubing/test-flask\ndocker tag liubing/$imageName $dockerRegistsryAddress/test-flask\ndocker push $dockerRegistsryAddress/test-flask\n```\n\ndb的docker也可提前commit到私有仓库。\n### jenkins拉源码\n\n在jenkins中配置“源码管理”，输入source仓库的git地址，并绑定git用户及需要检测状态变化的branch。在构建时会自动下载git源码的。\n\n![配置git地址](http://obksgg9lx.bkt.clouddn.com/git.png)\n\n### 实现应用打包\n\n目前开发的是一个python项目，python不需要打包。源码即可执行。\n\n### 把应用打包进docker镜像\n\n```shell\necho 'From $dockerRegistsryAddress/test-flask\nMAINTAINER liubing \"lbingg@hotmail.com\"\n\nCOPY . /app\n\n' > Dockerfile;\n```\njenkins中执行的脚本会默认当前脚本处于jenkins环境中的workspace中的当前应用工程下。因此在copy程序时，我们需要将当前目录下的所有文件全部拷贝入新创建docker镜像的/app目录中。\n\n### 镜像同步到docker私有仓库\n\n```shell\ndocker build -t $dockerRegistsryAddress/test-flask;\n```\n### 删除老的docker容器\n\n```shell\ndocker stop postgresql || true;\ndocker rm postgresql || true;\ndocker stop test-flask || true;\ndocker rm test-flask || true;\n```\n\n### 运行新的docker容器\n\n```shell\ndocker run --name=postgresql -itd --restart always --publish 5432:5432 --volume /opt/postgresql/data:/var/lib/postgresql --env 'DB_USER=postgres' --env 'DB_PASS=postgres' --env 'DB_NAME=postgres' $dockerRegistryAddress:5000/test-db-1;\n\ndocker run --name test-flask --publish 80:80 --link postgresql:postgres -d $dockerRegistryAddress:5000/test-flask;\n```\n\njenkins中的“构建”配置\n\n![配置构建](http://obksgg9lx.bkt.clouddn.com/structure.png)\n\n### 问题点\n\n需要在jenkins的docker中运行其他的docker命令，可以使用Docker outside of Docker来配置。    \n![Docker-outside-of-Docker](http://liubing1545.github.io/2017/11/16/Docker-outside-of-Docker)","source":"_posts/jenkins自动部署docker应用.md","raw":"---\ntitle: jenkins自动部署docker应用\ndate: 2017-11-17 18:29:54\ntags: [jenkins, 持续部署, docker]\n---\n## 项目背景\n目前需要部署一个基于python flask的web服务，数据库使用的是postgresql。\n \n## 思路&流程\n* 准备docker镜像\n* jenkins拉取远端源码--git\n* 实现应用打包--jenkins本地\n* 把应用打包进docker镜像--dockerfile\n* 镜像同步到docker私有仓库--shell docker命令\n* 删除老的docker容器--shell docker命令\n* 运行新的docker容器--shell docker命令\n\n### 准备docker镜像\n#### 创建自定义flask镜像\n基于**tiangolo/uwsgi-nginx-flask**创建flask的镜像。    \n自定义flask镜像的dockerfile:\n\n```shell\nFROM tiangolo/uwsgi-nginx-flask:python2.7\n\nCOPY ./app /app\nCOPY ./lib/libseuif97.so /usr/lib\nRUN pip install -r requirements.txt\n```\n\n因为网络环境不好，安装requirements.txt中python的第三方库时，发生报错，因此我将基本的库事先安装好。    \n并且把需要的so静态文件也COPY进镜像中。    \n后面如果有变化，可以根据需要在jenkins中再动态生成dockerfile并执行。\n\n```shell\ndocker build -t test-flask .\n```\n\n#### 创建自定义的postgresql\n自定义postgresql镜像的dockerfile:\n\n```shell\nFROM postgres:9.3\n\nADD ./sql /docker-entrypoint-initdb.d/\n```\n我们有一些master表，以及基础数据，我们需要在运行这个容器之前，将这些基础数据insert进db这个docker之中。    \n可以把各种sql文件放入/sql路径下。\n\n#### commit到私有docker仓库\n\n```shell\ndocker commit -m \"flask插件安装\" -a \"liubing\" $containId liubing/test-flask\ndocker tag liubing/$imageName $dockerRegistsryAddress/test-flask\ndocker push $dockerRegistsryAddress/test-flask\n```\n\ndb的docker也可提前commit到私有仓库。\n### jenkins拉源码\n\n在jenkins中配置“源码管理”，输入source仓库的git地址，并绑定git用户及需要检测状态变化的branch。在构建时会自动下载git源码的。\n\n![配置git地址](http://obksgg9lx.bkt.clouddn.com/git.png)\n\n### 实现应用打包\n\n目前开发的是一个python项目，python不需要打包。源码即可执行。\n\n### 把应用打包进docker镜像\n\n```shell\necho 'From $dockerRegistsryAddress/test-flask\nMAINTAINER liubing \"lbingg@hotmail.com\"\n\nCOPY . /app\n\n' > Dockerfile;\n```\njenkins中执行的脚本会默认当前脚本处于jenkins环境中的workspace中的当前应用工程下。因此在copy程序时，我们需要将当前目录下的所有文件全部拷贝入新创建docker镜像的/app目录中。\n\n### 镜像同步到docker私有仓库\n\n```shell\ndocker build -t $dockerRegistsryAddress/test-flask;\n```\n### 删除老的docker容器\n\n```shell\ndocker stop postgresql || true;\ndocker rm postgresql || true;\ndocker stop test-flask || true;\ndocker rm test-flask || true;\n```\n\n### 运行新的docker容器\n\n```shell\ndocker run --name=postgresql -itd --restart always --publish 5432:5432 --volume /opt/postgresql/data:/var/lib/postgresql --env 'DB_USER=postgres' --env 'DB_PASS=postgres' --env 'DB_NAME=postgres' $dockerRegistryAddress:5000/test-db-1;\n\ndocker run --name test-flask --publish 80:80 --link postgresql:postgres -d $dockerRegistryAddress:5000/test-flask;\n```\n\njenkins中的“构建”配置\n\n![配置构建](http://obksgg9lx.bkt.clouddn.com/structure.png)\n\n### 问题点\n\n需要在jenkins的docker中运行其他的docker命令，可以使用Docker outside of Docker来配置。    \n![Docker-outside-of-Docker](http://liubing1545.github.io/2017/11/16/Docker-outside-of-Docker)","slug":"jenkins自动部署docker应用","published":1,"updated":"2017-11-20T04:06:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ids000n8rlxymcc9stf","content":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>目前需要部署一个基于python flask的web服务，数据库使用的是postgresql。</p>\n<h2 id=\"思路-amp-流程\"><a href=\"#思路-amp-流程\" class=\"headerlink\" title=\"思路&amp;流程\"></a>思路&amp;流程</h2><ul>\n<li>准备docker镜像</li>\n<li>jenkins拉取远端源码–git</li>\n<li>实现应用打包–jenkins本地</li>\n<li>把应用打包进docker镜像–dockerfile</li>\n<li>镜像同步到docker私有仓库–shell docker命令</li>\n<li>删除老的docker容器–shell docker命令</li>\n<li>运行新的docker容器–shell docker命令</li>\n</ul>\n<h3 id=\"准备docker镜像\"><a href=\"#准备docker镜像\" class=\"headerlink\" title=\"准备docker镜像\"></a>准备docker镜像</h3><h4 id=\"创建自定义flask镜像\"><a href=\"#创建自定义flask镜像\" class=\"headerlink\" title=\"创建自定义flask镜像\"></a>创建自定义flask镜像</h4><p>基于<strong>tiangolo/uwsgi-nginx-flask</strong>创建flask的镜像。<br>自定义flask镜像的dockerfile:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM tiangolo/uwsgi-nginx-flask:python2.7</span><br><span class=\"line\"></span><br><span class=\"line\">COPY ./app /app</span><br><span class=\"line\">COPY ./lib/libseuif97.so /usr/lib</span><br><span class=\"line\">RUN pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>因为网络环境不好，安装requirements.txt中python的第三方库时，发生报错，因此我将基本的库事先安装好。<br>并且把需要的so静态文件也COPY进镜像中。<br>后面如果有变化，可以根据需要在jenkins中再动态生成dockerfile并执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t test-flask .</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建自定义的postgresql\"><a href=\"#创建自定义的postgresql\" class=\"headerlink\" title=\"创建自定义的postgresql\"></a>创建自定义的postgresql</h4><p>自定义postgresql镜像的dockerfile:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM postgres:9.3</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./sql /docker-entrypoint-initdb.d/</span><br></pre></td></tr></table></figure>\n<p>我们有一些master表，以及基础数据，我们需要在运行这个容器之前，将这些基础数据insert进db这个docker之中。<br>可以把各种sql文件放入/sql路径下。</p>\n<h4 id=\"commit到私有docker仓库\"><a href=\"#commit到私有docker仓库\" class=\"headerlink\" title=\"commit到私有docker仓库\"></a>commit到私有docker仓库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m \"flask插件安装\" -a \"liubing\" $containId liubing/test-flask</span><br><span class=\"line\">docker tag liubing/$imageName $dockerRegistsryAddress/test-flask</span><br><span class=\"line\">docker push $dockerRegistsryAddress/test-flask</span><br></pre></td></tr></table></figure>\n<p>db的docker也可提前commit到私有仓库。</p>\n<h3 id=\"jenkins拉源码\"><a href=\"#jenkins拉源码\" class=\"headerlink\" title=\"jenkins拉源码\"></a>jenkins拉源码</h3><p>在jenkins中配置“源码管理”，输入source仓库的git地址，并绑定git用户及需要检测状态变化的branch。在构建时会自动下载git源码的。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/git.png\" alt=\"配置git地址\"></p>\n<h3 id=\"实现应用打包\"><a href=\"#实现应用打包\" class=\"headerlink\" title=\"实现应用打包\"></a>实现应用打包</h3><p>目前开发的是一个python项目，python不需要打包。源码即可执行。</p>\n<h3 id=\"把应用打包进docker镜像\"><a href=\"#把应用打包进docker镜像\" class=\"headerlink\" title=\"把应用打包进docker镜像\"></a>把应用打包进docker镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 'From $dockerRegistsryAddress/test-flask</span><br><span class=\"line\">MAINTAINER liubing \"lbingg@hotmail.com\"</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\"></span><br><span class=\"line\">' &gt; Dockerfile;</span><br></pre></td></tr></table></figure>\n<p>jenkins中执行的脚本会默认当前脚本处于jenkins环境中的workspace中的当前应用工程下。因此在copy程序时，我们需要将当前目录下的所有文件全部拷贝入新创建docker镜像的/app目录中。</p>\n<h3 id=\"镜像同步到docker私有仓库\"><a href=\"#镜像同步到docker私有仓库\" class=\"headerlink\" title=\"镜像同步到docker私有仓库\"></a>镜像同步到docker私有仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t $dockerRegistsryAddress/test-flask;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除老的docker容器\"><a href=\"#删除老的docker容器\" class=\"headerlink\" title=\"删除老的docker容器\"></a>删除老的docker容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop postgresql || true;</span><br><span class=\"line\">docker rm postgresql || true;</span><br><span class=\"line\">docker stop test-flask || true;</span><br><span class=\"line\">docker rm test-flask || true;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行新的docker容器\"><a href=\"#运行新的docker容器\" class=\"headerlink\" title=\"运行新的docker容器\"></a>运行新的docker容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name=postgresql -itd --restart always --publish 5432:5432 --volume /opt/postgresql/data:/var/lib/postgresql --env 'DB_USER=postgres' --env 'DB_PASS=postgres' --env 'DB_NAME=postgres' $dockerRegistryAddress:5000/test-db-1;</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name test-flask --publish 80:80 --link postgresql:postgres -d $dockerRegistryAddress:5000/test-flask;</span><br></pre></td></tr></table></figure>\n<p>jenkins中的“构建”配置</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/structure.png\" alt=\"配置构建\"></p>\n<h3 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h3><p>需要在jenkins的docker中运行其他的docker命令，可以使用Docker outside of Docker来配置。<br><img src=\"http://liubing1545.github.io/2017/11/16/Docker-outside-of-Docker\" alt=\"Docker-outside-of-Docker\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>目前需要部署一个基于python flask的web服务，数据库使用的是postgresql。</p>\n<h2 id=\"思路-amp-流程\"><a href=\"#思路-amp-流程\" class=\"headerlink\" title=\"思路&amp;流程\"></a>思路&amp;流程</h2><ul>\n<li>准备docker镜像</li>\n<li>jenkins拉取远端源码–git</li>\n<li>实现应用打包–jenkins本地</li>\n<li>把应用打包进docker镜像–dockerfile</li>\n<li>镜像同步到docker私有仓库–shell docker命令</li>\n<li>删除老的docker容器–shell docker命令</li>\n<li>运行新的docker容器–shell docker命令</li>\n</ul>\n<h3 id=\"准备docker镜像\"><a href=\"#准备docker镜像\" class=\"headerlink\" title=\"准备docker镜像\"></a>准备docker镜像</h3><h4 id=\"创建自定义flask镜像\"><a href=\"#创建自定义flask镜像\" class=\"headerlink\" title=\"创建自定义flask镜像\"></a>创建自定义flask镜像</h4><p>基于<strong>tiangolo/uwsgi-nginx-flask</strong>创建flask的镜像。<br>自定义flask镜像的dockerfile:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM tiangolo/uwsgi-nginx-flask:python2.7</span><br><span class=\"line\"></span><br><span class=\"line\">COPY ./app /app</span><br><span class=\"line\">COPY ./lib/libseuif97.so /usr/lib</span><br><span class=\"line\">RUN pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>因为网络环境不好，安装requirements.txt中python的第三方库时，发生报错，因此我将基本的库事先安装好。<br>并且把需要的so静态文件也COPY进镜像中。<br>后面如果有变化，可以根据需要在jenkins中再动态生成dockerfile并执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t test-flask .</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建自定义的postgresql\"><a href=\"#创建自定义的postgresql\" class=\"headerlink\" title=\"创建自定义的postgresql\"></a>创建自定义的postgresql</h4><p>自定义postgresql镜像的dockerfile:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM postgres:9.3</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./sql /docker-entrypoint-initdb.d/</span><br></pre></td></tr></table></figure>\n<p>我们有一些master表，以及基础数据，我们需要在运行这个容器之前，将这些基础数据insert进db这个docker之中。<br>可以把各种sql文件放入/sql路径下。</p>\n<h4 id=\"commit到私有docker仓库\"><a href=\"#commit到私有docker仓库\" class=\"headerlink\" title=\"commit到私有docker仓库\"></a>commit到私有docker仓库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m \"flask插件安装\" -a \"liubing\" $containId liubing/test-flask</span><br><span class=\"line\">docker tag liubing/$imageName $dockerRegistsryAddress/test-flask</span><br><span class=\"line\">docker push $dockerRegistsryAddress/test-flask</span><br></pre></td></tr></table></figure>\n<p>db的docker也可提前commit到私有仓库。</p>\n<h3 id=\"jenkins拉源码\"><a href=\"#jenkins拉源码\" class=\"headerlink\" title=\"jenkins拉源码\"></a>jenkins拉源码</h3><p>在jenkins中配置“源码管理”，输入source仓库的git地址，并绑定git用户及需要检测状态变化的branch。在构建时会自动下载git源码的。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/git.png\" alt=\"配置git地址\"></p>\n<h3 id=\"实现应用打包\"><a href=\"#实现应用打包\" class=\"headerlink\" title=\"实现应用打包\"></a>实现应用打包</h3><p>目前开发的是一个python项目，python不需要打包。源码即可执行。</p>\n<h3 id=\"把应用打包进docker镜像\"><a href=\"#把应用打包进docker镜像\" class=\"headerlink\" title=\"把应用打包进docker镜像\"></a>把应用打包进docker镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 'From $dockerRegistsryAddress/test-flask</span><br><span class=\"line\">MAINTAINER liubing \"lbingg@hotmail.com\"</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\"></span><br><span class=\"line\">' &gt; Dockerfile;</span><br></pre></td></tr></table></figure>\n<p>jenkins中执行的脚本会默认当前脚本处于jenkins环境中的workspace中的当前应用工程下。因此在copy程序时，我们需要将当前目录下的所有文件全部拷贝入新创建docker镜像的/app目录中。</p>\n<h3 id=\"镜像同步到docker私有仓库\"><a href=\"#镜像同步到docker私有仓库\" class=\"headerlink\" title=\"镜像同步到docker私有仓库\"></a>镜像同步到docker私有仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t $dockerRegistsryAddress/test-flask;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除老的docker容器\"><a href=\"#删除老的docker容器\" class=\"headerlink\" title=\"删除老的docker容器\"></a>删除老的docker容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop postgresql || true;</span><br><span class=\"line\">docker rm postgresql || true;</span><br><span class=\"line\">docker stop test-flask || true;</span><br><span class=\"line\">docker rm test-flask || true;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行新的docker容器\"><a href=\"#运行新的docker容器\" class=\"headerlink\" title=\"运行新的docker容器\"></a>运行新的docker容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name=postgresql -itd --restart always --publish 5432:5432 --volume /opt/postgresql/data:/var/lib/postgresql --env 'DB_USER=postgres' --env 'DB_PASS=postgres' --env 'DB_NAME=postgres' $dockerRegistryAddress:5000/test-db-1;</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name test-flask --publish 80:80 --link postgresql:postgres -d $dockerRegistryAddress:5000/test-flask;</span><br></pre></td></tr></table></figure>\n<p>jenkins中的“构建”配置</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/structure.png\" alt=\"配置构建\"></p>\n<h3 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h3><p>需要在jenkins的docker中运行其他的docker命令，可以使用Docker outside of Docker来配置。<br><img src=\"http://liubing1545.github.io/2017/11/16/Docker-outside-of-Docker\" alt=\"Docker-outside-of-Docker\"></p>\n"},{"title":"js七牛上传实践","date":"2016-06-24T09:22:14.000Z","_content":"* 七牛有免费的配额可以使用，在测试开发时，将图片，视频流等多种媒体文件可以上传到七牛上。  \n* 其次，七牛可以绕过搭载应用的server，手机端或者pc端可以直接上传下载媒体资源至七牛云。只是在上传时，需要先向应用server要求访问七牛的token，拿到这个token后直接与七牛交互。  \n* 最后，七牛云支持cdn加速，即使对成熟的应用来说，也是不错的选择。 \n\n![七牛](http://developer.qiniu.com/article/developer/img/upload-with-callback.png)\n\n下面讲解flask作为业务服务器，进行七牛云存储的过程。  \n\n\n","source":"_posts/js七牛上传实践.md","raw":"---\ntitle: js七牛上传实践\ndate: 2016-06-24 17:22:14\ntags: [js,七牛,flask]\n---\n* 七牛有免费的配额可以使用，在测试开发时，将图片，视频流等多种媒体文件可以上传到七牛上。  \n* 其次，七牛可以绕过搭载应用的server，手机端或者pc端可以直接上传下载媒体资源至七牛云。只是在上传时，需要先向应用server要求访问七牛的token，拿到这个token后直接与七牛交互。  \n* 最后，七牛云支持cdn加速，即使对成熟的应用来说，也是不错的选择。 \n\n![七牛](http://developer.qiniu.com/article/developer/img/upload-with-callback.png)\n\n下面讲解flask作为业务服务器，进行七牛云存储的过程。  \n\n\n","slug":"js七牛上传实践","published":1,"updated":"2016-07-11T00:39:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81idu000q8rlx9flr3x8g","content":"<ul>\n<li>七牛有免费的配额可以使用，在测试开发时，将图片，视频流等多种媒体文件可以上传到七牛上。  </li>\n<li>其次，七牛可以绕过搭载应用的server，手机端或者pc端可以直接上传下载媒体资源至七牛云。只是在上传时，需要先向应用server要求访问七牛的token，拿到这个token后直接与七牛交互。  </li>\n<li>最后，七牛云支持cdn加速，即使对成熟的应用来说，也是不错的选择。 </li>\n</ul>\n<p><img src=\"http://developer.qiniu.com/article/developer/img/upload-with-callback.png\" alt=\"七牛\"></p>\n<p>下面讲解flask作为业务服务器，进行七牛云存储的过程。  </p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>七牛有免费的配额可以使用，在测试开发时，将图片，视频流等多种媒体文件可以上传到七牛上。  </li>\n<li>其次，七牛可以绕过搭载应用的server，手机端或者pc端可以直接上传下载媒体资源至七牛云。只是在上传时，需要先向应用server要求访问七牛的token，拿到这个token后直接与七牛交互。  </li>\n<li>最后，七牛云支持cdn加速，即使对成熟的应用来说，也是不错的选择。 </li>\n</ul>\n<p><img src=\"http://developer.qiniu.com/article/developer/img/upload-with-callback.png\" alt=\"七牛\"></p>\n<p>下面讲解flask作为业务服务器，进行七牛云存储的过程。  </p>\n"},{"title":"git撤销merge操作","date":"2016-09-18T04:02:00.000Z","_content":"使用git偶尔会遇到merge错代码的情形，这时需要撤销merge的操作。    \n\n    $ git show bb46d15\n\ncommit id 是 bb46d15。  \n可以看到merge commit的parents次序。该次序从1开始，想保留哪个parent就指定它的序号。\n\n    $ git revert -m 2 bb46d15\n\n2是想要保留的parent branch序号，其他的parent branch会撤销掉。  \nbb46d15是指定对具体的commit id进行操作。","source":"_posts/git撤销merge操作.md","raw":"---\ntitle: git撤销merge操作\ndate: 2016-09-18 12:02:00\ntags: git\n---\n使用git偶尔会遇到merge错代码的情形，这时需要撤销merge的操作。    \n\n    $ git show bb46d15\n\ncommit id 是 bb46d15。  \n可以看到merge commit的parents次序。该次序从1开始，想保留哪个parent就指定它的序号。\n\n    $ git revert -m 2 bb46d15\n\n2是想要保留的parent branch序号，其他的parent branch会撤销掉。  \nbb46d15是指定对具体的commit id进行操作。","slug":"git撤销merge操作","published":1,"updated":"2016-09-18T05:41:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81idw000s8rlxnxkhxcv0","content":"<p>使用git偶尔会遇到merge错代码的情形，这时需要撤销merge的操作。    </p>\n<pre><code>$ git show bb46d15\n</code></pre><p>commit id 是 bb46d15。<br>可以看到merge commit的parents次序。该次序从1开始，想保留哪个parent就指定它的序号。</p>\n<pre><code>$ git revert -m 2 bb46d15\n</code></pre><p>2是想要保留的parent branch序号，其他的parent branch会撤销掉。<br>bb46d15是指定对具体的commit id进行操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用git偶尔会遇到merge错代码的情形，这时需要撤销merge的操作。    </p>\n<pre><code>$ git show bb46d15\n</code></pre><p>commit id 是 bb46d15。<br>可以看到merge commit的parents次序。该次序从1开始，想保留哪个parent就指定它的序号。</p>\n<pre><code>$ git revert -m 2 bb46d15\n</code></pre><p>2是想要保留的parent branch序号，其他的parent branch会撤销掉。<br>bb46d15是指定对具体的commit id进行操作。</p>\n"},{"title":"linux虚拟机磁盘扩容","date":"2017-03-28T10:04:05.000Z","_content":"### 问题点\n安装了centos7的虚拟机，yum update时报错空间不足 **No space left on device**。\n### VBoxManage modifyhd\n在宿主机上的安装virtualBox的根目录执行resize命令进行扩容:    \n\n    C:\\Program Files\\Oracle\\VirtualBox>VBoxManage modifyhd E:\\dockerVM\\dockerVM.vdi --resize 35000\n\n### CentOS的LVM管理\n查看磁盘状况\n\n    $ fdisk -l /dev/sda\n将空余磁盘创建为SDA3\n\n    $ fdisk /dev/sda\n    n {new partition}\n    p {primary partition}\n    3 {partition number}\n    \n    t {change partition id}\n    3 {partition number}\n    8e {linux LVM partition}\n    w\n    \n重启虚拟机\n\n    $reboot\n查看当前Volume group\n\n    $ vgdisplay\n创建/dev/sda3，根据VG Name:[centos]，扩展LVM的逻辑卷\n\n    $ lvscan\n    $ pvcreate /dev/sda3\n    $ vgextend /dev/centos/root /dev/sda3\n  \n调整逻辑卷文件系统的大小\n\n    $ xfs_growfs /dev/centos/root\n    $df -h\nOK了！","source":"_posts/linux虚拟机磁盘扩容.md","raw":"---\ntitle: linux虚拟机磁盘扩容\ndate: 2017-03-28 18:04:05\ntags: [linux,磁盘扩容]\n---\n### 问题点\n安装了centos7的虚拟机，yum update时报错空间不足 **No space left on device**。\n### VBoxManage modifyhd\n在宿主机上的安装virtualBox的根目录执行resize命令进行扩容:    \n\n    C:\\Program Files\\Oracle\\VirtualBox>VBoxManage modifyhd E:\\dockerVM\\dockerVM.vdi --resize 35000\n\n### CentOS的LVM管理\n查看磁盘状况\n\n    $ fdisk -l /dev/sda\n将空余磁盘创建为SDA3\n\n    $ fdisk /dev/sda\n    n {new partition}\n    p {primary partition}\n    3 {partition number}\n    \n    t {change partition id}\n    3 {partition number}\n    8e {linux LVM partition}\n    w\n    \n重启虚拟机\n\n    $reboot\n查看当前Volume group\n\n    $ vgdisplay\n创建/dev/sda3，根据VG Name:[centos]，扩展LVM的逻辑卷\n\n    $ lvscan\n    $ pvcreate /dev/sda3\n    $ vgextend /dev/centos/root /dev/sda3\n  \n调整逻辑卷文件系统的大小\n\n    $ xfs_growfs /dev/centos/root\n    $df -h\nOK了！","slug":"linux虚拟机磁盘扩容","published":1,"updated":"2017-03-28T11:31:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ie0000v8rlx4xko7x4s","content":"<h3 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h3><p>安装了centos7的虚拟机，yum update时报错空间不足 <strong>No space left on device</strong>。</p>\n<h3 id=\"VBoxManage-modifyhd\"><a href=\"#VBoxManage-modifyhd\" class=\"headerlink\" title=\"VBoxManage modifyhd\"></a>VBoxManage modifyhd</h3><p>在宿主机上的安装virtualBox的根目录执行resize命令进行扩容:    </p>\n<pre><code>C:\\Program Files\\Oracle\\VirtualBox&gt;VBoxManage modifyhd E:\\dockerVM\\dockerVM.vdi --resize 35000\n</code></pre><h3 id=\"CentOS的LVM管理\"><a href=\"#CentOS的LVM管理\" class=\"headerlink\" title=\"CentOS的LVM管理\"></a>CentOS的LVM管理</h3><p>查看磁盘状况</p>\n<pre><code>$ fdisk -l /dev/sda\n</code></pre><p>将空余磁盘创建为SDA3</p>\n<pre><code>$ fdisk /dev/sda\nn {new partition}\np {primary partition}\n3 {partition number}\n\nt {change partition id}\n3 {partition number}\n8e {linux LVM partition}\nw\n</code></pre><p>重启虚拟机</p>\n<pre><code>$reboot\n</code></pre><p>查看当前Volume group</p>\n<pre><code>$ vgdisplay\n</code></pre><p>创建/dev/sda3，根据VG Name:[centos]，扩展LVM的逻辑卷</p>\n<pre><code>$ lvscan\n$ pvcreate /dev/sda3\n$ vgextend /dev/centos/root /dev/sda3\n</code></pre><p>调整逻辑卷文件系统的大小</p>\n<pre><code>$ xfs_growfs /dev/centos/root\n$df -h\n</code></pre><p>OK了！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h3><p>安装了centos7的虚拟机，yum update时报错空间不足 <strong>No space left on device</strong>。</p>\n<h3 id=\"VBoxManage-modifyhd\"><a href=\"#VBoxManage-modifyhd\" class=\"headerlink\" title=\"VBoxManage modifyhd\"></a>VBoxManage modifyhd</h3><p>在宿主机上的安装virtualBox的根目录执行resize命令进行扩容:    </p>\n<pre><code>C:\\Program Files\\Oracle\\VirtualBox&gt;VBoxManage modifyhd E:\\dockerVM\\dockerVM.vdi --resize 35000\n</code></pre><h3 id=\"CentOS的LVM管理\"><a href=\"#CentOS的LVM管理\" class=\"headerlink\" title=\"CentOS的LVM管理\"></a>CentOS的LVM管理</h3><p>查看磁盘状况</p>\n<pre><code>$ fdisk -l /dev/sda\n</code></pre><p>将空余磁盘创建为SDA3</p>\n<pre><code>$ fdisk /dev/sda\nn {new partition}\np {primary partition}\n3 {partition number}\n\nt {change partition id}\n3 {partition number}\n8e {linux LVM partition}\nw\n</code></pre><p>重启虚拟机</p>\n<pre><code>$reboot\n</code></pre><p>查看当前Volume group</p>\n<pre><code>$ vgdisplay\n</code></pre><p>创建/dev/sda3，根据VG Name:[centos]，扩展LVM的逻辑卷</p>\n<pre><code>$ lvscan\n$ pvcreate /dev/sda3\n$ vgextend /dev/centos/root /dev/sda3\n</code></pre><p>调整逻辑卷文件系统的大小</p>\n<pre><code>$ xfs_growfs /dev/centos/root\n$df -h\n</code></pre><p>OK了！</p>\n"},{"title":"java工程启动 No Route to host","date":"2017-03-28T12:17:35.000Z","_content":"1. 检查宿主机防火墙是否开启    \n```\nfirewall-cmd --state #查看默认防火墙状态（关闭后显示not running，开启后显示running）    \nsystemctl stop firewalld.service #停止firewall    \nsystemctl disable firewalld.service #禁止firewall开机启动    \n```\n2. 确认project工程连接的postgresql服务是映射到宿主机的ip及port，而不是postgresql docker自身的ip及port\n3. 确认postgresql服务docker的pg_hba.conf文件，是否设置接收任意的ip发来的请求    \npg_hba.conf:    \n```\nhost    all             all             0.0.0.0/0               md5    \n```\n4. 确认postgresql服务docker的postgres.conf文件的监听端口    \npostgres.conf:    \n```\nlisten_addresses = '*'      # what IP address(es) to listen on;    \n```\n**netstat -tunlp命令**查看下监听状态是否正常    \n```\nActive Internet connections (only servers)                                 \nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      816/postgres         \ntcp6       0      0 :::5432                 :::*                    LISTEN      816/postgres\n```\n### 参考\n[stackoverflow解决方法](http://stackoverflow.com/questions/25069832/docker-tomcat-and-postgresql-containers-in-same-host-no-route-to-host)","source":"_posts/java工程启动No-Route-to-host.md","raw":"---\ntitle: java工程启动 No Route to host\ndate: 2017-03-28 20:17:35\ntags: [docker,java,No Route to host]\n---\n1. 检查宿主机防火墙是否开启    \n```\nfirewall-cmd --state #查看默认防火墙状态（关闭后显示not running，开启后显示running）    \nsystemctl stop firewalld.service #停止firewall    \nsystemctl disable firewalld.service #禁止firewall开机启动    \n```\n2. 确认project工程连接的postgresql服务是映射到宿主机的ip及port，而不是postgresql docker自身的ip及port\n3. 确认postgresql服务docker的pg_hba.conf文件，是否设置接收任意的ip发来的请求    \npg_hba.conf:    \n```\nhost    all             all             0.0.0.0/0               md5    \n```\n4. 确认postgresql服务docker的postgres.conf文件的监听端口    \npostgres.conf:    \n```\nlisten_addresses = '*'      # what IP address(es) to listen on;    \n```\n**netstat -tunlp命令**查看下监听状态是否正常    \n```\nActive Internet connections (only servers)                                 \nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      816/postgres         \ntcp6       0      0 :::5432                 :::*                    LISTEN      816/postgres\n```\n### 参考\n[stackoverflow解决方法](http://stackoverflow.com/questions/25069832/docker-tomcat-and-postgresql-containers-in-same-host-no-route-to-host)","slug":"java工程启动No-Route-to-host","published":1,"updated":"2017-03-28T12:18:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ie3000x8rlxp1gj97a3","content":"<ol>\n<li><p>检查宿主机防火墙是否开启    </p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --state <span class=\"comment\">#查看默认防火墙状态（关闭后显示not running，开启后显示running）    </span></span></span><br><span class=\"line\"><span class=\"bash\">systemctl stop firewalld.service <span class=\"comment\">#停止firewall    </span></span></span><br><span class=\"line\"><span class=\"bash\">systemctl <span class=\"built_in\">disable</span> firewalld.service <span class=\"comment\">#禁止firewall开机启动</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确认project工程连接的postgresql服务是映射到宿主机的ip及port，而不是postgresql docker自身的ip及port</p>\n</li>\n<li><p>确认postgresql服务docker的pg_hba.conf文件，是否设置接收任意的ip发来的请求<br>pg_hba.conf:    </p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host    all             all             <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">0</span>               md5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确认postgresql服务docker的postgres.conf文件的监听端口<br>postgres.conf:    </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">listen_addresses</span> = <span class=\"string\">'*'</span>      # what IP address(es) to listen <span class=\"literal\">on</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>netstat -tunlp命令</strong>查看下监听状态是否正常<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (only servers)                                 </span><br><span class=\"line\">Proto Recv-Q Send-Q Local<span class=\"built_in\"> Address </span>          Foreign<span class=\"built_in\"> Address </span>        State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      816/postgres         </span><br><span class=\"line\">tcp6       0      0 :::5432                 :::*                    LISTEN      816/postgres</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://stackoverflow.com/questions/25069832/docker-tomcat-and-postgresql-containers-in-same-host-no-route-to-host\" target=\"_blank\" rel=\"noopener\">stackoverflow解决方法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>检查宿主机防火墙是否开启    </p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --state <span class=\"comment\">#查看默认防火墙状态（关闭后显示not running，开启后显示running）    </span></span></span><br><span class=\"line\"><span class=\"bash\">systemctl stop firewalld.service <span class=\"comment\">#停止firewall    </span></span></span><br><span class=\"line\"><span class=\"bash\">systemctl <span class=\"built_in\">disable</span> firewalld.service <span class=\"comment\">#禁止firewall开机启动</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确认project工程连接的postgresql服务是映射到宿主机的ip及port，而不是postgresql docker自身的ip及port</p>\n</li>\n<li><p>确认postgresql服务docker的pg_hba.conf文件，是否设置接收任意的ip发来的请求<br>pg_hba.conf:    </p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host    all             all             <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">0</span>               md5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确认postgresql服务docker的postgres.conf文件的监听端口<br>postgres.conf:    </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">listen_addresses</span> = <span class=\"string\">'*'</span>      # what IP address(es) to listen <span class=\"literal\">on</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>netstat -tunlp命令</strong>查看下监听状态是否正常<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (only servers)                                 </span><br><span class=\"line\">Proto Recv-Q Send-Q Local<span class=\"built_in\"> Address </span>          Foreign<span class=\"built_in\"> Address </span>        State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      816/postgres         </span><br><span class=\"line\">tcp6       0      0 :::5432                 :::*                    LISTEN      816/postgres</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://stackoverflow.com/questions/25069832/docker-tomcat-and-postgresql-containers-in-same-host-no-route-to-host\" target=\"_blank\" rel=\"noopener\">stackoverflow解决方法</a></p>\n"},{"title":"mac下批量替换文本","date":"2016-06-08T04:02:39.000Z","_content":"在mac下使用sed与linux下稍微有一些不同。  \n-i 参数可以指定备份源文件名  \n\n    sed -i \"bk\" \"s/Cat/Dog/g\" example.txt\n\n替换example.txt文件中的Cat->Dog时，会生成备份文件example.txtbk。也可以指定不生成备份文件，-i参数为“”。\n\n批量替换命令如下：  \n\n    sed -i \"\" \"s/Cat/Dog/g\" `grep Cat -rl ./`\n\n用grep查找出当前文件夹下含有Cat的文件，然后替换成Dog。并且不指定备份文件。\n","source":"_posts/mac下批量替换文本.md","raw":"---\ntitle: mac下批量替换文本\ndate: 2016-06-08 12:02:39\ntags: [mac,sed,grep]\n---\n在mac下使用sed与linux下稍微有一些不同。  \n-i 参数可以指定备份源文件名  \n\n    sed -i \"bk\" \"s/Cat/Dog/g\" example.txt\n\n替换example.txt文件中的Cat->Dog时，会生成备份文件example.txtbk。也可以指定不生成备份文件，-i参数为“”。\n\n批量替换命令如下：  \n\n    sed -i \"\" \"s/Cat/Dog/g\" `grep Cat -rl ./`\n\n用grep查找出当前文件夹下含有Cat的文件，然后替换成Dog。并且不指定备份文件。\n","slug":"mac下批量替换文本","published":1,"updated":"2016-06-08T05:32:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ie9000z8rlx3pfqyyz3","content":"<p>在mac下使用sed与linux下稍微有一些不同。<br>-i 参数可以指定备份源文件名  </p>\n<pre><code>sed -i &quot;bk&quot; &quot;s/Cat/Dog/g&quot; example.txt\n</code></pre><p>替换example.txt文件中的Cat-&gt;Dog时，会生成备份文件example.txtbk。也可以指定不生成备份文件，-i参数为“”。</p>\n<p>批量替换命令如下：  </p>\n<pre><code>sed -i &quot;&quot; &quot;s/Cat/Dog/g&quot; `grep Cat -rl ./`\n</code></pre><p>用grep查找出当前文件夹下含有Cat的文件，然后替换成Dog。并且不指定备份文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在mac下使用sed与linux下稍微有一些不同。<br>-i 参数可以指定备份源文件名  </p>\n<pre><code>sed -i &quot;bk&quot; &quot;s/Cat/Dog/g&quot; example.txt\n</code></pre><p>替换example.txt文件中的Cat-&gt;Dog时，会生成备份文件example.txtbk。也可以指定不生成备份文件，-i参数为“”。</p>\n<p>批量替换命令如下：  </p>\n<pre><code>sed -i &quot;&quot; &quot;s/Cat/Dog/g&quot; `grep Cat -rl ./`\n</code></pre><p>用grep查找出当前文件夹下含有Cat的文件，然后替换成Dog。并且不指定备份文件。</p>\n"},{"layout":"testhexo","title":"mac下搭建hexo至github","date":"2016-05-22T03:28:02.000Z","_content":"\n**hexo**是一款基于Node.js的静态博客框架:<a href=\"https://github.com/hexojs/hexo\">hexo github</a>\n  \n## 安装nodejs\n\n    brew install node\n    \n## 安装hexo\n\n    npm install -g hexo\n    hexo init <folder>\n    npm install\n\n## hexo语法\n\n    hexo new \"postName\" #新建文章\n    hexo generate #生成静态页面至public目录\n    hexo server #本地预览，默认4000端口\n    hexo deploy ＃发布\n\n## 配置\n\n修改hexo根目录下的_config.yml文件,xxx为github的账户名称。  \n\n    deploy:\n      type: git\n      repository: https://github.com/xxx/xxx.github.io.git\n      branch: master\n     \n在github创建xxx.github.io\n\n## 安装主题\n\n个人比较喜欢<a href=\"https://github.com/litten/hexo-theme-yilia\">yilia github</a>\n\n## 发布\n\n    $ hexo d -g","source":"_posts/mac下搭建hexo至github.md","raw":"layout: testhexo\ntitle: mac下搭建hexo至github\ndate: 2016-05-22 11:28:02\ntags:\n---\n\n**hexo**是一款基于Node.js的静态博客框架:<a href=\"https://github.com/hexojs/hexo\">hexo github</a>\n  \n## 安装nodejs\n\n    brew install node\n    \n## 安装hexo\n\n    npm install -g hexo\n    hexo init <folder>\n    npm install\n\n## hexo语法\n\n    hexo new \"postName\" #新建文章\n    hexo generate #生成静态页面至public目录\n    hexo server #本地预览，默认4000端口\n    hexo deploy ＃发布\n\n## 配置\n\n修改hexo根目录下的_config.yml文件,xxx为github的账户名称。  \n\n    deploy:\n      type: git\n      repository: https://github.com/xxx/xxx.github.io.git\n      branch: master\n     \n在github创建xxx.github.io\n\n## 安装主题\n\n个人比较喜欢<a href=\"https://github.com/litten/hexo-theme-yilia\">yilia github</a>\n\n## 发布\n\n    $ hexo d -g","slug":"mac下搭建hexo至github","published":1,"updated":"2016-06-17T01:51:01.000Z","comments":1,"photos":[],"link":"","_id":"cjaw81ieb00108rlxi17kd1e8","content":"<p><strong>hexo</strong>是一款基于Node.js的静态博客框架:<a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">hexo github</a></p>\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><pre><code>brew install node\n</code></pre><h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><pre><code>npm install -g hexo\nhexo init &lt;folder&gt;\nnpm install\n</code></pre><h2 id=\"hexo语法\"><a href=\"#hexo语法\" class=\"headerlink\" title=\"hexo语法\"></a>hexo语法</h2><pre><code>hexo new &quot;postName&quot; #新建文章\nhexo generate #生成静态页面至public目录\nhexo server #本地预览，默认4000端口\nhexo deploy ＃发布\n</code></pre><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改hexo根目录下的_config.yml文件,xxx为github的账户名称。  </p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/xxx/xxx.github.io.git\n  branch: master\n</code></pre><p>在github创建xxx.github.io</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><p>个人比较喜欢<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia github</a></p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><pre><code>$ hexo d -g\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><strong>hexo</strong>是一款基于Node.js的静态博客框架:<a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">hexo github</a></p>\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><pre><code>brew install node\n</code></pre><h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><pre><code>npm install -g hexo\nhexo init &lt;folder&gt;\nnpm install\n</code></pre><h2 id=\"hexo语法\"><a href=\"#hexo语法\" class=\"headerlink\" title=\"hexo语法\"></a>hexo语法</h2><pre><code>hexo new &quot;postName&quot; #新建文章\nhexo generate #生成静态页面至public目录\nhexo server #本地预览，默认4000端口\nhexo deploy ＃发布\n</code></pre><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改hexo根目录下的_config.yml文件,xxx为github的账户名称。  </p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/xxx/xxx.github.io.git\n  branch: master\n</code></pre><p>在github创建xxx.github.io</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><p>个人比较喜欢<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia github</a></p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><pre><code>$ hexo d -g\n</code></pre>"},{"title":"pip freeze","date":"2016-05-31T02:15:40.000Z","_content":"在本地python开发时，可以生成requirements.txt文件，用于记录所有依赖包及其精确的版本号。  \n\n    pip freeze >requirements.txt\n可创建与本地完全一致的副本环境。  \n\n    pip install -r requirements.txt\n","source":"_posts/pip-freeze.md","raw":"---\ntitle: pip freeze\ndate: 2016-05-31 10:15:40\ntags: python\n---\n在本地python开发时，可以生成requirements.txt文件，用于记录所有依赖包及其精确的版本号。  \n\n    pip freeze >requirements.txt\n可创建与本地完全一致的副本环境。  \n\n    pip install -r requirements.txt\n","slug":"pip-freeze","published":1,"updated":"2016-05-31T02:26:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ied00128rlxi18stmu1","content":"<p>在本地python开发时，可以生成requirements.txt文件，用于记录所有依赖包及其精确的版本号。  </p>\n<pre><code>pip freeze &gt;requirements.txt\n</code></pre><p>可创建与本地完全一致的副本环境。  </p>\n<pre><code>pip install -r requirements.txt\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>在本地python开发时，可以生成requirements.txt文件，用于记录所有依赖包及其精确的版本号。  </p>\n<pre><code>pip freeze &gt;requirements.txt\n</code></pre><p>可创建与本地完全一致的副本环境。  </p>\n<pre><code>pip install -r requirements.txt\n</code></pre>"},{"title":"react native初体验","date":"2016-07-07T06:21:11.000Z","_content":"今天想体验一下react native\n\n    $ brew install node\n    $ brew install watchman\n    $ brew install flow\n    $ sudo npm install -g react-native-cli\n    \n结果报错如下\n\n    $ network getaddrinfo ENOTFOUND registry.npmjs.org registry.npmjs.org:443\n    \n给npm设置proxy翻墙安装就成功了。\n\n    $ npm config set proxy http://address:8080\n\n初始化一个project\n\n    $ react-native init HelloWorld\n\n成功后，新new的project里，会建立好ios和android的初始工程。\n运行IOS应用程序：\n\n    $ react-native run-ios\n\n运行Android应用程序：\n\n    $ react-native run-android\n\nIOS环境配置很快啊，只要网络没有问题，就很快可以run成功。\nAndroid环境配了三天啊。。。各种坑，各种查资料，还好最后也run好了。\n\n开始实战吧。\n","source":"_posts/react-native初体验.md","raw":"---\ntitle: react native初体验\ndate: 2016-07-07 14:21:11\ntags: [react native,npmjs.org:443]\n---\n今天想体验一下react native\n\n    $ brew install node\n    $ brew install watchman\n    $ brew install flow\n    $ sudo npm install -g react-native-cli\n    \n结果报错如下\n\n    $ network getaddrinfo ENOTFOUND registry.npmjs.org registry.npmjs.org:443\n    \n给npm设置proxy翻墙安装就成功了。\n\n    $ npm config set proxy http://address:8080\n\n初始化一个project\n\n    $ react-native init HelloWorld\n\n成功后，新new的project里，会建立好ios和android的初始工程。\n运行IOS应用程序：\n\n    $ react-native run-ios\n\n运行Android应用程序：\n\n    $ react-native run-android\n\nIOS环境配置很快啊，只要网络没有问题，就很快可以run成功。\nAndroid环境配了三天啊。。。各种坑，各种查资料，还好最后也run好了。\n\n开始实战吧。\n","slug":"react-native初体验","published":1,"updated":"2016-08-11T01:52:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81iee00148rlx1ezmuy25","content":"<p>今天想体验一下react native</p>\n<pre><code>$ brew install node\n$ brew install watchman\n$ brew install flow\n$ sudo npm install -g react-native-cli\n</code></pre><p>结果报错如下</p>\n<pre><code>$ network getaddrinfo ENOTFOUND registry.npmjs.org registry.npmjs.org:443\n</code></pre><p>给npm设置proxy翻墙安装就成功了。</p>\n<pre><code>$ npm config set proxy http://address:8080\n</code></pre><p>初始化一个project</p>\n<pre><code>$ react-native init HelloWorld\n</code></pre><p>成功后，新new的project里，会建立好ios和android的初始工程。<br>运行IOS应用程序：</p>\n<pre><code>$ react-native run-ios\n</code></pre><p>运行Android应用程序：</p>\n<pre><code>$ react-native run-android\n</code></pre><p>IOS环境配置很快啊，只要网络没有问题，就很快可以run成功。<br>Android环境配了三天啊。。。各种坑，各种查资料，还好最后也run好了。</p>\n<p>开始实战吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天想体验一下react native</p>\n<pre><code>$ brew install node\n$ brew install watchman\n$ brew install flow\n$ sudo npm install -g react-native-cli\n</code></pre><p>结果报错如下</p>\n<pre><code>$ network getaddrinfo ENOTFOUND registry.npmjs.org registry.npmjs.org:443\n</code></pre><p>给npm设置proxy翻墙安装就成功了。</p>\n<pre><code>$ npm config set proxy http://address:8080\n</code></pre><p>初始化一个project</p>\n<pre><code>$ react-native init HelloWorld\n</code></pre><p>成功后，新new的project里，会建立好ios和android的初始工程。<br>运行IOS应用程序：</p>\n<pre><code>$ react-native run-ios\n</code></pre><p>运行Android应用程序：</p>\n<pre><code>$ react-native run-android\n</code></pre><p>IOS环境配置很快啊，只要网络没有问题，就很快可以run成功。<br>Android环境配了三天啊。。。各种坑，各种查资料，还好最后也run好了。</p>\n<p>开始实战吧。</p>\n"},{"title":"shell反向删除文件","date":"2016-06-24T09:12:07.000Z","_content":"除了filename文件外，全部rm掉。\n\n    $ shopt -s extglob\n    $ rm -rf !(filename)\n \n","source":"_posts/shell反向删除文件.md","raw":"---\ntitle: shell反向删除文件\ndate: 2016-06-24 17:12:07\ntags: [linux,shell]\n---\n除了filename文件外，全部rm掉。\n\n    $ shopt -s extglob\n    $ rm -rf !(filename)\n \n","slug":"shell反向删除文件","published":1,"updated":"2016-06-24T09:17:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ieg00168rlxfrt1snra","content":"<p>除了filename文件外，全部rm掉。</p>\n<pre><code>$ shopt -s extglob\n$ rm -rf !(filename)\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>除了filename文件外，全部rm掉。</p>\n<pre><code>$ shopt -s extglob\n$ rm -rf !(filename)\n</code></pre>"},{"title":"react native与webapi交互","date":"2016-08-08T03:56:15.000Z","_content":"react native坑太大了！！！\n既然跳进去了，就想办法填坑呗～\n\n## webapi\n#### 本地开启webAPI\n![webapi](http://obksgg9lx.bkt.clouddn.com/webapi.png)\n\n#### curl测试webAPI\n![test webapi](http://obksgg9lx.bkt.clouddn.com/getToken.png)\n\n## react native如何debug\n#### command + d\n在ios的simulator上，command+d调出菜单，选择Debug JS Remotely\n\n![debug](http://obksgg9lx.bkt.clouddn.com/debugJS.png)  \n\n#### Runtime is not ready for debugging.\n如果报出该错，则需要下载chrome浏览器，mac自带的safari无法载入本地的reactJS文件。\n\n![error](http://obksgg9lx.bkt.clouddn.com/debugging.png)\n\n#### Network request failed.\n如果报出该错，需要配置xcode里对于http请求的设置。  \n\n![error](http://obksgg9lx.bkt.clouddn.com/networkRequestFail.png)\n\n这个错误搞的我烦躁了一个周末，根本没有头绪。  \n首先，要确认RCTWebSocketExecutor.m文件中host = @\"localhost\";\n\n![host](http://obksgg9lx.bkt.clouddn.com/RCTWebSocketExecutor.png)\n\n其次，要在plist的APP Transport Security Settings中添加Allow Arbitrary Loads为True。这个设置把request请求不仅仅局限于https安全模式，http也被允许了。\n\n![plist](http://obksgg9lx.bkt.clouddn.com/plist.png)\n\n#### chrome debug\n测试一下，与本地webapi的交互，在chrome浏览器下可以打断点，查看变量了。\n\n![chrome](http://obksgg9lx.bkt.clouddn.com/chromeTool.png)\n\nwebapi的监听也收到了request。\n\n![webapi listen](http://obksgg9lx.bkt.clouddn.com/requestForWebAPI.png)\n\n## 退出debug模式\n\n#### command + d\n在ios的simulator上，command+d调出菜单，选择Stop Remote JS Debugging\n\n![stop debug](http://obksgg9lx.bkt.clouddn.com/debugJSStop.png)\n\n参照<a href=\"http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#debugging\">facebook debugging文档</a>\n","source":"_posts/react-native与webapi交互.md","raw":"---\ntitle: react native与webapi交互\ndate: 2016-08-08 11:56:15\ntags: [react native,Runtime is not ready for debugging,Network request failed]\n---\nreact native坑太大了！！！\n既然跳进去了，就想办法填坑呗～\n\n## webapi\n#### 本地开启webAPI\n![webapi](http://obksgg9lx.bkt.clouddn.com/webapi.png)\n\n#### curl测试webAPI\n![test webapi](http://obksgg9lx.bkt.clouddn.com/getToken.png)\n\n## react native如何debug\n#### command + d\n在ios的simulator上，command+d调出菜单，选择Debug JS Remotely\n\n![debug](http://obksgg9lx.bkt.clouddn.com/debugJS.png)  \n\n#### Runtime is not ready for debugging.\n如果报出该错，则需要下载chrome浏览器，mac自带的safari无法载入本地的reactJS文件。\n\n![error](http://obksgg9lx.bkt.clouddn.com/debugging.png)\n\n#### Network request failed.\n如果报出该错，需要配置xcode里对于http请求的设置。  \n\n![error](http://obksgg9lx.bkt.clouddn.com/networkRequestFail.png)\n\n这个错误搞的我烦躁了一个周末，根本没有头绪。  \n首先，要确认RCTWebSocketExecutor.m文件中host = @\"localhost\";\n\n![host](http://obksgg9lx.bkt.clouddn.com/RCTWebSocketExecutor.png)\n\n其次，要在plist的APP Transport Security Settings中添加Allow Arbitrary Loads为True。这个设置把request请求不仅仅局限于https安全模式，http也被允许了。\n\n![plist](http://obksgg9lx.bkt.clouddn.com/plist.png)\n\n#### chrome debug\n测试一下，与本地webapi的交互，在chrome浏览器下可以打断点，查看变量了。\n\n![chrome](http://obksgg9lx.bkt.clouddn.com/chromeTool.png)\n\nwebapi的监听也收到了request。\n\n![webapi listen](http://obksgg9lx.bkt.clouddn.com/requestForWebAPI.png)\n\n## 退出debug模式\n\n#### command + d\n在ios的simulator上，command+d调出菜单，选择Stop Remote JS Debugging\n\n![stop debug](http://obksgg9lx.bkt.clouddn.com/debugJSStop.png)\n\n参照<a href=\"http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#debugging\">facebook debugging文档</a>\n","slug":"react-native与webapi交互","published":1,"updated":"2016-08-08T06:51:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81iel00198rlxbmp3qcvw","content":"<p>react native坑太大了！！！<br>既然跳进去了，就想办法填坑呗～</p>\n<h2 id=\"webapi\"><a href=\"#webapi\" class=\"headerlink\" title=\"webapi\"></a>webapi</h2><h4 id=\"本地开启webAPI\"><a href=\"#本地开启webAPI\" class=\"headerlink\" title=\"本地开启webAPI\"></a>本地开启webAPI</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/webapi.png\" alt=\"webapi\"></p>\n<h4 id=\"curl测试webAPI\"><a href=\"#curl测试webAPI\" class=\"headerlink\" title=\"curl测试webAPI\"></a>curl测试webAPI</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/getToken.png\" alt=\"test webapi\"></p>\n<h2 id=\"react-native如何debug\"><a href=\"#react-native如何debug\" class=\"headerlink\" title=\"react native如何debug\"></a>react native如何debug</h2><h4 id=\"command-d\"><a href=\"#command-d\" class=\"headerlink\" title=\"command + d\"></a>command + d</h4><p>在ios的simulator上，command+d调出菜单，选择Debug JS Remotely</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugJS.png\" alt=\"debug\">  </p>\n<h4 id=\"Runtime-is-not-ready-for-debugging\"><a href=\"#Runtime-is-not-ready-for-debugging\" class=\"headerlink\" title=\"Runtime is not ready for debugging.\"></a>Runtime is not ready for debugging.</h4><p>如果报出该错，则需要下载chrome浏览器，mac自带的safari无法载入本地的reactJS文件。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugging.png\" alt=\"error\"></p>\n<h4 id=\"Network-request-failed\"><a href=\"#Network-request-failed\" class=\"headerlink\" title=\"Network request failed.\"></a>Network request failed.</h4><p>如果报出该错，需要配置xcode里对于http请求的设置。  </p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/networkRequestFail.png\" alt=\"error\"></p>\n<p>这个错误搞的我烦躁了一个周末，根本没有头绪。<br>首先，要确认RCTWebSocketExecutor.m文件中host = @”localhost”;</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/RCTWebSocketExecutor.png\" alt=\"host\"></p>\n<p>其次，要在plist的APP Transport Security Settings中添加Allow Arbitrary Loads为True。这个设置把request请求不仅仅局限于https安全模式，http也被允许了。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/plist.png\" alt=\"plist\"></p>\n<h4 id=\"chrome-debug\"><a href=\"#chrome-debug\" class=\"headerlink\" title=\"chrome debug\"></a>chrome debug</h4><p>测试一下，与本地webapi的交互，在chrome浏览器下可以打断点，查看变量了。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/chromeTool.png\" alt=\"chrome\"></p>\n<p>webapi的监听也收到了request。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/requestForWebAPI.png\" alt=\"webapi listen\"></p>\n<h2 id=\"退出debug模式\"><a href=\"#退出debug模式\" class=\"headerlink\" title=\"退出debug模式\"></a>退出debug模式</h2><h4 id=\"command-d-1\"><a href=\"#command-d-1\" class=\"headerlink\" title=\"command + d\"></a>command + d</h4><p>在ios的simulator上，command+d调出菜单，选择Stop Remote JS Debugging</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugJSStop.png\" alt=\"stop debug\"></p>\n<p>参照<a href=\"http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#debugging\" target=\"_blank\" rel=\"noopener\">facebook debugging文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>react native坑太大了！！！<br>既然跳进去了，就想办法填坑呗～</p>\n<h2 id=\"webapi\"><a href=\"#webapi\" class=\"headerlink\" title=\"webapi\"></a>webapi</h2><h4 id=\"本地开启webAPI\"><a href=\"#本地开启webAPI\" class=\"headerlink\" title=\"本地开启webAPI\"></a>本地开启webAPI</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/webapi.png\" alt=\"webapi\"></p>\n<h4 id=\"curl测试webAPI\"><a href=\"#curl测试webAPI\" class=\"headerlink\" title=\"curl测试webAPI\"></a>curl测试webAPI</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/getToken.png\" alt=\"test webapi\"></p>\n<h2 id=\"react-native如何debug\"><a href=\"#react-native如何debug\" class=\"headerlink\" title=\"react native如何debug\"></a>react native如何debug</h2><h4 id=\"command-d\"><a href=\"#command-d\" class=\"headerlink\" title=\"command + d\"></a>command + d</h4><p>在ios的simulator上，command+d调出菜单，选择Debug JS Remotely</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugJS.png\" alt=\"debug\">  </p>\n<h4 id=\"Runtime-is-not-ready-for-debugging\"><a href=\"#Runtime-is-not-ready-for-debugging\" class=\"headerlink\" title=\"Runtime is not ready for debugging.\"></a>Runtime is not ready for debugging.</h4><p>如果报出该错，则需要下载chrome浏览器，mac自带的safari无法载入本地的reactJS文件。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugging.png\" alt=\"error\"></p>\n<h4 id=\"Network-request-failed\"><a href=\"#Network-request-failed\" class=\"headerlink\" title=\"Network request failed.\"></a>Network request failed.</h4><p>如果报出该错，需要配置xcode里对于http请求的设置。  </p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/networkRequestFail.png\" alt=\"error\"></p>\n<p>这个错误搞的我烦躁了一个周末，根本没有头绪。<br>首先，要确认RCTWebSocketExecutor.m文件中host = @”localhost”;</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/RCTWebSocketExecutor.png\" alt=\"host\"></p>\n<p>其次，要在plist的APP Transport Security Settings中添加Allow Arbitrary Loads为True。这个设置把request请求不仅仅局限于https安全模式，http也被允许了。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/plist.png\" alt=\"plist\"></p>\n<h4 id=\"chrome-debug\"><a href=\"#chrome-debug\" class=\"headerlink\" title=\"chrome debug\"></a>chrome debug</h4><p>测试一下，与本地webapi的交互，在chrome浏览器下可以打断点，查看变量了。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/chromeTool.png\" alt=\"chrome\"></p>\n<p>webapi的监听也收到了request。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/requestForWebAPI.png\" alt=\"webapi listen\"></p>\n<h2 id=\"退出debug模式\"><a href=\"#退出debug模式\" class=\"headerlink\" title=\"退出debug模式\"></a>退出debug模式</h2><h4 id=\"command-d-1\"><a href=\"#command-d-1\" class=\"headerlink\" title=\"command + d\"></a>command + d</h4><p>在ios的simulator上，command+d调出菜单，选择Stop Remote JS Debugging</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugJSStop.png\" alt=\"stop debug\"></p>\n<p>参照<a href=\"http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#debugging\" target=\"_blank\" rel=\"noopener\">facebook debugging文档</a></p>\n"},{"title":"supervisor管理服务器进程","date":"2017-07-07T08:57:57.000Z","_content":"在服务器上同时管理多个java进程和python进程，我使用supervisor。\n在/etc/supervisor/conf.d/路径下创建xxx.conf    \n在xxx.conf下配置如下    \n\n```+shell\n[program:gzh]\ncommand=/root/python-gzh/venv/bin/gunicorn main:application -c /root/python-gzh/gunicorn.conf\ndirectory=/root/python-gzh\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/python-gzh/logs/gzh.log\n\n[program:provider]\ncommand=java -jar /root/springboot/platform-system-provider.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/provider.log\n\n[program:webapi]\ncommand=java -jar /root/springboot/platform-mobile-client.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/webapi.log\n\n[program:web]\ncommand=java -jar /root/springboot/platform-admin-web.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/web.log\n```\n通过supervisorctl可以监控管理各种进程的状态了。\n","source":"_posts/supervisor管理服务器进程.md","raw":"---\ntitle: supervisor管理服务器进程\ndate: 2017-07-07 16:57:57\ntags: [supervisor,sprintboot,web.py]\n---\n在服务器上同时管理多个java进程和python进程，我使用supervisor。\n在/etc/supervisor/conf.d/路径下创建xxx.conf    \n在xxx.conf下配置如下    \n\n```+shell\n[program:gzh]\ncommand=/root/python-gzh/venv/bin/gunicorn main:application -c /root/python-gzh/gunicorn.conf\ndirectory=/root/python-gzh\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/python-gzh/logs/gzh.log\n\n[program:provider]\ncommand=java -jar /root/springboot/platform-system-provider.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/provider.log\n\n[program:webapi]\ncommand=java -jar /root/springboot/platform-mobile-client.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/webapi.log\n\n[program:web]\ncommand=java -jar /root/springboot/platform-admin-web.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/web.log\n```\n通过supervisorctl可以监控管理各种进程的状态了。\n","slug":"supervisor管理服务器进程","published":1,"updated":"2017-07-18T10:57:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ieo001b8rlx0r07rc26","content":"<p>在服务器上同时管理多个java进程和python进程，我使用supervisor。<br>在/etc/supervisor/conf.d/路径下创建xxx.conf<br>在xxx.conf下配置如下    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:gzh]</span><br><span class=\"line\">command=/root/python-gzh/venv/bin/gunicorn main:application -c /root/python-gzh/gunicorn.conf</span><br><span class=\"line\">directory=/root/python-gzh</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/python-gzh/logs/gzh.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:provider]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-system-provider.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/provider.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:webapi]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-mobile-client.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/webapi.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:web]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-admin-web.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/web.log</span><br></pre></td></tr></table></figure>\n<p>通过supervisorctl可以监控管理各种进程的状态了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在服务器上同时管理多个java进程和python进程，我使用supervisor。<br>在/etc/supervisor/conf.d/路径下创建xxx.conf<br>在xxx.conf下配置如下    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:gzh]</span><br><span class=\"line\">command=/root/python-gzh/venv/bin/gunicorn main:application -c /root/python-gzh/gunicorn.conf</span><br><span class=\"line\">directory=/root/python-gzh</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/python-gzh/logs/gzh.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:provider]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-system-provider.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/provider.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:webapi]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-mobile-client.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/webapi.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:web]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-admin-web.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/web.log</span><br></pre></td></tr></table></figure>\n<p>通过supervisorctl可以监控管理各种进程的状态了。</p>\n"},{"title":"web.py与gunicorn","date":"2017-07-07T09:02:35.000Z","_content":"web.py的application.py模块，主要实现了WSGI兼容的接口，以便应用程序被WSGI应用服务器调用。   \n\n## WSGI接口的实现\n    app = web.application(urls, globals())\n    application = app.wsgifunc()\n\n## Gunicorn.conf的配置\n    workers = 3\n    bind = '127.0.0.1:8000'\n    \n## Gunicorn的启动方式\n    /$path/bin/gunicorn $filename:application -c /$path/gunicorn.conf\n","source":"_posts/web.py与gunicorn.md","raw":"---\ntitle: web.py与gunicorn\ndate: 2017-07-07 17:02:35\ntags: [web.py, gunicorn]\n---\nweb.py的application.py模块，主要实现了WSGI兼容的接口，以便应用程序被WSGI应用服务器调用。   \n\n## WSGI接口的实现\n    app = web.application(urls, globals())\n    application = app.wsgifunc()\n\n## Gunicorn.conf的配置\n    workers = 3\n    bind = '127.0.0.1:8000'\n    \n## Gunicorn的启动方式\n    /$path/bin/gunicorn $filename:application -c /$path/gunicorn.conf\n","slug":"web.py与gunicorn","published":1,"updated":"2017-07-07T09:24:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ier001d8rlxftkrygv6","content":"<p>web.py的application.py模块，主要实现了WSGI兼容的接口，以便应用程序被WSGI应用服务器调用。   </p>\n<h2 id=\"WSGI接口的实现\"><a href=\"#WSGI接口的实现\" class=\"headerlink\" title=\"WSGI接口的实现\"></a>WSGI接口的实现</h2><pre><code>app = web.application(urls, globals())\napplication = app.wsgifunc()\n</code></pre><h2 id=\"Gunicorn-conf的配置\"><a href=\"#Gunicorn-conf的配置\" class=\"headerlink\" title=\"Gunicorn.conf的配置\"></a>Gunicorn.conf的配置</h2><pre><code>workers = 3\nbind = &apos;127.0.0.1:8000&apos;\n</code></pre><h2 id=\"Gunicorn的启动方式\"><a href=\"#Gunicorn的启动方式\" class=\"headerlink\" title=\"Gunicorn的启动方式\"></a>Gunicorn的启动方式</h2><pre><code>/$path/bin/gunicorn $filename:application -c /$path/gunicorn.conf\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>web.py的application.py模块，主要实现了WSGI兼容的接口，以便应用程序被WSGI应用服务器调用。   </p>\n<h2 id=\"WSGI接口的实现\"><a href=\"#WSGI接口的实现\" class=\"headerlink\" title=\"WSGI接口的实现\"></a>WSGI接口的实现</h2><pre><code>app = web.application(urls, globals())\napplication = app.wsgifunc()\n</code></pre><h2 id=\"Gunicorn-conf的配置\"><a href=\"#Gunicorn-conf的配置\" class=\"headerlink\" title=\"Gunicorn.conf的配置\"></a>Gunicorn.conf的配置</h2><pre><code>workers = 3\nbind = &apos;127.0.0.1:8000&apos;\n</code></pre><h2 id=\"Gunicorn的启动方式\"><a href=\"#Gunicorn的启动方式\" class=\"headerlink\" title=\"Gunicorn的启动方式\"></a>Gunicorn的启动方式</h2><pre><code>/$path/bin/gunicorn $filename:application -c /$path/gunicorn.conf\n</code></pre>"},{"title":"win10启动vagrant","date":"2017-07-18T08:37:55.000Z","_content":"win10环境下vagrant启动会报错。    \n## 正常启动步骤：\n### 设置virtual box的adapter网卡    \n打开Preferences -> Network -> Host-only Networks Tab    \n\n* 将默认的adapter网卡的ipv4的地址，改写成192.168.xx.1\n* 将mask改为255.255.255.0\n\n### 启动vagrant\n\n    $ vagrant up \n    \n如果启动时报错    \n    \n    Bringing machine 'default' up with 'virtualbox' provider...\n    There was an error while executing `VBoxManage`, a CLI used by Vagrant\n    for controlling VirtualBox. The command and stderr is shown below.\n\n    Command: [\"hostonlyif\", \"create\"]\n\n    Stderr: 0%...\n    Progress state: E_FAIL\n    VBoxManage.exe: error: Failed to create the host-only adapter\n    VBoxManage.exe: error: Code E_FAIL (0x80004005) - Unspecified error (extended info not available)\n    VBoxManage.exe: error: Context: \"int __cdecl handleCreate(struct HandlerArg ,int,int )\" at line 68 of file VBoxManageHostonly.cpp\n    \n1. check下virtual box有没有创建一个新的adapter网卡。\n2. check该网卡的ipv4的地址是以192.168开头的。\n3. 如果成功创建了，则再次vagrant up。就启动成功了。","source":"_posts/win10启动vagrant.md","raw":"---\ntitle: win10启动vagrant\ndate: 2017-07-18 16:37:55\ntags: [vagrant,win10]\n---\nwin10环境下vagrant启动会报错。    \n## 正常启动步骤：\n### 设置virtual box的adapter网卡    \n打开Preferences -> Network -> Host-only Networks Tab    \n\n* 将默认的adapter网卡的ipv4的地址，改写成192.168.xx.1\n* 将mask改为255.255.255.0\n\n### 启动vagrant\n\n    $ vagrant up \n    \n如果启动时报错    \n    \n    Bringing machine 'default' up with 'virtualbox' provider...\n    There was an error while executing `VBoxManage`, a CLI used by Vagrant\n    for controlling VirtualBox. The command and stderr is shown below.\n\n    Command: [\"hostonlyif\", \"create\"]\n\n    Stderr: 0%...\n    Progress state: E_FAIL\n    VBoxManage.exe: error: Failed to create the host-only adapter\n    VBoxManage.exe: error: Code E_FAIL (0x80004005) - Unspecified error (extended info not available)\n    VBoxManage.exe: error: Context: \"int __cdecl handleCreate(struct HandlerArg ,int,int )\" at line 68 of file VBoxManageHostonly.cpp\n    \n1. check下virtual box有没有创建一个新的adapter网卡。\n2. check该网卡的ipv4的地址是以192.168开头的。\n3. 如果成功创建了，则再次vagrant up。就启动成功了。","slug":"win10启动vagrant","published":1,"updated":"2017-07-18T09:14:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ies001e8rlxsup6wrkm","content":"<p>win10环境下vagrant启动会报错。    </p>\n<h2 id=\"正常启动步骤：\"><a href=\"#正常启动步骤：\" class=\"headerlink\" title=\"正常启动步骤：\"></a>正常启动步骤：</h2><h3 id=\"设置virtual-box的adapter网卡\"><a href=\"#设置virtual-box的adapter网卡\" class=\"headerlink\" title=\"设置virtual box的adapter网卡\"></a>设置virtual box的adapter网卡</h3><p>打开Preferences -&gt; Network -&gt; Host-only Networks Tab    </p>\n<ul>\n<li>将默认的adapter网卡的ipv4的地址，改写成192.168.xx.1</li>\n<li>将mask改为255.255.255.0</li>\n</ul>\n<h3 id=\"启动vagrant\"><a href=\"#启动vagrant\" class=\"headerlink\" title=\"启动vagrant\"></a>启动vagrant</h3><pre><code>$ vagrant up \n</code></pre><p>如果启动时报错    </p>\n<pre><code>Bringing machine &apos;default&apos; up with &apos;virtualbox&apos; provider...\nThere was an error while executing `VBoxManage`, a CLI used by Vagrant\nfor controlling VirtualBox. The command and stderr is shown below.\n\nCommand: [&quot;hostonlyif&quot;, &quot;create&quot;]\n\nStderr: 0%...\nProgress state: E_FAIL\nVBoxManage.exe: error: Failed to create the host-only adapter\nVBoxManage.exe: error: Code E_FAIL (0x80004005) - Unspecified error (extended info not available)\nVBoxManage.exe: error: Context: &quot;int __cdecl handleCreate(struct HandlerArg ,int,int )&quot; at line 68 of file VBoxManageHostonly.cpp\n</code></pre><ol>\n<li>check下virtual box有没有创建一个新的adapter网卡。</li>\n<li>check该网卡的ipv4的地址是以192.168开头的。</li>\n<li>如果成功创建了，则再次vagrant up。就启动成功了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>win10环境下vagrant启动会报错。    </p>\n<h2 id=\"正常启动步骤：\"><a href=\"#正常启动步骤：\" class=\"headerlink\" title=\"正常启动步骤：\"></a>正常启动步骤：</h2><h3 id=\"设置virtual-box的adapter网卡\"><a href=\"#设置virtual-box的adapter网卡\" class=\"headerlink\" title=\"设置virtual box的adapter网卡\"></a>设置virtual box的adapter网卡</h3><p>打开Preferences -&gt; Network -&gt; Host-only Networks Tab    </p>\n<ul>\n<li>将默认的adapter网卡的ipv4的地址，改写成192.168.xx.1</li>\n<li>将mask改为255.255.255.0</li>\n</ul>\n<h3 id=\"启动vagrant\"><a href=\"#启动vagrant\" class=\"headerlink\" title=\"启动vagrant\"></a>启动vagrant</h3><pre><code>$ vagrant up \n</code></pre><p>如果启动时报错    </p>\n<pre><code>Bringing machine &apos;default&apos; up with &apos;virtualbox&apos; provider...\nThere was an error while executing `VBoxManage`, a CLI used by Vagrant\nfor controlling VirtualBox. The command and stderr is shown below.\n\nCommand: [&quot;hostonlyif&quot;, &quot;create&quot;]\n\nStderr: 0%...\nProgress state: E_FAIL\nVBoxManage.exe: error: Failed to create the host-only adapter\nVBoxManage.exe: error: Code E_FAIL (0x80004005) - Unspecified error (extended info not available)\nVBoxManage.exe: error: Context: &quot;int __cdecl handleCreate(struct HandlerArg ,int,int )&quot; at line 68 of file VBoxManageHostonly.cpp\n</code></pre><ol>\n<li>check下virtual box有没有创建一个新的adapter网卡。</li>\n<li>check该网卡的ipv4的地址是以192.168开头的。</li>\n<li>如果成功创建了，则再次vagrant up。就启动成功了。</li>\n</ol>\n"},{"title":"上传IOS APP一直卡在'Authenticating with the iTunes store'","date":"2017-09-29T05:32:42.000Z","_content":"### 打开终端：\n```shell\ncd ~\nmv .itmstransporter/ .old_itmstransporter/\n\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter\"\n```\n当Transporter更新完成之后，再上传ios app就好了。\n[参考stackoverflow](https://stackoverflow.com/questions/22443425/application-loader-stuck-at-authenticating-with-the-itunes-store-when-uploadin/40423739#40423739)","source":"_posts/上传IOS-APP一直卡在-Authenticating-with-the-iTunes-store.md","raw":"---\ntitle: 上传IOS APP一直卡在'Authenticating with the iTunes store'\ndate: 2017-09-29 13:32:42\ntags: [app, ios]\n---\n### 打开终端：\n```shell\ncd ~\nmv .itmstransporter/ .old_itmstransporter/\n\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter\"\n```\n当Transporter更新完成之后，再上传ios app就好了。\n[参考stackoverflow](https://stackoverflow.com/questions/22443425/application-loader-stuck-at-authenticating-with-the-itunes-store-when-uploadin/40423739#40423739)","slug":"上传IOS-APP一直卡在-Authenticating-with-the-iTunes-store","published":1,"updated":"2017-09-29T05:42:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ieu001g8rlxbkil2ok5","content":"<h3 id=\"打开终端：\"><a href=\"#打开终端：\" class=\"headerlink\" title=\"打开终端：\"></a>打开终端：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mv .itmstransporter/ .old_itmstransporter/</span><br><span class=\"line\">\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter\"</span><br></pre></td></tr></table></figure>\n<p>当Transporter更新完成之后，再上传ios app就好了。<br><a href=\"https://stackoverflow.com/questions/22443425/application-loader-stuck-at-authenticating-with-the-itunes-store-when-uploadin/40423739#40423739\" target=\"_blank\" rel=\"noopener\">参考stackoverflow</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"打开终端：\"><a href=\"#打开终端：\" class=\"headerlink\" title=\"打开终端：\"></a>打开终端：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mv .itmstransporter/ .old_itmstransporter/</span><br><span class=\"line\">\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter\"</span><br></pre></td></tr></table></figure>\n<p>当Transporter更新完成之后，再上传ios app就好了。<br><a href=\"https://stackoverflow.com/questions/22443425/application-loader-stuck-at-authenticating-with-the-itunes-store-when-uploadin/40423739#40423739\" target=\"_blank\" rel=\"noopener\">参考stackoverflow</a></p>\n"},{"title":"使用virtualenv","date":"2016-05-27T14:00:05.000Z","_content":"\n虚拟环境非常有用。可以在系统的python解释器中避免包的混乱和版本的冲突。\n\n## 安装virtualenv\n\n    sudo pip install virtualenv\n\n## 创建python虚拟环境\n\n在工程文件夹下创建python虚拟环境。创建虚拟环境后，当前文件夹中会出现一个子文件夹，名字为下述命令中指定的参数venv。  \n\n    virtualenv venv     \n    \n## 激活\n\n    source venv/bin/activate\n    \n## 退出\n\n    deactivate","source":"_posts/使用virtualenv.md","raw":"---\ntitle: 使用virtualenv\ndate: 2016-05-27 22:00:05\ntags: python\n---\n\n虚拟环境非常有用。可以在系统的python解释器中避免包的混乱和版本的冲突。\n\n## 安装virtualenv\n\n    sudo pip install virtualenv\n\n## 创建python虚拟环境\n\n在工程文件夹下创建python虚拟环境。创建虚拟环境后，当前文件夹中会出现一个子文件夹，名字为下述命令中指定的参数venv。  \n\n    virtualenv venv     \n    \n## 激活\n\n    source venv/bin/activate\n    \n## 退出\n\n    deactivate","slug":"使用virtualenv","published":1,"updated":"2016-05-27T15:26:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81iew001i8rlxvf8jlhyk","content":"<p>虚拟环境非常有用。可以在系统的python解释器中避免包的混乱和版本的冲突。</p>\n<h2 id=\"安装virtualenv\"><a href=\"#安装virtualenv\" class=\"headerlink\" title=\"安装virtualenv\"></a>安装virtualenv</h2><pre><code>sudo pip install virtualenv\n</code></pre><h2 id=\"创建python虚拟环境\"><a href=\"#创建python虚拟环境\" class=\"headerlink\" title=\"创建python虚拟环境\"></a>创建python虚拟环境</h2><p>在工程文件夹下创建python虚拟环境。创建虚拟环境后，当前文件夹中会出现一个子文件夹，名字为下述命令中指定的参数venv。  </p>\n<pre><code>virtualenv venv     \n</code></pre><h2 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h2><pre><code>source venv/bin/activate\n</code></pre><h2 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h2><pre><code>deactivate\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>虚拟环境非常有用。可以在系统的python解释器中避免包的混乱和版本的冲突。</p>\n<h2 id=\"安装virtualenv\"><a href=\"#安装virtualenv\" class=\"headerlink\" title=\"安装virtualenv\"></a>安装virtualenv</h2><pre><code>sudo pip install virtualenv\n</code></pre><h2 id=\"创建python虚拟环境\"><a href=\"#创建python虚拟环境\" class=\"headerlink\" title=\"创建python虚拟环境\"></a>创建python虚拟环境</h2><p>在工程文件夹下创建python虚拟环境。创建虚拟环境后，当前文件夹中会出现一个子文件夹，名字为下述命令中指定的参数venv。  </p>\n<pre><code>virtualenv venv     \n</code></pre><h2 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h2><pre><code>source venv/bin/activate\n</code></pre><h2 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h2><pre><code>deactivate\n</code></pre>"},{"title":"开发团队跨平台开发环境集中管理化之vagrant","date":"2016-08-12T01:58:01.000Z","_content":"**vagrant**是一款用来构建虚拟开发环境的工具，非常适合各类开发语言的web应用，因统一安装本地开发环境浪费的人力成本及时间成本，以及不可避免的“work on my machine”错误，将永久告别～  \n\n## 安装virtualbox及vagrant\nvagrant对virtualbox支持的非常好。但不匹配的版本，加载box会发生或多或少的问题。    \n\n我的工作环境的软件版本是：  \nvagrant 1.6.3  \nvirtualbox 4.2.12-84980\n\n## 添加镜像\n安装好后运行以下命令可以添加vagrant官方的box镜像。  \n\n    $ vagrant box add hashicorp/precise64\n这是一个标准的64bit的ubuntu系统。  \n如果要下载其他系统的镜像，可以在这里下载:<a href=\"https://atlas.hashicorp.com/boxes/search\">https://atlas.hashicorp.com/boxes/search</a>   \n\n## 初始化开发环境\n切换到box文件所在目录，加载box文件及初始化 \n   \n    $ cd ~/dev \n    $ vagrant box add test test.box \n    $ vagrant init test\n    $ vagrant up\n\n## ssh登录\nmac下ssh登录，虚拟机目录 /vagrant 就是宿主机的 ~/dev  \n    \n    $ vagrant ssh\n    $ cd /vagrant\n**windows用户注意:** windows终端需要使用ssh客户端，比如putty等。\n\n## 其他设置\nvagrant 初始化成功后，会在初始化的目录里生成一个 vagrantfile 的配置文件，可以修改配置文件进行个性化的定制。  \n\nvagrant 默认是使用端口映射的方式将虚拟机的端口映射本地从而实现类似 http://localhost:80 这种访问方式。  \n相比之下，host-only模式显得非常方便。打开 vagrantfile，将下面的注释去掉，便可以访问192.168.33.10机器上的服务了。 \n \n    config.vm.network \"private_network\", ip:\"192.168.33.10\"\n\n## 打包分发\n当配置好开发环境后，退出并关闭虚拟机。对开发环境进行打包。\n    \n    $ vagrant package\n\n打包后，就会在当前目录下生成一个 package.box 的文件。可以分发这个文件给其他开发者。\n\n## 集成预安装\nvagrant 还提供预安装定制，打开 vagrantfile, 可以放开这些在文件末尾处有被注释的代码：\n\n    config.vm.provision \"shell\", inline: <<-SHELL\n    \tapt-get update\n    \tapt-get install -y apache2\n    SHELL\n\n可以把需要安装的软件应用全部写在里面，在初次 vagrant up 的时候，虚拟机会预先执行这些命令。  \n\n如果不是初次运行，但又修改了这些命令。则可以进行重载vagrant。  \n\n    $ vagrant reload --provision\n\n也可以把这些配置写在shell脚本里面，让vagrant加载运行这些脚本。因此整个团队可以维护一个 vagrantfile 或者 shell 脚本，把这个文件放在github上，还可以监控它的版本，多么简单和容易啊！哈哈\n\n## 常用命令\n\t$ vagrant init  # 初始化\n\t$ vagrant up  # 启动\n\t$ vagrant halt  # 关闭\n\t$ vagrant reload  # 重启\n\t$ vagrant ssh  # ssh\n\t$ vagrant status  # 查看状态\n\t$ vagrant destroy  # 销毁\n","source":"_posts/跨平台开发环境集中管理化之vagrant.md","raw":"---\ntitle: 开发团队跨平台开发环境集中管理化之vagrant\ndate: 2016-08-12 09:58:01\ntags: [vagrant, 跨平台]\n---\n**vagrant**是一款用来构建虚拟开发环境的工具，非常适合各类开发语言的web应用，因统一安装本地开发环境浪费的人力成本及时间成本，以及不可避免的“work on my machine”错误，将永久告别～  \n\n## 安装virtualbox及vagrant\nvagrant对virtualbox支持的非常好。但不匹配的版本，加载box会发生或多或少的问题。    \n\n我的工作环境的软件版本是：  \nvagrant 1.6.3  \nvirtualbox 4.2.12-84980\n\n## 添加镜像\n安装好后运行以下命令可以添加vagrant官方的box镜像。  \n\n    $ vagrant box add hashicorp/precise64\n这是一个标准的64bit的ubuntu系统。  \n如果要下载其他系统的镜像，可以在这里下载:<a href=\"https://atlas.hashicorp.com/boxes/search\">https://atlas.hashicorp.com/boxes/search</a>   \n\n## 初始化开发环境\n切换到box文件所在目录，加载box文件及初始化 \n   \n    $ cd ~/dev \n    $ vagrant box add test test.box \n    $ vagrant init test\n    $ vagrant up\n\n## ssh登录\nmac下ssh登录，虚拟机目录 /vagrant 就是宿主机的 ~/dev  \n    \n    $ vagrant ssh\n    $ cd /vagrant\n**windows用户注意:** windows终端需要使用ssh客户端，比如putty等。\n\n## 其他设置\nvagrant 初始化成功后，会在初始化的目录里生成一个 vagrantfile 的配置文件，可以修改配置文件进行个性化的定制。  \n\nvagrant 默认是使用端口映射的方式将虚拟机的端口映射本地从而实现类似 http://localhost:80 这种访问方式。  \n相比之下，host-only模式显得非常方便。打开 vagrantfile，将下面的注释去掉，便可以访问192.168.33.10机器上的服务了。 \n \n    config.vm.network \"private_network\", ip:\"192.168.33.10\"\n\n## 打包分发\n当配置好开发环境后，退出并关闭虚拟机。对开发环境进行打包。\n    \n    $ vagrant package\n\n打包后，就会在当前目录下生成一个 package.box 的文件。可以分发这个文件给其他开发者。\n\n## 集成预安装\nvagrant 还提供预安装定制，打开 vagrantfile, 可以放开这些在文件末尾处有被注释的代码：\n\n    config.vm.provision \"shell\", inline: <<-SHELL\n    \tapt-get update\n    \tapt-get install -y apache2\n    SHELL\n\n可以把需要安装的软件应用全部写在里面，在初次 vagrant up 的时候，虚拟机会预先执行这些命令。  \n\n如果不是初次运行，但又修改了这些命令。则可以进行重载vagrant。  \n\n    $ vagrant reload --provision\n\n也可以把这些配置写在shell脚本里面，让vagrant加载运行这些脚本。因此整个团队可以维护一个 vagrantfile 或者 shell 脚本，把这个文件放在github上，还可以监控它的版本，多么简单和容易啊！哈哈\n\n## 常用命令\n\t$ vagrant init  # 初始化\n\t$ vagrant up  # 启动\n\t$ vagrant halt  # 关闭\n\t$ vagrant reload  # 重启\n\t$ vagrant ssh  # ssh\n\t$ vagrant status  # 查看状态\n\t$ vagrant destroy  # 销毁\n","slug":"跨平台开发环境集中管理化之vagrant","published":1,"updated":"2016-08-12T06:57:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81if2001l8rlxk338s1mf","content":"<p><strong>vagrant</strong>是一款用来构建虚拟开发环境的工具，非常适合各类开发语言的web应用，因统一安装本地开发环境浪费的人力成本及时间成本，以及不可避免的“work on my machine”错误，将永久告别～  </p>\n<h2 id=\"安装virtualbox及vagrant\"><a href=\"#安装virtualbox及vagrant\" class=\"headerlink\" title=\"安装virtualbox及vagrant\"></a>安装virtualbox及vagrant</h2><p>vagrant对virtualbox支持的非常好。但不匹配的版本，加载box会发生或多或少的问题。    </p>\n<p>我的工作环境的软件版本是：<br>vagrant 1.6.3<br>virtualbox 4.2.12-84980</p>\n<h2 id=\"添加镜像\"><a href=\"#添加镜像\" class=\"headerlink\" title=\"添加镜像\"></a>添加镜像</h2><p>安装好后运行以下命令可以添加vagrant官方的box镜像。  </p>\n<pre><code>$ vagrant box add hashicorp/precise64\n</code></pre><p>这是一个标准的64bit的ubuntu系统。<br>如果要下载其他系统的镜像，可以在这里下载:<a href=\"https://atlas.hashicorp.com/boxes/search\" target=\"_blank\" rel=\"noopener\">https://atlas.hashicorp.com/boxes/search</a>   </p>\n<h2 id=\"初始化开发环境\"><a href=\"#初始化开发环境\" class=\"headerlink\" title=\"初始化开发环境\"></a>初始化开发环境</h2><p>切换到box文件所在目录，加载box文件及初始化 </p>\n<pre><code>$ cd ~/dev \n$ vagrant box add test test.box \n$ vagrant init test\n$ vagrant up\n</code></pre><h2 id=\"ssh登录\"><a href=\"#ssh登录\" class=\"headerlink\" title=\"ssh登录\"></a>ssh登录</h2><p>mac下ssh登录，虚拟机目录 /vagrant 就是宿主机的 ~/dev  </p>\n<pre><code>$ vagrant ssh\n$ cd /vagrant\n</code></pre><p><strong>windows用户注意:</strong> windows终端需要使用ssh客户端，比如putty等。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><p>vagrant 初始化成功后，会在初始化的目录里生成一个 vagrantfile 的配置文件，可以修改配置文件进行个性化的定制。  </p>\n<p>vagrant 默认是使用端口映射的方式将虚拟机的端口映射本地从而实现类似 <a href=\"http://localhost:80\" target=\"_blank\" rel=\"noopener\">http://localhost:80</a> 这种访问方式。<br>相比之下，host-only模式显得非常方便。打开 vagrantfile，将下面的注释去掉，便可以访问192.168.33.10机器上的服务了。 </p>\n<pre><code>config.vm.network &quot;private_network&quot;, ip:&quot;192.168.33.10&quot;\n</code></pre><h2 id=\"打包分发\"><a href=\"#打包分发\" class=\"headerlink\" title=\"打包分发\"></a>打包分发</h2><p>当配置好开发环境后，退出并关闭虚拟机。对开发环境进行打包。</p>\n<pre><code>$ vagrant package\n</code></pre><p>打包后，就会在当前目录下生成一个 package.box 的文件。可以分发这个文件给其他开发者。</p>\n<h2 id=\"集成预安装\"><a href=\"#集成预安装\" class=\"headerlink\" title=\"集成预安装\"></a>集成预安装</h2><p>vagrant 还提供预安装定制，打开 vagrantfile, 可以放开这些在文件末尾处有被注释的代码：</p>\n<pre><code>config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL\n    apt-get update\n    apt-get install -y apache2\nSHELL\n</code></pre><p>可以把需要安装的软件应用全部写在里面，在初次 vagrant up 的时候，虚拟机会预先执行这些命令。  </p>\n<p>如果不是初次运行，但又修改了这些命令。则可以进行重载vagrant。  </p>\n<pre><code>$ vagrant reload --provision\n</code></pre><p>也可以把这些配置写在shell脚本里面，让vagrant加载运行这些脚本。因此整个团队可以维护一个 vagrantfile 或者 shell 脚本，把这个文件放在github上，还可以监控它的版本，多么简单和容易啊！哈哈</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><pre><code>$ vagrant init  # 初始化\n$ vagrant up  # 启动\n$ vagrant halt  # 关闭\n$ vagrant reload  # 重启\n$ vagrant ssh  # ssh\n$ vagrant status  # 查看状态\n$ vagrant destroy  # 销毁\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><strong>vagrant</strong>是一款用来构建虚拟开发环境的工具，非常适合各类开发语言的web应用，因统一安装本地开发环境浪费的人力成本及时间成本，以及不可避免的“work on my machine”错误，将永久告别～  </p>\n<h2 id=\"安装virtualbox及vagrant\"><a href=\"#安装virtualbox及vagrant\" class=\"headerlink\" title=\"安装virtualbox及vagrant\"></a>安装virtualbox及vagrant</h2><p>vagrant对virtualbox支持的非常好。但不匹配的版本，加载box会发生或多或少的问题。    </p>\n<p>我的工作环境的软件版本是：<br>vagrant 1.6.3<br>virtualbox 4.2.12-84980</p>\n<h2 id=\"添加镜像\"><a href=\"#添加镜像\" class=\"headerlink\" title=\"添加镜像\"></a>添加镜像</h2><p>安装好后运行以下命令可以添加vagrant官方的box镜像。  </p>\n<pre><code>$ vagrant box add hashicorp/precise64\n</code></pre><p>这是一个标准的64bit的ubuntu系统。<br>如果要下载其他系统的镜像，可以在这里下载:<a href=\"https://atlas.hashicorp.com/boxes/search\" target=\"_blank\" rel=\"noopener\">https://atlas.hashicorp.com/boxes/search</a>   </p>\n<h2 id=\"初始化开发环境\"><a href=\"#初始化开发环境\" class=\"headerlink\" title=\"初始化开发环境\"></a>初始化开发环境</h2><p>切换到box文件所在目录，加载box文件及初始化 </p>\n<pre><code>$ cd ~/dev \n$ vagrant box add test test.box \n$ vagrant init test\n$ vagrant up\n</code></pre><h2 id=\"ssh登录\"><a href=\"#ssh登录\" class=\"headerlink\" title=\"ssh登录\"></a>ssh登录</h2><p>mac下ssh登录，虚拟机目录 /vagrant 就是宿主机的 ~/dev  </p>\n<pre><code>$ vagrant ssh\n$ cd /vagrant\n</code></pre><p><strong>windows用户注意:</strong> windows终端需要使用ssh客户端，比如putty等。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><p>vagrant 初始化成功后，会在初始化的目录里生成一个 vagrantfile 的配置文件，可以修改配置文件进行个性化的定制。  </p>\n<p>vagrant 默认是使用端口映射的方式将虚拟机的端口映射本地从而实现类似 <a href=\"http://localhost:80\" target=\"_blank\" rel=\"noopener\">http://localhost:80</a> 这种访问方式。<br>相比之下，host-only模式显得非常方便。打开 vagrantfile，将下面的注释去掉，便可以访问192.168.33.10机器上的服务了。 </p>\n<pre><code>config.vm.network &quot;private_network&quot;, ip:&quot;192.168.33.10&quot;\n</code></pre><h2 id=\"打包分发\"><a href=\"#打包分发\" class=\"headerlink\" title=\"打包分发\"></a>打包分发</h2><p>当配置好开发环境后，退出并关闭虚拟机。对开发环境进行打包。</p>\n<pre><code>$ vagrant package\n</code></pre><p>打包后，就会在当前目录下生成一个 package.box 的文件。可以分发这个文件给其他开发者。</p>\n<h2 id=\"集成预安装\"><a href=\"#集成预安装\" class=\"headerlink\" title=\"集成预安装\"></a>集成预安装</h2><p>vagrant 还提供预安装定制，打开 vagrantfile, 可以放开这些在文件末尾处有被注释的代码：</p>\n<pre><code>config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL\n    apt-get update\n    apt-get install -y apache2\nSHELL\n</code></pre><p>可以把需要安装的软件应用全部写在里面，在初次 vagrant up 的时候，虚拟机会预先执行这些命令。  </p>\n<p>如果不是初次运行，但又修改了这些命令。则可以进行重载vagrant。  </p>\n<pre><code>$ vagrant reload --provision\n</code></pre><p>也可以把这些配置写在shell脚本里面，让vagrant加载运行这些脚本。因此整个团队可以维护一个 vagrantfile 或者 shell 脚本，把这个文件放在github上，还可以监控它的版本，多么简单和容易啊！哈哈</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><pre><code>$ vagrant init  # 初始化\n$ vagrant up  # 启动\n$ vagrant halt  # 关闭\n$ vagrant reload  # 重启\n$ vagrant ssh  # ssh\n$ vagrant status  # 查看状态\n$ vagrant destroy  # 销毁\n</code></pre>"},{"title":"关于android资源文件路径","date":"2017-11-04T10:33:16.000Z","_content":"## android资源文件的目录：    \n\n* res/raw文件夹\n* asserts文件夹\n\n#### res/raw\n不能创建文件夹，只可创建文件。\n\n#### asserts\n* 可以创建文件夹。\n* AssertManager没有提供直接获取asserts文件夹folder路径的function。 \n","source":"_posts/关于android资源文件路径.md","raw":"---\ntitle: 关于android资源文件路径\ndate: 2017-11-04 18:33:16\ntags: [android]\n---\n## android资源文件的目录：    \n\n* res/raw文件夹\n* asserts文件夹\n\n#### res/raw\n不能创建文件夹，只可创建文件。\n\n#### asserts\n* 可以创建文件夹。\n* AssertManager没有提供直接获取asserts文件夹folder路径的function。 \n","slug":"关于android资源文件路径","published":1,"updated":"2017-11-06T02:32:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81if8001m8rlxk6xp4tp5","content":"<h2 id=\"android资源文件的目录：\"><a href=\"#android资源文件的目录：\" class=\"headerlink\" title=\"android资源文件的目录：\"></a>android资源文件的目录：</h2><ul>\n<li>res/raw文件夹</li>\n<li>asserts文件夹</li>\n</ul>\n<h4 id=\"res-raw\"><a href=\"#res-raw\" class=\"headerlink\" title=\"res/raw\"></a>res/raw</h4><p>不能创建文件夹，只可创建文件。</p>\n<h4 id=\"asserts\"><a href=\"#asserts\" class=\"headerlink\" title=\"asserts\"></a>asserts</h4><ul>\n<li>可以创建文件夹。</li>\n<li>AssertManager没有提供直接获取asserts文件夹folder路径的function。 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"android资源文件的目录：\"><a href=\"#android资源文件的目录：\" class=\"headerlink\" title=\"android资源文件的目录：\"></a>android资源文件的目录：</h2><ul>\n<li>res/raw文件夹</li>\n<li>asserts文件夹</li>\n</ul>\n<h4 id=\"res-raw\"><a href=\"#res-raw\" class=\"headerlink\" title=\"res/raw\"></a>res/raw</h4><p>不能创建文件夹，只可创建文件。</p>\n<h4 id=\"asserts\"><a href=\"#asserts\" class=\"headerlink\" title=\"asserts\"></a>asserts</h4><ul>\n<li>可以创建文件夹。</li>\n<li>AssertManager没有提供直接获取asserts文件夹folder路径的function。 </li>\n</ul>\n"},{"title":"搭建gitbucket的docker环境","date":"2016-12-27T05:49:09.000Z","_content":"为了更方便简洁的部署各种服务器应用，我在社内环境安装了docker。  \n从社内直连github有时极不稳定。社内团队协同开发，搭建本地的git仓库，我选择搭建gitbucket。  \n  \n    $ docker search gitbucket\n\n虽然没有docker官方放出的gitbucket镜像，但从列表里选stars最多也算靠谱点儿吧。  \n\n    $ docker pull f99aq8ove/gitbucket\n\ngithub也不网络稳定啊。。。下载两次都失败，寻找国内的镜像找到了daocloud。去daocloud官网去注册一下，然后配置docker加速器。  \n\n    $ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://5706b345.m.daocloud.io\n\n该脚本可以将 --registry-mirror 加入到你的docker配置文件 /etc/default/docker 中。\n\n配置好了之后，再次docker pull。成功！   \n启动镜像。  \n\n    $ docker run -d -p 8080:8080 -p 29418:29418 -v ${PWD}/gitbucket-data:/gitbucket f99aq8ove/gitbucket\n配置了映射端口8080是gitbucket的网页入口，映射端口29418是ssh的端口。  \n正常启动后，通过网页打开，显示正常。  \n创建用户组，创建新的repository。  \n在客户端local创建开发环境。  \n\n    $ mkdir xxxdir\n    $ cd xxxdir\n    $ touch README.md\n    $ git add .\n    $ git commit -m \"first commit\"\n    $ git remote add origin [URL]\n    $ git push origin master\n在进行push的时候，失败了，报错如下。  \n\n    fatal: unable to access 'http://xxx.git/': The requested URL returned error: 503\n    \n查了一下，有可能是在gitbucket服务器之前，设置了http代理所导致的。设置git http操作的debug。  \n\n    $ export GIT_CURL_VERBOSE = 1\n再次git push查看，的确有从http代理向gitbucket服务器发出的请求。但我不知道在哪里配置了http代理了。。。  \n使用git config命令查看配置文件  \n\n查看仓库级的config  \n\n    $ git config -local -l\n查看全局级的config\n\n    $ git config -global -l\n查看系统级的config\n\n    $ git config -system -l\n查看当前生效的配置\n\n    $ git config -l\nok！将设置的http代理全部注释掉，git push成功啦！  \n社内gitbucket搭建成功！\n\n","source":"_posts/搭建gitbucket的docker环境.md","raw":"---\ntitle: 搭建gitbucket的docker环境\ndate: 2016-12-27 13:49:09\ntags: [gitbucket,git,docker]\n---\n为了更方便简洁的部署各种服务器应用，我在社内环境安装了docker。  \n从社内直连github有时极不稳定。社内团队协同开发，搭建本地的git仓库，我选择搭建gitbucket。  \n  \n    $ docker search gitbucket\n\n虽然没有docker官方放出的gitbucket镜像，但从列表里选stars最多也算靠谱点儿吧。  \n\n    $ docker pull f99aq8ove/gitbucket\n\ngithub也不网络稳定啊。。。下载两次都失败，寻找国内的镜像找到了daocloud。去daocloud官网去注册一下，然后配置docker加速器。  \n\n    $ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://5706b345.m.daocloud.io\n\n该脚本可以将 --registry-mirror 加入到你的docker配置文件 /etc/default/docker 中。\n\n配置好了之后，再次docker pull。成功！   \n启动镜像。  \n\n    $ docker run -d -p 8080:8080 -p 29418:29418 -v ${PWD}/gitbucket-data:/gitbucket f99aq8ove/gitbucket\n配置了映射端口8080是gitbucket的网页入口，映射端口29418是ssh的端口。  \n正常启动后，通过网页打开，显示正常。  \n创建用户组，创建新的repository。  \n在客户端local创建开发环境。  \n\n    $ mkdir xxxdir\n    $ cd xxxdir\n    $ touch README.md\n    $ git add .\n    $ git commit -m \"first commit\"\n    $ git remote add origin [URL]\n    $ git push origin master\n在进行push的时候，失败了，报错如下。  \n\n    fatal: unable to access 'http://xxx.git/': The requested URL returned error: 503\n    \n查了一下，有可能是在gitbucket服务器之前，设置了http代理所导致的。设置git http操作的debug。  \n\n    $ export GIT_CURL_VERBOSE = 1\n再次git push查看，的确有从http代理向gitbucket服务器发出的请求。但我不知道在哪里配置了http代理了。。。  \n使用git config命令查看配置文件  \n\n查看仓库级的config  \n\n    $ git config -local -l\n查看全局级的config\n\n    $ git config -global -l\n查看系统级的config\n\n    $ git config -system -l\n查看当前生效的配置\n\n    $ git config -l\nok！将设置的http代理全部注释掉，git push成功啦！  \n社内gitbucket搭建成功！\n\n","slug":"搭建gitbucket的docker环境","published":1,"updated":"2016-12-27T08:14:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ifa001n8rlx86wwhe6d","content":"<p>为了更方便简洁的部署各种服务器应用，我在社内环境安装了docker。<br>从社内直连github有时极不稳定。社内团队协同开发，搭建本地的git仓库，我选择搭建gitbucket。  </p>\n<pre><code>$ docker search gitbucket\n</code></pre><p>虽然没有docker官方放出的gitbucket镜像，但从列表里选stars最多也算靠谱点儿吧。  </p>\n<pre><code>$ docker pull f99aq8ove/gitbucket\n</code></pre><p>github也不网络稳定啊。。。下载两次都失败，寻找国内的镜像找到了daocloud。去daocloud官网去注册一下，然后配置docker加速器。  </p>\n<pre><code>$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://5706b345.m.daocloud.io\n</code></pre><p>该脚本可以将 –registry-mirror 加入到你的docker配置文件 /etc/default/docker 中。</p>\n<p>配置好了之后，再次docker pull。成功！<br>启动镜像。  </p>\n<pre><code>$ docker run -d -p 8080:8080 -p 29418:29418 -v ${PWD}/gitbucket-data:/gitbucket f99aq8ove/gitbucket\n</code></pre><p>配置了映射端口8080是gitbucket的网页入口，映射端口29418是ssh的端口。<br>正常启动后，通过网页打开，显示正常。<br>创建用户组，创建新的repository。<br>在客户端local创建开发环境。  </p>\n<pre><code>$ mkdir xxxdir\n$ cd xxxdir\n$ touch README.md\n$ git add .\n$ git commit -m &quot;first commit&quot;\n$ git remote add origin [URL]\n$ git push origin master\n</code></pre><p>在进行push的时候，失败了，报错如下。  </p>\n<pre><code>fatal: unable to access &apos;http://xxx.git/&apos;: The requested URL returned error: 503\n</code></pre><p>查了一下，有可能是在gitbucket服务器之前，设置了http代理所导致的。设置git http操作的debug。  </p>\n<pre><code>$ export GIT_CURL_VERBOSE = 1\n</code></pre><p>再次git push查看，的确有从http代理向gitbucket服务器发出的请求。但我不知道在哪里配置了http代理了。。。<br>使用git config命令查看配置文件  </p>\n<p>查看仓库级的config  </p>\n<pre><code>$ git config -local -l\n</code></pre><p>查看全局级的config</p>\n<pre><code>$ git config -global -l\n</code></pre><p>查看系统级的config</p>\n<pre><code>$ git config -system -l\n</code></pre><p>查看当前生效的配置</p>\n<pre><code>$ git config -l\n</code></pre><p>ok！将设置的http代理全部注释掉，git push成功啦！<br>社内gitbucket搭建成功！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为了更方便简洁的部署各种服务器应用，我在社内环境安装了docker。<br>从社内直连github有时极不稳定。社内团队协同开发，搭建本地的git仓库，我选择搭建gitbucket。  </p>\n<pre><code>$ docker search gitbucket\n</code></pre><p>虽然没有docker官方放出的gitbucket镜像，但从列表里选stars最多也算靠谱点儿吧。  </p>\n<pre><code>$ docker pull f99aq8ove/gitbucket\n</code></pre><p>github也不网络稳定啊。。。下载两次都失败，寻找国内的镜像找到了daocloud。去daocloud官网去注册一下，然后配置docker加速器。  </p>\n<pre><code>$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://5706b345.m.daocloud.io\n</code></pre><p>该脚本可以将 –registry-mirror 加入到你的docker配置文件 /etc/default/docker 中。</p>\n<p>配置好了之后，再次docker pull。成功！<br>启动镜像。  </p>\n<pre><code>$ docker run -d -p 8080:8080 -p 29418:29418 -v ${PWD}/gitbucket-data:/gitbucket f99aq8ove/gitbucket\n</code></pre><p>配置了映射端口8080是gitbucket的网页入口，映射端口29418是ssh的端口。<br>正常启动后，通过网页打开，显示正常。<br>创建用户组，创建新的repository。<br>在客户端local创建开发环境。  </p>\n<pre><code>$ mkdir xxxdir\n$ cd xxxdir\n$ touch README.md\n$ git add .\n$ git commit -m &quot;first commit&quot;\n$ git remote add origin [URL]\n$ git push origin master\n</code></pre><p>在进行push的时候，失败了，报错如下。  </p>\n<pre><code>fatal: unable to access &apos;http://xxx.git/&apos;: The requested URL returned error: 503\n</code></pre><p>查了一下，有可能是在gitbucket服务器之前，设置了http代理所导致的。设置git http操作的debug。  </p>\n<pre><code>$ export GIT_CURL_VERBOSE = 1\n</code></pre><p>再次git push查看，的确有从http代理向gitbucket服务器发出的请求。但我不知道在哪里配置了http代理了。。。<br>使用git config命令查看配置文件  </p>\n<p>查看仓库级的config  </p>\n<pre><code>$ git config -local -l\n</code></pre><p>查看全局级的config</p>\n<pre><code>$ git config -global -l\n</code></pre><p>查看系统级的config</p>\n<pre><code>$ git config -system -l\n</code></pre><p>查看当前生效的配置</p>\n<pre><code>$ git config -l\n</code></pre><p>ok！将设置的http代理全部注释掉，git push成功啦！<br>社内gitbucket搭建成功！</p>\n"},{"title":"配置gitbucket的webhook触发jenkins自动构建","date":"2017-11-20T04:10:22.000Z","_content":"\n## jenkins安装gitbucket插件\n在jenkins中安装插件:**Gitbucket Plugin**   \n安装好了之后配置构建触发器。    \n![构建触发器](http://obksgg9lx.bkt.clouddn.com/triggle.png)\n\n## gitbucket设置webhook\n使用root管理员账户进入需要设置webhook的具体项目中Settings->Service Hooks菜单下，配置gitbucket的webhook。    \n![配置webhook](http://obksgg9lx.bkt.clouddn.com/gitbucket.png)\n\n## 自动触发\nsource提交git。    \n![push状态](http://obksgg9lx.bkt.clouddn.com/push-status.png)\n\n自动触发构建。    \n![自动构建](http://obksgg9lx.bkt.clouddn.com/console.png)","source":"_posts/配置gitbucket的webhook触发jenkins自动构建.md","raw":"---\ntitle: 配置gitbucket的webhook触发jenkins自动构建\ndate: 2017-11-20 12:10:22\ntags: [gitbucket, webhook, jenkins, 持续部署]\n---\n\n## jenkins安装gitbucket插件\n在jenkins中安装插件:**Gitbucket Plugin**   \n安装好了之后配置构建触发器。    \n![构建触发器](http://obksgg9lx.bkt.clouddn.com/triggle.png)\n\n## gitbucket设置webhook\n使用root管理员账户进入需要设置webhook的具体项目中Settings->Service Hooks菜单下，配置gitbucket的webhook。    \n![配置webhook](http://obksgg9lx.bkt.clouddn.com/gitbucket.png)\n\n## 自动触发\nsource提交git。    \n![push状态](http://obksgg9lx.bkt.clouddn.com/push-status.png)\n\n自动触发构建。    \n![自动构建](http://obksgg9lx.bkt.clouddn.com/console.png)","slug":"配置gitbucket的webhook触发jenkins自动构建","published":1,"updated":"2017-11-20T06:09:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ifc001p8rlx1lni74j2","content":"<h2 id=\"jenkins安装gitbucket插件\"><a href=\"#jenkins安装gitbucket插件\" class=\"headerlink\" title=\"jenkins安装gitbucket插件\"></a>jenkins安装gitbucket插件</h2><p>在jenkins中安装插件:<strong>Gitbucket Plugin</strong><br>安装好了之后配置构建触发器。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/triggle.png\" alt=\"构建触发器\"></p>\n<h2 id=\"gitbucket设置webhook\"><a href=\"#gitbucket设置webhook\" class=\"headerlink\" title=\"gitbucket设置webhook\"></a>gitbucket设置webhook</h2><p>使用root管理员账户进入需要设置webhook的具体项目中Settings-&gt;Service Hooks菜单下，配置gitbucket的webhook。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/gitbucket.png\" alt=\"配置webhook\"></p>\n<h2 id=\"自动触发\"><a href=\"#自动触发\" class=\"headerlink\" title=\"自动触发\"></a>自动触发</h2><p>source提交git。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/push-status.png\" alt=\"push状态\"></p>\n<p>自动触发构建。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/console.png\" alt=\"自动构建\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"jenkins安装gitbucket插件\"><a href=\"#jenkins安装gitbucket插件\" class=\"headerlink\" title=\"jenkins安装gitbucket插件\"></a>jenkins安装gitbucket插件</h2><p>在jenkins中安装插件:<strong>Gitbucket Plugin</strong><br>安装好了之后配置构建触发器。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/triggle.png\" alt=\"构建触发器\"></p>\n<h2 id=\"gitbucket设置webhook\"><a href=\"#gitbucket设置webhook\" class=\"headerlink\" title=\"gitbucket设置webhook\"></a>gitbucket设置webhook</h2><p>使用root管理员账户进入需要设置webhook的具体项目中Settings-&gt;Service Hooks菜单下，配置gitbucket的webhook。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/gitbucket.png\" alt=\"配置webhook\"></p>\n<h2 id=\"自动触发\"><a href=\"#自动触发\" class=\"headerlink\" title=\"自动触发\"></a>自动触发</h2><p>source提交git。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/push-status.png\" alt=\"push状态\"></p>\n<p>自动触发构建。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/console.png\" alt=\"自动构建\"></p>\n"},{"title":"认识javascript","date":"2016-08-08T09:08:33.000Z","_content":"## javascript基础\n\n#### 声明\n* 声明变量不用var时，该变量为全局变量\n\n#### 数据类型\n* Number  \n * *整型常量*(10进制\\8进制\\16进制)  \n \t 十六进制以0x或0X开头, 例如: 0x8a  \n    八进制必须以0开头, 例如: 0123  \n    十进制的第一位不能是0(数字0除外), 例如: 123\n * *实型常量*  \n   12.32, 193.98, 5E7, 4e5等\n  \n* Boolean\n* String  \n * \"abc\"，'abc'  \n   双引号会搜索引号内的内容是否含有变量，有则输出其值，没有则输出原有内容  \n   单引号则不会检测内容，因此效率更高\n * 特殊字符，需要以反斜杠(\\)后跟一个普通字符来表示  \n   例如: \\r, \\n, \\t, \\b, \\'\n* null常量\n* undefined常量\n* 特殊数值  \n  NaN, Infinity(无穷大), isNaN(), isFinite()\n\n#### 逻辑运算符\n* && 逻辑与\n* || 逻辑或\n* ! 逻辑非\n\n## 定义一个类\n    function Person(name) {\n    \tthis.name = name;\n    }\n## 一切都是对象\n类(函数)也是对象\n\n## 创建对象\n    var p = new Person(\"张三\")\n\n## 闭包closure\n函数内部可以直接读取全局变量。  \n     \n        var n = 999;\n        \n        function f1() {\n        \talert(n);\n        }\n        \n        f1(); // 999\n函数外部无法读取函数内的局部变量。  \n        \n        function f1() {\n        \tvar n = 999;\n        }\n        \n        alert(n); // error\n利用闭包，从函数外部读取函数内的局部变量。\n\n        function f1() {\n        \tvar n = 999;\n        \t\n        \tfunction f2() {\n        \t\talert(n);\n        \t}\n        \t\n        \treturn f2;\n        }\n        \n        var result = f1();\n        result(); // 999\n\n## 作用域scope（上下文）\n上下文对象就是使用this指针，即被调用函数所处的环境。上下文对象在一个函数内部引用调用它的对象本身。  \n\n    var someuser = {\n    \tname: 'byvoid',\n    \tfunc: function() {\n    \t\tconsole.log(this.name);\n    \t}\n    };\n    \n    var foo = {\n    \tname: 'foobar'\n    };\n    \n    someuser.func(); // byvoid\n    \n    foo.func = someuser.func;\n    foo.func(); // foobar\n    \n    name = 'global';\n    func = someuser.func;\n    func(); // globar\n\n## prototype\n利用prototype可以扩展js类。  \n    \n    Number.prototype.add = function(v) {\n    \treturn this + v;\n    }    \n    \n    var d = 6;\n    d.add(8).add(9); // d = 6 + 8 + 9\n\n扩展自定义的类。\n\n    function Person(name) {\n    \tthis.name = name;\n    }\n    \n    Person.prototype.sayHello = function() {\n    \talert(this.name);\n    }\n    \n    var p = new Person(\"zhangsan\");\n    p.sayHello();\n\n## 继承\nclassB继承classA\n\n    function classA(name) {\n    \tthis.name = name;\n    \tthis.sayHello = function() {\n    \t\talert(this.name);\n    \t}\n    }\n方法1\n    \n    function classB(name) {\n    \tthis.tempMethod = classA;\n    \tthis.tempMethod(name);\n    }\n方法2\n\n    function classB(name) {\n    \tclassA.call(this, name);\n    }\n方法3\n\n    function classB(name) {\n    \tclassA.apply(this, [name]);\n    }\n调用classB\n\n    var b = new classB(\"lisa\");\n    b.sayHello();\n\n## 可变参数\n在js的世界里，内置属性arguments可以接收可辨参数。\n\n    function sum() {\n    \tvar s = 0;\n    \tfor(var i = 0; i < arguments.length; i++) {\n    \t\ts+ = arguments[i];\n    \t}\n    \t\n    \treturn s;\n    }\n    \n    alert(sum(1,4,5));\n    alert(sum(12,15,19,21,51));\n\n\n","source":"_posts/认识javascript.md","raw":"---\ntitle: 认识javascript\ndate: 2016-08-08 17:08:33\ntags: [js, 闭包, 作用域, 上下文]\n---\n## javascript基础\n\n#### 声明\n* 声明变量不用var时，该变量为全局变量\n\n#### 数据类型\n* Number  \n * *整型常量*(10进制\\8进制\\16进制)  \n \t 十六进制以0x或0X开头, 例如: 0x8a  \n    八进制必须以0开头, 例如: 0123  \n    十进制的第一位不能是0(数字0除外), 例如: 123\n * *实型常量*  \n   12.32, 193.98, 5E7, 4e5等\n  \n* Boolean\n* String  \n * \"abc\"，'abc'  \n   双引号会搜索引号内的内容是否含有变量，有则输出其值，没有则输出原有内容  \n   单引号则不会检测内容，因此效率更高\n * 特殊字符，需要以反斜杠(\\)后跟一个普通字符来表示  \n   例如: \\r, \\n, \\t, \\b, \\'\n* null常量\n* undefined常量\n* 特殊数值  \n  NaN, Infinity(无穷大), isNaN(), isFinite()\n\n#### 逻辑运算符\n* && 逻辑与\n* || 逻辑或\n* ! 逻辑非\n\n## 定义一个类\n    function Person(name) {\n    \tthis.name = name;\n    }\n## 一切都是对象\n类(函数)也是对象\n\n## 创建对象\n    var p = new Person(\"张三\")\n\n## 闭包closure\n函数内部可以直接读取全局变量。  \n     \n        var n = 999;\n        \n        function f1() {\n        \talert(n);\n        }\n        \n        f1(); // 999\n函数外部无法读取函数内的局部变量。  \n        \n        function f1() {\n        \tvar n = 999;\n        }\n        \n        alert(n); // error\n利用闭包，从函数外部读取函数内的局部变量。\n\n        function f1() {\n        \tvar n = 999;\n        \t\n        \tfunction f2() {\n        \t\talert(n);\n        \t}\n        \t\n        \treturn f2;\n        }\n        \n        var result = f1();\n        result(); // 999\n\n## 作用域scope（上下文）\n上下文对象就是使用this指针，即被调用函数所处的环境。上下文对象在一个函数内部引用调用它的对象本身。  \n\n    var someuser = {\n    \tname: 'byvoid',\n    \tfunc: function() {\n    \t\tconsole.log(this.name);\n    \t}\n    };\n    \n    var foo = {\n    \tname: 'foobar'\n    };\n    \n    someuser.func(); // byvoid\n    \n    foo.func = someuser.func;\n    foo.func(); // foobar\n    \n    name = 'global';\n    func = someuser.func;\n    func(); // globar\n\n## prototype\n利用prototype可以扩展js类。  \n    \n    Number.prototype.add = function(v) {\n    \treturn this + v;\n    }    \n    \n    var d = 6;\n    d.add(8).add(9); // d = 6 + 8 + 9\n\n扩展自定义的类。\n\n    function Person(name) {\n    \tthis.name = name;\n    }\n    \n    Person.prototype.sayHello = function() {\n    \talert(this.name);\n    }\n    \n    var p = new Person(\"zhangsan\");\n    p.sayHello();\n\n## 继承\nclassB继承classA\n\n    function classA(name) {\n    \tthis.name = name;\n    \tthis.sayHello = function() {\n    \t\talert(this.name);\n    \t}\n    }\n方法1\n    \n    function classB(name) {\n    \tthis.tempMethod = classA;\n    \tthis.tempMethod(name);\n    }\n方法2\n\n    function classB(name) {\n    \tclassA.call(this, name);\n    }\n方法3\n\n    function classB(name) {\n    \tclassA.apply(this, [name]);\n    }\n调用classB\n\n    var b = new classB(\"lisa\");\n    b.sayHello();\n\n## 可变参数\n在js的世界里，内置属性arguments可以接收可辨参数。\n\n    function sum() {\n    \tvar s = 0;\n    \tfor(var i = 0; i < arguments.length; i++) {\n    \t\ts+ = arguments[i];\n    \t}\n    \t\n    \treturn s;\n    }\n    \n    alert(sum(1,4,5));\n    alert(sum(12,15,19,21,51));\n\n\n","slug":"认识javascript","published":1,"updated":"2016-08-08T11:57:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw81ifd001q8rlx9up09a2f","content":"<h2 id=\"javascript基础\"><a href=\"#javascript基础\" class=\"headerlink\" title=\"javascript基础\"></a>javascript基础</h2><h4 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h4><ul>\n<li>声明变量不用var时，该变量为全局变量</li>\n</ul>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li><p>Number  </p>\n<ul>\n<li><em>整型常量</em>(10进制\\8进制\\16进制)<br>  十六进制以0x或0X开头, 例如: 0x8a<br>八进制必须以0开头, 例如: 0123<br>十进制的第一位不能是0(数字0除外), 例如: 123</li>\n<li><em>实型常量</em><br>12.32, 193.98, 5E7, 4e5等</li>\n</ul>\n</li>\n<li><p>Boolean</p>\n</li>\n<li>String  <ul>\n<li>“abc”，’abc’<br>双引号会搜索引号内的内容是否含有变量，有则输出其值，没有则输出原有内容<br>单引号则不会检测内容，因此效率更高</li>\n<li>特殊字符，需要以反斜杠()后跟一个普通字符来表示<br>例如: \\r, \\n, \\t, \\b, \\’</li>\n</ul>\n</li>\n<li>null常量</li>\n<li>undefined常量</li>\n<li>特殊数值<br>NaN, Infinity(无穷大), isNaN(), isFinite()</li>\n</ul>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><ul>\n<li>&amp;&amp; 逻辑与</li>\n<li>|| 逻辑或</li>\n<li>! 逻辑非</li>\n</ul>\n<h2 id=\"定义一个类\"><a href=\"#定义一个类\" class=\"headerlink\" title=\"定义一个类\"></a>定义一个类</h2><pre><code>function Person(name) {\n    this.name = name;\n}\n</code></pre><h2 id=\"一切都是对象\"><a href=\"#一切都是对象\" class=\"headerlink\" title=\"一切都是对象\"></a>一切都是对象</h2><p>类(函数)也是对象</p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><pre><code>var p = new Person(&quot;张三&quot;)\n</code></pre><h2 id=\"闭包closure\"><a href=\"#闭包closure\" class=\"headerlink\" title=\"闭包closure\"></a>闭包closure</h2><p>函数内部可以直接读取全局变量。  </p>\n<pre><code>var n = 999;\n\nfunction f1() {\n    alert(n);\n}\n\nf1(); // 999\n</code></pre><p>函数外部无法读取函数内的局部变量。  </p>\n<pre><code>function f1() {\n    var n = 999;\n}\n\nalert(n); // error\n</code></pre><p>利用闭包，从函数外部读取函数内的局部变量。</p>\n<pre><code>function f1() {\n    var n = 999;\n\n    function f2() {\n        alert(n);\n    }\n\n    return f2;\n}\n\nvar result = f1();\nresult(); // 999\n</code></pre><h2 id=\"作用域scope（上下文）\"><a href=\"#作用域scope（上下文）\" class=\"headerlink\" title=\"作用域scope（上下文）\"></a>作用域scope（上下文）</h2><p>上下文对象就是使用this指针，即被调用函数所处的环境。上下文对象在一个函数内部引用调用它的对象本身。  </p>\n<pre><code>var someuser = {\n    name: &apos;byvoid&apos;,\n    func: function() {\n        console.log(this.name);\n    }\n};\n\nvar foo = {\n    name: &apos;foobar&apos;\n};\n\nsomeuser.func(); // byvoid\n\nfoo.func = someuser.func;\nfoo.func(); // foobar\n\nname = &apos;global&apos;;\nfunc = someuser.func;\nfunc(); // globar\n</code></pre><h2 id=\"prototype\"><a href=\"#prototype\" class=\"headerlink\" title=\"prototype\"></a>prototype</h2><p>利用prototype可以扩展js类。  </p>\n<pre><code>Number.prototype.add = function(v) {\n    return this + v;\n}    \n\nvar d = 6;\nd.add(8).add(9); // d = 6 + 8 + 9\n</code></pre><p>扩展自定义的类。</p>\n<pre><code>function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.sayHello = function() {\n    alert(this.name);\n}\n\nvar p = new Person(&quot;zhangsan&quot;);\np.sayHello();\n</code></pre><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>classB继承classA</p>\n<pre><code>function classA(name) {\n    this.name = name;\n    this.sayHello = function() {\n        alert(this.name);\n    }\n}\n</code></pre><p>方法1</p>\n<pre><code>function classB(name) {\n    this.tempMethod = classA;\n    this.tempMethod(name);\n}\n</code></pre><p>方法2</p>\n<pre><code>function classB(name) {\n    classA.call(this, name);\n}\n</code></pre><p>方法3</p>\n<pre><code>function classB(name) {\n    classA.apply(this, [name]);\n}\n</code></pre><p>调用classB</p>\n<pre><code>var b = new classB(&quot;lisa&quot;);\nb.sayHello();\n</code></pre><h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>在js的世界里，内置属性arguments可以接收可辨参数。</p>\n<pre><code>function sum() {\n    var s = 0;\n    for(var i = 0; i &lt; arguments.length; i++) {\n        s+ = arguments[i];\n    }\n\n    return s;\n}\n\nalert(sum(1,4,5));\nalert(sum(12,15,19,21,51));\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"javascript基础\"><a href=\"#javascript基础\" class=\"headerlink\" title=\"javascript基础\"></a>javascript基础</h2><h4 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h4><ul>\n<li>声明变量不用var时，该变量为全局变量</li>\n</ul>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li><p>Number  </p>\n<ul>\n<li><em>整型常量</em>(10进制\\8进制\\16进制)<br>  十六进制以0x或0X开头, 例如: 0x8a<br>八进制必须以0开头, 例如: 0123<br>十进制的第一位不能是0(数字0除外), 例如: 123</li>\n<li><em>实型常量</em><br>12.32, 193.98, 5E7, 4e5等</li>\n</ul>\n</li>\n<li><p>Boolean</p>\n</li>\n<li>String  <ul>\n<li>“abc”，’abc’<br>双引号会搜索引号内的内容是否含有变量，有则输出其值，没有则输出原有内容<br>单引号则不会检测内容，因此效率更高</li>\n<li>特殊字符，需要以反斜杠()后跟一个普通字符来表示<br>例如: \\r, \\n, \\t, \\b, \\’</li>\n</ul>\n</li>\n<li>null常量</li>\n<li>undefined常量</li>\n<li>特殊数值<br>NaN, Infinity(无穷大), isNaN(), isFinite()</li>\n</ul>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><ul>\n<li>&amp;&amp; 逻辑与</li>\n<li>|| 逻辑或</li>\n<li>! 逻辑非</li>\n</ul>\n<h2 id=\"定义一个类\"><a href=\"#定义一个类\" class=\"headerlink\" title=\"定义一个类\"></a>定义一个类</h2><pre><code>function Person(name) {\n    this.name = name;\n}\n</code></pre><h2 id=\"一切都是对象\"><a href=\"#一切都是对象\" class=\"headerlink\" title=\"一切都是对象\"></a>一切都是对象</h2><p>类(函数)也是对象</p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><pre><code>var p = new Person(&quot;张三&quot;)\n</code></pre><h2 id=\"闭包closure\"><a href=\"#闭包closure\" class=\"headerlink\" title=\"闭包closure\"></a>闭包closure</h2><p>函数内部可以直接读取全局变量。  </p>\n<pre><code>var n = 999;\n\nfunction f1() {\n    alert(n);\n}\n\nf1(); // 999\n</code></pre><p>函数外部无法读取函数内的局部变量。  </p>\n<pre><code>function f1() {\n    var n = 999;\n}\n\nalert(n); // error\n</code></pre><p>利用闭包，从函数外部读取函数内的局部变量。</p>\n<pre><code>function f1() {\n    var n = 999;\n\n    function f2() {\n        alert(n);\n    }\n\n    return f2;\n}\n\nvar result = f1();\nresult(); // 999\n</code></pre><h2 id=\"作用域scope（上下文）\"><a href=\"#作用域scope（上下文）\" class=\"headerlink\" title=\"作用域scope（上下文）\"></a>作用域scope（上下文）</h2><p>上下文对象就是使用this指针，即被调用函数所处的环境。上下文对象在一个函数内部引用调用它的对象本身。  </p>\n<pre><code>var someuser = {\n    name: &apos;byvoid&apos;,\n    func: function() {\n        console.log(this.name);\n    }\n};\n\nvar foo = {\n    name: &apos;foobar&apos;\n};\n\nsomeuser.func(); // byvoid\n\nfoo.func = someuser.func;\nfoo.func(); // foobar\n\nname = &apos;global&apos;;\nfunc = someuser.func;\nfunc(); // globar\n</code></pre><h2 id=\"prototype\"><a href=\"#prototype\" class=\"headerlink\" title=\"prototype\"></a>prototype</h2><p>利用prototype可以扩展js类。  </p>\n<pre><code>Number.prototype.add = function(v) {\n    return this + v;\n}    \n\nvar d = 6;\nd.add(8).add(9); // d = 6 + 8 + 9\n</code></pre><p>扩展自定义的类。</p>\n<pre><code>function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.sayHello = function() {\n    alert(this.name);\n}\n\nvar p = new Person(&quot;zhangsan&quot;);\np.sayHello();\n</code></pre><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>classB继承classA</p>\n<pre><code>function classA(name) {\n    this.name = name;\n    this.sayHello = function() {\n        alert(this.name);\n    }\n}\n</code></pre><p>方法1</p>\n<pre><code>function classB(name) {\n    this.tempMethod = classA;\n    this.tempMethod(name);\n}\n</code></pre><p>方法2</p>\n<pre><code>function classB(name) {\n    classA.call(this, name);\n}\n</code></pre><p>方法3</p>\n<pre><code>function classB(name) {\n    classA.apply(this, [name]);\n}\n</code></pre><p>调用classB</p>\n<pre><code>var b = new classB(&quot;lisa&quot;);\nb.sayHello();\n</code></pre><h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>在js的世界里，内置属性arguments可以接收可辨参数。</p>\n<pre><code>function sum() {\n    var s = 0;\n    for(var i = 0; i &lt; arguments.length; i++) {\n        s+ = arguments[i];\n    }\n\n    return s;\n}\n\nalert(sum(1,4,5));\nalert(sum(12,15,19,21,51));\n</code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjaw81ic800008rlx0rmtv5z8","tag_id":"cjaw81icg00028rlxsfftspng","_id":"cjaw81idp000k8rlxdyzjelxz"},{"post_id":"cjaw81ic800008rlx0rmtv5z8","tag_id":"cjaw81icq00058rlxhbbkeicq","_id":"cjaw81idr000m8rlxn4ntl61v"},{"post_id":"cjaw81ic800008rlx0rmtv5z8","tag_id":"cjaw81id100098rlxuw6zk2cd","_id":"cjaw81idt000p8rlxjlz86cus"},{"post_id":"cjaw81ic800008rlx0rmtv5z8","tag_id":"cjaw81idc000c8rlxltejqvig","_id":"cjaw81idw000r8rlxgc7coakm"},{"post_id":"cjaw81ic800008rlx0rmtv5z8","tag_id":"cjaw81idh000f8rlxricxaocp","_id":"cjaw81idz000u8rlx94uegt7r"},{"post_id":"cjaw81ice00018rlxdyvmj1yu","tag_id":"cjaw81idm000i8rlxoejol8yx","_id":"cjaw81ie2000w8rlx1gea7xv4"},{"post_id":"cjaw81icm00038rlxib4j8hlt","tag_id":"cjaw81idt000o8rlxxkmb38lv","_id":"cjaw81iee00138rlxw9tljl4o"},{"post_id":"cjaw81icm00038rlxib4j8hlt","tag_id":"cjaw81idy000t8rlx6wwlu453","_id":"cjaw81ieg00158rlxtnnmhvdb"},{"post_id":"cjaw81icm00038rlxib4j8hlt","tag_id":"cjaw81ie8000y8rlxutd63tps","_id":"cjaw81iel00188rlx3vij7t3y"},{"post_id":"cjaw81ico00048rlxuij6n0bh","tag_id":"cjaw81ied00118rlxyh5ole5c","_id":"cjaw81ien001a8rlxdb0j6e39"},{"post_id":"cjaw81icq00068rlx7swyxeq7","tag_id":"cjaw81iek00178rlxwos1aeq2","_id":"cjaw81iev001h8rlxttrlw7yk"},{"post_id":"cjaw81icq00068rlx7swyxeq7","tag_id":"cjaw81ieq001c8rlxqrm7nluz","_id":"cjaw81if0001j8rlxvfp3ylhs"},{"post_id":"cjaw81ics00078rlxx1qrs5sw","tag_id":"cjaw81iet001f8rlxz5t6yb04","_id":"cjaw81ifh001u8rlx95h9syfb"},{"post_id":"cjaw81ics00078rlxx1qrs5sw","tag_id":"cjaw81if1001k8rlx2nzjtsgc","_id":"cjaw81ifh001v8rlxiq8vugcy"},{"post_id":"cjaw81ics00078rlxx1qrs5sw","tag_id":"cjaw81ifb001o8rlxhw58b1d0","_id":"cjaw81ifi001x8rlxzj8k5zno"},{"post_id":"cjaw81ics00078rlxx1qrs5sw","tag_id":"cjaw81ife001r8rlxw6r5gbdk","_id":"cjaw81ifi001y8rlxl4gfbj2k"},{"post_id":"cjaw81ics00078rlxx1qrs5sw","tag_id":"cjaw81iff001s8rlxhxav29mh","_id":"cjaw81ifk00208rlxce1mqj19"},{"post_id":"cjaw81icv00088rlxaajzgy2o","tag_id":"cjaw81ifg001t8rlxyu2klyvv","_id":"cjaw81ifl00218rlxmy2u62c9"},{"post_id":"cjaw81icv00088rlxaajzgy2o","tag_id":"cjaw81ifh001w8rlxlziligjt","_id":"cjaw81ifm00238rlxwcu0liox"},{"post_id":"cjaw81id4000a8rlxj5tyc3yl","tag_id":"cjaw81idh000f8rlxricxaocp","_id":"cjaw81ifn00258rlxphxhoird"},{"post_id":"cjaw81id4000a8rlxj5tyc3yl","tag_id":"cjaw81ifl00228rlx265bz86p","_id":"cjaw81ifn00268rlx4qbrh02g"},{"post_id":"cjaw81ida000b8rlxfis2ofyr","tag_id":"cjaw81idh000f8rlxricxaocp","_id":"cjaw81ifo00298rlxp78fg8zk"},{"post_id":"cjaw81ida000b8rlxfis2ofyr","tag_id":"cjaw81ifn00278rlxqiyl22u5","_id":"cjaw81ifo002a8rlx8pu6n6cn"},{"post_id":"cjaw81idd000d8rlxcdt98i85","tag_id":"cjaw81idh000f8rlxricxaocp","_id":"cjaw81ifq002d8rlxfzxh4538"},{"post_id":"cjaw81idd000d8rlxcdt98i85","tag_id":"cjaw81ifo002b8rlxqd8gxwyr","_id":"cjaw81ifq002e8rlxt9ely62t"},{"post_id":"cjaw81idf000e8rlx0xks0ako","tag_id":"cjaw81ifb001o8rlxhw58b1d0","_id":"cjaw81ifr002i8rlxxzhhmscm"},{"post_id":"cjaw81idf000e8rlx0xks0ako","tag_id":"cjaw81ifq002f8rlx9w714qgo","_id":"cjaw81ifr002j8rlxc8wqhtr3"},{"post_id":"cjaw81idf000e8rlx0xks0ako","tag_id":"cjaw81ifr002g8rlxb42v2fum","_id":"cjaw81ifs002l8rlxxi5h0yn2"},{"post_id":"cjaw81idi000g8rlx571tgg7v","tag_id":"cjaw81ifr002h8rlxeafftval","_id":"cjaw81ifu002o8rlxwvvmbagz"},{"post_id":"cjaw81idi000g8rlx571tgg7v","tag_id":"cjaw81ifb001o8rlxhw58b1d0","_id":"cjaw81ifu002p8rlxl0eg30gl"},{"post_id":"cjaw81idi000g8rlx571tgg7v","tag_id":"cjaw81ifs002m8rlxb0okwlw2","_id":"cjaw81ifv002r8rlxag8aipth"},{"post_id":"cjaw81idk000h8rlxahu4s1ao","tag_id":"cjaw81idh000f8rlxricxaocp","_id":"cjaw81ifw002u8rlxp07bydxq"},{"post_id":"cjaw81idk000h8rlxahu4s1ao","tag_id":"cjaw81ieq001c8rlxqrm7nluz","_id":"cjaw81ifw002v8rlxt1ni6dfk"},{"post_id":"cjaw81idk000h8rlxahu4s1ao","tag_id":"cjaw81ifu002q8rlxjg4f3q6o","_id":"cjaw81ifx002x8rlxlkageuy9"},{"post_id":"cjaw81idk000h8rlxahu4s1ao","tag_id":"cjaw81ifv002s8rlx7z26h07x","_id":"cjaw81ifx002y8rlxxc1v8bi5"},{"post_id":"cjaw81idn000j8rlxgvzsfdhk","tag_id":"cjaw81idh000f8rlxricxaocp","_id":"cjaw81ify00308rlxfg81a7sd"},{"post_id":"cjaw81idn000j8rlxgvzsfdhk","tag_id":"cjaw81ifv002t8rlxmk68imcn","_id":"cjaw81ify00318rlxzt5865og"},{"post_id":"cjaw81idq000l8rlxtmlq94u4","tag_id":"cjaw81ifw002w8rlxxdpwj7e5","_id":"cjaw81ify00338rlx6aobuvcc"},{"post_id":"cjaw81ids000n8rlxymcc9stf","tag_id":"cjaw81idc000c8rlxltejqvig","_id":"cjaw81ify00348rlxv8o0dejf"},{"post_id":"cjaw81ids000n8rlxymcc9stf","tag_id":"cjaw81ifx002z8rlx79sa93ik","_id":"cjaw81ify00358rlxzz8u5gh3"},{"post_id":"cjaw81ids000n8rlxymcc9stf","tag_id":"cjaw81idh000f8rlxricxaocp","_id":"cjaw81ig000378rlxh7zi5xa5"},{"post_id":"cjaw81idu000q8rlx9flr3x8g","tag_id":"cjaw81ify00328rlxlv6mi6gm","_id":"cjaw81ig2003a8rlxamtrnles"},{"post_id":"cjaw81idu000q8rlx9flr3x8g","tag_id":"cjaw81ifz00368rlx61iuvn1y","_id":"cjaw81ig2003b8rlxa0ax2syx"},{"post_id":"cjaw81idu000q8rlx9flr3x8g","tag_id":"cjaw81ifb001o8rlxhw58b1d0","_id":"cjaw81ig4003d8rlxkqejzs0z"},{"post_id":"cjaw81idw000s8rlxnxkhxcv0","tag_id":"cjaw81ifw002w8rlxxdpwj7e5","_id":"cjaw81ig4003e8rlxazudbcby"},{"post_id":"cjaw81ie0000v8rlx4xko7x4s","tag_id":"cjaw81ig3003c8rlx6g81o7mx","_id":"cjaw81ig5003h8rlxyufq6hb9"},{"post_id":"cjaw81ie0000v8rlx4xko7x4s","tag_id":"cjaw81ig4003f8rlxwnphdbnk","_id":"cjaw81ig6003i8rlxht7wr2e9"},{"post_id":"cjaw81ie3000x8rlxp1gj97a3","tag_id":"cjaw81idh000f8rlxricxaocp","_id":"cjaw81ig7003l8rlx05894si8"},{"post_id":"cjaw81ie3000x8rlxp1gj97a3","tag_id":"cjaw81ig4003g8rlxl9zm4hk7","_id":"cjaw81ig7003m8rlxbjv3aamr"},{"post_id":"cjaw81ie3000x8rlxp1gj97a3","tag_id":"cjaw81ig6003j8rlxoun09k5j","_id":"cjaw81iga003o8rlxco5nwq6g"},{"post_id":"cjaw81ie9000z8rlx3pfqyyz3","tag_id":"cjaw81ig6003k8rlxvp9y4m24","_id":"cjaw81igb003r8rlxc0256f5l"},{"post_id":"cjaw81ie9000z8rlx3pfqyyz3","tag_id":"cjaw81ig8003n8rlxhree7g8r","_id":"cjaw81igc003s8rlxau2eu210"},{"post_id":"cjaw81ie9000z8rlx3pfqyyz3","tag_id":"cjaw81iga003p8rlx6dul911a","_id":"cjaw81igd003u8rlxzbt21hq6"},{"post_id":"cjaw81ied00128rlxi18stmu1","tag_id":"cjaw81ifr002h8rlxeafftval","_id":"cjaw81igd003v8rlxc4frlbqe"},{"post_id":"cjaw81iee00148rlx1ezmuy25","tag_id":"cjaw81igc003t8rlxmzyskgq9","_id":"cjaw81ige003y8rlxmh69za74"},{"post_id":"cjaw81iee00148rlx1ezmuy25","tag_id":"cjaw81igd003w8rlxrmy6qzu6","_id":"cjaw81ige003z8rlxtu8mpwsw"},{"post_id":"cjaw81ieg00168rlxfrt1snra","tag_id":"cjaw81ig3003c8rlx6g81o7mx","_id":"cjaw81igf00428rlx99jitaf4"},{"post_id":"cjaw81ieg00168rlxfrt1snra","tag_id":"cjaw81ifq002f8rlx9w714qgo","_id":"cjaw81igg00438rlx1ummgldq"},{"post_id":"cjaw81iel00198rlxbmp3qcvw","tag_id":"cjaw81igc003t8rlxmzyskgq9","_id":"cjaw81igh00478rlxdkwaux47"},{"post_id":"cjaw81iel00198rlxbmp3qcvw","tag_id":"cjaw81igg00448rlxsx4lqzjz","_id":"cjaw81igh00488rlxjkr21ky8"},{"post_id":"cjaw81iel00198rlxbmp3qcvw","tag_id":"cjaw81igg00458rlx4xg4xgv1","_id":"cjaw81igh004a8rlxie3yme9y"},{"post_id":"cjaw81ieo001b8rlx0r07rc26","tag_id":"cjaw81igg00468rlx08cr62ox","_id":"cjaw81igu004d8rlx76xocjvn"},{"post_id":"cjaw81ieo001b8rlx0r07rc26","tag_id":"cjaw81igh00498rlxr5fdn7py","_id":"cjaw81igu004e8rlxaxnom13q"},{"post_id":"cjaw81ieo001b8rlx0r07rc26","tag_id":"cjaw81igh004b8rlxau9hj43k","_id":"cjaw81igu004g8rlxfkeckqza"},{"post_id":"cjaw81ier001d8rlxftkrygv6","tag_id":"cjaw81igh004b8rlxau9hj43k","_id":"cjaw81igv004i8rlxt0lpzie3"},{"post_id":"cjaw81ier001d8rlxftkrygv6","tag_id":"cjaw81igu004f8rlx16b02oze","_id":"cjaw81igv004j8rlxu81e9mza"},{"post_id":"cjaw81ies001e8rlxsup6wrkm","tag_id":"cjaw81igv004h8rlxbrstb54r","_id":"cjaw81igw004m8rlxyk16qb3y"},{"post_id":"cjaw81ies001e8rlxsup6wrkm","tag_id":"cjaw81igv004k8rlxmack3a1v","_id":"cjaw81igw004n8rlx773c1nzp"},{"post_id":"cjaw81ieu001g8rlxbkil2ok5","tag_id":"cjaw81igw004l8rlx2qzd0yy4","_id":"cjaw81igx004q8rlxut51yhmn"},{"post_id":"cjaw81ieu001g8rlxbkil2ok5","tag_id":"cjaw81igw004o8rlxnqierrgx","_id":"cjaw81igx004r8rlx728h6u6p"},{"post_id":"cjaw81iew001i8rlxvf8jlhyk","tag_id":"cjaw81ifr002h8rlxeafftval","_id":"cjaw81igy004t8rlx1al62jy3"},{"post_id":"cjaw81if2001l8rlxk338s1mf","tag_id":"cjaw81igv004h8rlxbrstb54r","_id":"cjaw81ih0004w8rlxgnortgnr"},{"post_id":"cjaw81if2001l8rlxk338s1mf","tag_id":"cjaw81igy004u8rlx3ioddr1i","_id":"cjaw81ih0004x8rlxn83xwiwl"},{"post_id":"cjaw81if8001m8rlxk6xp4tp5","tag_id":"cjaw81igz004v8rlxjyvrmg2i","_id":"cjaw81ih0004z8rlxi3jjx0a8"},{"post_id":"cjaw81ifa001n8rlx86wwhe6d","tag_id":"cjaw81ih0004y8rlxr5je14dv","_id":"cjaw81ih100528rlxm17sjmda"},{"post_id":"cjaw81ifa001n8rlx86wwhe6d","tag_id":"cjaw81ifw002w8rlxxdpwj7e5","_id":"cjaw81ih400538rlx30s1yujr"},{"post_id":"cjaw81ifa001n8rlx86wwhe6d","tag_id":"cjaw81idh000f8rlxricxaocp","_id":"cjaw81ih500558rlxa4dq7911"},{"post_id":"cjaw81ifc001p8rlx1lni74j2","tag_id":"cjaw81ih0004y8rlxr5je14dv","_id":"cjaw81ih600588rlx2yb1oo8d"},{"post_id":"cjaw81ifc001p8rlx1lni74j2","tag_id":"cjaw81ih400548rlxtxps9f9m","_id":"cjaw81ih600598rlxsphrve00"},{"post_id":"cjaw81ifc001p8rlx1lni74j2","tag_id":"cjaw81idc000c8rlxltejqvig","_id":"cjaw81ih7005b8rlx5gnyv6zr"},{"post_id":"cjaw81ifc001p8rlx1lni74j2","tag_id":"cjaw81ifx002z8rlx79sa93ik","_id":"cjaw81ih7005c8rlxq8zij3kq"},{"post_id":"cjaw81ifd001q8rlx9up09a2f","tag_id":"cjaw81ify00328rlxlv6mi6gm","_id":"cjaw81ih8005f8rlxbhbjl9bh"},{"post_id":"cjaw81ifd001q8rlx9up09a2f","tag_id":"cjaw81ih6005a8rlxsl2sna5q","_id":"cjaw81ih8005g8rlxlbdlwu4n"},{"post_id":"cjaw81ifd001q8rlx9up09a2f","tag_id":"cjaw81ih7005d8rlxw8xnvnm1","_id":"cjaw81ih8005h8rlxm8zufdhx"},{"post_id":"cjaw81ifd001q8rlx9up09a2f","tag_id":"cjaw81ih7005e8rlxxbe0d39u","_id":"cjaw81ih8005i8rlxlvc7kda4"}],"Tag":[{"name":"持续集成","_id":"cjaw81icg00028rlxsfftspng"},{"name":"CI","_id":"cjaw81icq00058rlxhbbkeicq"},{"name":"DooD","_id":"cjaw81id100098rlxuw6zk2cd"},{"name":"jenkins","_id":"cjaw81idc000c8rlxltejqvig"},{"name":"docker","_id":"cjaw81idh000f8rlxricxaocp"},{"name":"aliyun","_id":"cjaw81idm000i8rlxoejol8yx"},{"name":"anaconda","_id":"cjaw81idt000o8rlxxkmb38lv"},{"name":"conda","_id":"cjaw81idy000t8rlx6wwlu453"},{"name":"tensorflow","_id":"cjaw81ie8000y8rlxutd63tps"},{"name":"hexo","_id":"cjaw81ied00118rlxyh5ole5c"},{"name":"centos7","_id":"cjaw81iek00178rlxwos1aeq2"},{"name":"postgresql","_id":"cjaw81ieq001c8rlxqrm7nluz"},{"name":"centOS","_id":"cjaw81iet001f8rlxz5t6yb04"},{"name":"Virtualenv","_id":"cjaw81if1001k8rlx2nzjtsgc"},{"name":"flask","_id":"cjaw81ifb001o8rlxhw58b1d0"},{"name":"Gunicorn","_id":"cjaw81ife001r8rlxw6r5gbdk"},{"name":"Supervisor","_id":"cjaw81iff001s8rlxhxav29mh"},{"name":"curl","_id":"cjaw81ifg001t8rlxyu2klyvv"},{"name":"restful","_id":"cjaw81ifh001w8rlxlziligjt"},{"name":"docker-compose","_id":"cjaw81ifl00228rlx265bz86p"},{"name":"registry","_id":"cjaw81ifn00278rlxqiyl22u5"},{"name":"iptables","_id":"cjaw81ifo002b8rlxqd8gxwyr"},{"name":"shell","_id":"cjaw81ifq002f8rlx9w714qgo"},{"name":"flask-ext-migrate","_id":"cjaw81ifr002g8rlxb42v2fum"},{"name":"python","_id":"cjaw81ifr002h8rlxeafftval"},{"name":"flask-migrate","_id":"cjaw81ifs002m8rlxb0okwlw2"},{"name":"redis","_id":"cjaw81ifu002q8rlxjg4f3q6o"},{"name":"web","_id":"cjaw81ifv002s8rlx7z26h07x"},{"name":"proxy","_id":"cjaw81ifv002t8rlxmk68imcn"},{"name":"git","_id":"cjaw81ifw002w8rlxxdpwj7e5"},{"name":"持续部署","_id":"cjaw81ifx002z8rlx79sa93ik"},{"name":"js","_id":"cjaw81ify00328rlxlv6mi6gm"},{"name":"七牛","_id":"cjaw81ifz00368rlx61iuvn1y"},{"name":"linux","_id":"cjaw81ig3003c8rlx6g81o7mx"},{"name":"磁盘扩容","_id":"cjaw81ig4003f8rlxwnphdbnk"},{"name":"java","_id":"cjaw81ig4003g8rlxl9zm4hk7"},{"name":"No Route to host","_id":"cjaw81ig6003j8rlxoun09k5j"},{"name":"mac","_id":"cjaw81ig6003k8rlxvp9y4m24"},{"name":"sed","_id":"cjaw81ig8003n8rlxhree7g8r"},{"name":"grep","_id":"cjaw81iga003p8rlx6dul911a"},{"name":"react native","_id":"cjaw81igc003t8rlxmzyskgq9"},{"name":"npmjs.org:443","_id":"cjaw81igd003w8rlxrmy6qzu6"},{"name":"Runtime is not ready for debugging","_id":"cjaw81igg00448rlxsx4lqzjz"},{"name":"Network request failed","_id":"cjaw81igg00458rlx4xg4xgv1"},{"name":"supervisor","_id":"cjaw81igg00468rlx08cr62ox"},{"name":"sprintboot","_id":"cjaw81igh00498rlxr5fdn7py"},{"name":"web.py","_id":"cjaw81igh004b8rlxau9hj43k"},{"name":"gunicorn","_id":"cjaw81igu004f8rlx16b02oze"},{"name":"vagrant","_id":"cjaw81igv004h8rlxbrstb54r"},{"name":"win10","_id":"cjaw81igv004k8rlxmack3a1v"},{"name":"app","_id":"cjaw81igw004l8rlx2qzd0yy4"},{"name":"ios","_id":"cjaw81igw004o8rlxnqierrgx"},{"name":"跨平台","_id":"cjaw81igy004u8rlx3ioddr1i"},{"name":"android","_id":"cjaw81igz004v8rlxjyvrmg2i"},{"name":"gitbucket","_id":"cjaw81ih0004y8rlxr5je14dv"},{"name":"webhook","_id":"cjaw81ih400548rlxtxps9f9m"},{"name":"闭包","_id":"cjaw81ih6005a8rlxsl2sna5q"},{"name":"作用域","_id":"cjaw81ih7005d8rlxw8xnvnm1"},{"name":"上下文","_id":"cjaw81ih7005e8rlxxbe0d39u"}]}}