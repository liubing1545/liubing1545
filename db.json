{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/logo.png","path":"images/logo.png","modified":0,"renderable":0},{"_id":"source/images/aaron.jpg","path":"images/aaron.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Docker-outside-of-Docker.md","hash":"3ac7477cd6db6992dae0ee2e4ec30587fd4c8faa","modified":1524108043027},{"_id":"source/_posts/Write-failed-Broken-pipe.md","hash":"ec5bdabece62b710ee41379e734246ab9d89231f","modified":1524108043027},{"_id":"source/_posts/YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1.md","hash":"3c5d25e4e713eabf11a0ebb6f5daef465e664abe","modified":1524108043027},{"_id":"source/_posts/anaconda安装tensorflow.md","hash":"913baaa41b5bb05b296f2c4eb820881e0959f1f9","modified":1524108043028},{"_id":"source/_posts/centos7安装postgresql.md","hash":"7eb1c99502bccc406aa609aed37e067762d08203","modified":1524108043029},{"_id":"source/_posts/centOS下配置Virtualenv-Flask-Gunicorn-Supervisor-Nginx.md","hash":"d64a5348c29bf93bc6fc63b1d455d963aa7bc787","modified":1524108043028},{"_id":"source/_posts/curl测试restful服务.md","hash":"24d4a1e61bcfad7cba412a8c3e64141474533750","modified":1524108043029},{"_id":"source/_posts/docker-compose的使用.md","hash":"da79661323af7079f5447485de73da85416c8c6a","modified":1524108043029},{"_id":"source/_posts/docker创建私有仓库.md","hash":"f1d24c6307cb9f6fe1ab5a04080688a56365148e","modified":1524108043030},{"_id":"source/_posts/docker设置http代理.md","hash":"eebf7ec519cd40236c9234bf575aecc29552b01e","modified":1524108043030},{"_id":"source/_posts/docker容器启动iptables报错.md","hash":"f6e7566987c5b655ca23412278e5fcb1d619c64c","modified":1524108043030},{"_id":"source/_posts/docker部署.md","hash":"9d4dbe8c900cd5af47226fad8ce735daacffe953","modified":1524108043030},{"_id":"source/_posts/flask-exthook-ExtDeprecationWarning警告的消除.md","hash":"072a58589e2fe1a431d9a5e88e5a4a73d318d5e6","modified":1524108043031},{"_id":"source/_posts/git删除tag.md","hash":"021319adf2671620b43ce074f736214eb343dad5","modified":1524108043031},{"_id":"source/_posts/flask-migrate数据库迁移.md","hash":"db3a92ed860e534e6e19167ce998e68642402a7b","modified":1524108043031},{"_id":"source/_posts/git删除所有提交历史记录.md","hash":"783543f28487146b803784cca9bcdc0b180c6098","modified":1524192951045},{"_id":"source/_posts/git撤销merge操作.md","hash":"02485325de2846772cc9183831c64e399fce9ae7","modified":1524108043032},{"_id":"source/_posts/jenkins自动部署docker应用.md","hash":"36f1936eb4c4c50cc7323320af8553c5bdb22db0","modified":1524108043032},{"_id":"source/_posts/java工程启动No-Route-to-host.md","hash":"a1dd253e60c4c1487d5469df1da3fcf75ca47326","modified":1524108043032},{"_id":"source/_posts/js七牛上传实践.md","hash":"8c6ac3a5e45c33d58b289f83cc19905480af8675","modified":1524108043033},{"_id":"source/_posts/linux虚拟机磁盘扩容.md","hash":"49b0b20b4413534c37d0ec9a004f0df488233049","modified":1524108043033},{"_id":"source/_posts/mac下搭建hexo至github.md","hash":"821eb1708844e13524dfaba9cb1f5933cf6015ab","modified":1524108043034},{"_id":"source/_posts/mac下批量替换文本.md","hash":"77b4bd2d64ce58253aad3fbbbf60cfba71abc2a0","modified":1524108043033},{"_id":"source/_posts/pip-freeze.md","hash":"4ac09135c5e67350e50a39ffeb8e51f6b4dd3678","modified":1524108043034},{"_id":"source/_posts/react-native初体验.md","hash":"eea31d6bfcebd21531448cf80d832a8ce82ce03c","modified":1524108043034},{"_id":"source/_posts/react-native与webapi交互.md","hash":"1f1f166870324f551ebe950bfa8e8eb93c8b747b","modified":1524108043034},{"_id":"source/_posts/shell反向删除文件.md","hash":"e230275ae8ac6a54861d356d93952daeb06b4581","modified":1524108043035},{"_id":"source/_posts/supervisor管理服务器进程.md","hash":"25cf46dc0a82fd56d8b91304fddba0643f12adf6","modified":1524108043035},{"_id":"source/_posts/web.py与gunicorn.md","hash":"1b5d148eb9ecdd251012f88ac04e8819f9486db4","modified":1524108043036},{"_id":"source/_posts/win10启动vagrant.md","hash":"5078d3926353e108e8b9de95e4130a24ae52fbff","modified":1524108043036},{"_id":"source/_posts/上传IOS-APP一直卡在-Authenticating-with-the-iTunes-store.md","hash":"4d3a3ce23897d91d22e0eabad343c78170129434","modified":1524108043036},{"_id":"source/_posts/使用virtualenv.md","hash":"7672ac60b96886c20a3de9c974a8ef9058365856","modified":1524108043037},{"_id":"source/_posts/关于android资源文件路径.md","hash":"3eb86b2391cc9073961e50de3f1073b4f2bdaa32","modified":1524108043037},{"_id":"source/_posts/搭建gitbucket的docker环境.md","hash":"4f0c43365c8f4c05de008b4c9f07553c4a67c3eb","modified":1524108043037},{"_id":"source/_posts/认识javascript.md","hash":"17136b5dd1f3bcc18c4d9558168016b3048bb9ef","modified":1524108043038},{"_id":"source/_posts/跨平台开发环境集中管理化之vagrant.md","hash":"10be7a73b1926dca4d84ce7855e3972a6a133a43","modified":1524108043038},{"_id":"source/_posts/配置gitbucket的webhook触发jenkins自动构建.md","hash":"97f61cfe99ea78dbed8427a68b20d34966c447cd","modified":1524108043038},{"_id":"source/images/logo.png","hash":"a221de8117c2f85b65088042a929dab93b8c6ca1","modified":1524108043040},{"_id":"source/images/aaron.jpg","hash":"d1b44d6c31c7e0bd1687c5ddaac98259b62633b8","modified":1524108043039},{"_id":"public/2018/04/19/git删除所有提交历史记录/index.html","hash":"f9bd316580868cf0a145a414f26974410ec3e895","modified":1524192305312},{"_id":"public/2017/12/07/centos7安装postgresql/index.html","hash":"b34f9107d0a44ddd2e24e19599c10536e9552cda","modified":1524192833105},{"_id":"public/2017/11/20/配置gitbucket的webhook触发jenkins自动构建/index.html","hash":"cbc99a446c99964784e2d55981356d36dc37e4b6","modified":1524192305315},{"_id":"public/2017/11/17/jenkins自动部署docker应用/index.html","hash":"2498c63f57e9d14d90a01da9ddbe54cebb8ac0b8","modified":1524192305314},{"_id":"public/2017/11/16/Docker-outside-of-Docker/index.html","hash":"ee6bfcf853872deff9e3018588647868b24de102","modified":1524192305315},{"_id":"public/2017/11/04/关于android资源文件路径/index.html","hash":"c02fed0a68a9522417569125006fcaaf79a7d719","modified":1524192305315},{"_id":"public/2017/08/29/anaconda安装tensorflow/index.html","hash":"f25392cb9cf25d36ddd4701c0e1ff32f12f5ea7c","modified":1524192305315},{"_id":"public/2017/09/29/上传IOS-APP一直卡在-Authenticating-with-the-iTunes-store/index.html","hash":"15b059c385dc44e020f5303199d11eb5ac529b65","modified":1524192305315},{"_id":"public/2017/07/27/docker-compose的使用/index.html","hash":"137e05ef92b170f0e1f4070366443557ae7b4f35","modified":1524192305315},{"_id":"public/2017/07/24/docker设置http代理/index.html","hash":"108f4967cf7a5ba99aa81f5110238a387880fbd1","modified":1524192305315},{"_id":"public/2017/07/18/win10启动vagrant/index.html","hash":"2ed1365be5be8823f47a9c27a647ebf93c02aab0","modified":1524192305315},{"_id":"public/2017/07/24/docker创建私有仓库/index.html","hash":"e606dc8a0534529a615b0965cf57beadc9d2d947","modified":1524192305315},{"_id":"public/2017/07/07/web.py与gunicorn/index.html","hash":"b6fa707779ad941c37789b0b7a0aea642a182142","modified":1524192305315},{"_id":"public/2017/07/07/supervisor管理服务器进程/index.html","hash":"2f9b0dc249561d76dafe89755b2c2630445280b2","modified":1524192305315},{"_id":"public/2017/07/05/Write-failed-Broken-pipe/index.html","hash":"b5acf740b1cd850602b0ba5ee96d3618b1615fca","modified":1524192305315},{"_id":"public/2017/03/28/docker容器启动iptables报错/index.html","hash":"4709d6b935b2975cc41e13f9a2c53a2f63685aad","modified":1524192305315},{"_id":"public/2017/03/28/java工程启动No-Route-to-host/index.html","hash":"23190aa493e1f056ac4e9cfc2552505ab1f24dbc","modified":1524192305315},{"_id":"public/2017/03/28/docker部署/index.html","hash":"14c28ee147206636ccbf3867f451d8624e06da2c","modified":1524192305316},{"_id":"public/2017/03/28/YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1/index.html","hash":"2b60da2a832ca6b85fab2e4f2a7b693f79d68112","modified":1524192305316},{"_id":"public/2017/03/28/linux虚拟机磁盘扩容/index.html","hash":"57c84f73120b5f26126c8380d60d897c6af05fae","modified":1524192305316},{"_id":"public/2016/12/27/搭建gitbucket的docker环境/index.html","hash":"83d9fd2b2d2f250fd7355d2cc913175c14aaace4","modified":1524192305316},{"_id":"public/2016/11/23/git删除tag/index.html","hash":"d96e1cc5f9755a0cd5b2d5a344f4c0d5a16a5de0","modified":1524192305316},{"_id":"public/2016/09/18/git撤销merge操作/index.html","hash":"e1f47a25dd4a7357f66fb472b63abf96ba4fb4cc","modified":1524192305316},{"_id":"public/2016/08/12/跨平台开发环境集中管理化之vagrant/index.html","hash":"a74842a2ab496705b71412ca586edb85ad84a4fe","modified":1524192305316},{"_id":"public/2016/08/11/flask-migrate数据库迁移/index.html","hash":"4d7396a2c411b6a48a4e5b5c79bc44849a96ae0b","modified":1524192305316},{"_id":"public/2016/08/08/认识javascript/index.html","hash":"e98f0be390ccbd94a56dffa77ec75802599ee531","modified":1524192305316},{"_id":"public/2016/08/08/react-native与webapi交互/index.html","hash":"5543e761da5aa751137f683c77e0660b35bc219c","modified":1524192305316},{"_id":"public/2016/07/19/curl测试restful服务/index.html","hash":"5ceb4c56ecc3e66f68646ad3b05dd214541ab2ef","modified":1524192305316},{"_id":"public/2016/07/18/centOS下配置Virtualenv-Flask-Gunicorn-Supervisor-Nginx/index.html","hash":"a8baa4185d803a628eda0d76bfb8e92f4a0a8cfc","modified":1524192305316},{"_id":"public/2016/07/07/react-native初体验/index.html","hash":"c84c2d9f4105d627138e4f487f116fc153bd2662","modified":1524192305316},{"_id":"public/2016/06/24/js七牛上传实践/index.html","hash":"fa2beeddfda73e3658a8d82f6ec8a7ecd971d252","modified":1524192305317},{"_id":"public/2016/06/24/shell反向删除文件/index.html","hash":"701ec254c251fc9edbcfef182a523cd87d4535fb","modified":1524192305317},{"_id":"public/2016/06/17/flask-exthook-ExtDeprecationWarning警告的消除/index.html","hash":"c6b98031c0957d6e959f557d0915e9a597dedf46","modified":1524192305317},{"_id":"public/2016/06/08/mac下批量替换文本/index.html","hash":"6a481c188d6482752a1ec624fbd4889a8e2451ba","modified":1524192305317},{"_id":"public/2016/05/31/pip-freeze/index.html","hash":"e7286a1cc6f4f3ac309ec9550a74a81d73240a06","modified":1524192305317},{"_id":"public/2016/05/27/使用virtualenv/index.html","hash":"347409e45eb005d4be90c87de14437dee2c6e4dd","modified":1524192305317},{"_id":"public/2016/05/22/mac下搭建hexo至github/index.html","hash":"167928f5a597b021dd6d426fe781955c4df9cbaf","modified":1524192305317},{"_id":"public/archives/page/2/index.html","hash":"8c25eed1c63fc79478a1111816b0c8b517ef1598","modified":1524192305317},{"_id":"public/archives/index.html","hash":"e353e03bed1bb49af6dfda683c00636c871b381d","modified":1524192833112},{"_id":"public/archives/page/3/index.html","hash":"17cb5ca728a919d494481f2712544e152e3f079e","modified":1524192305317},{"_id":"public/archives/page/4/index.html","hash":"bae7103967e378cffb2c8de9bbdc584237e3786a","modified":1524192305317},{"_id":"public/archives/2016/index.html","hash":"3a847474976302f39881275b43cdf23b965bf443","modified":1524192305317},{"_id":"public/archives/2016/page/2/index.html","hash":"dfe6c43dcea829cc4224c30b83f25dcc1ff0a9db","modified":1524192305318},{"_id":"public/archives/2016/05/index.html","hash":"f2639b59623ab936bc001cd24d73d327b5f691ff","modified":1524192305318},{"_id":"public/archives/2016/06/index.html","hash":"8d265d81b4be939cd3d74974a37acc128b1cc43e","modified":1524192305318},{"_id":"public/archives/2016/07/index.html","hash":"59d200eec2e078ad9b1c6c6df9bd96fd75be416a","modified":1524192305318},{"_id":"public/archives/2016/09/index.html","hash":"bfe6244586bf8439504edbbe9d4424bb8bc7717b","modified":1524192305318},{"_id":"public/archives/2016/08/index.html","hash":"063d016da37bfebd862cd5613748e3b53de48c69","modified":1524192305318},{"_id":"public/archives/2016/11/index.html","hash":"a78399569088c605feb47408aea744867b6c7e58","modified":1524192305318},{"_id":"public/archives/2016/12/index.html","hash":"a5fa1914e39cfd41bedfce0722147af151e887d4","modified":1524192305318},{"_id":"public/archives/2017/index.html","hash":"2f4a94fa78255293c37262be86626162769ca8d7","modified":1524192305318},{"_id":"public/archives/2017/page/2/index.html","hash":"5812301788b723a936cdd0825668aae7a867565e","modified":1524192305318},{"_id":"public/archives/2017/03/index.html","hash":"fd27525be0771e86e06695c86d58871379203426","modified":1524192305318},{"_id":"public/archives/2017/07/index.html","hash":"c705dce5ed2c396085d51be4adbc2b490a9fd91e","modified":1524192305319},{"_id":"public/archives/2017/08/index.html","hash":"a6e331099c9059f45c7aaa92651e21ff5a536df9","modified":1524192305319},{"_id":"public/archives/2017/09/index.html","hash":"d08816a03f54694ce83b61ccc6ff0e45f137f745","modified":1524192305318},{"_id":"public/archives/2017/11/index.html","hash":"80603210653bb942026c3f1d40d2288543289b5e","modified":1524192305319},{"_id":"public/archives/2018/index.html","hash":"2508d7582b4f7bbb1d3d28eb64a5e942402d700d","modified":1524192833117},{"_id":"public/archives/2017/12/index.html","hash":"dcb1fba39458a2897d933373bbfdc6628b74cd50","modified":1524192305319},{"_id":"public/archives/2018/04/index.html","hash":"3b4388050d78110c577a23b12c69e4d246c8a0db","modified":1524192833112},{"_id":"public/index.html","hash":"e98f574d963dfd8670a9431869dbb2286183dfaf","modified":1524192960339},{"_id":"public/page/2/index.html","hash":"717bab15ac50a1e91dd817d5cec7873a3e76c88f","modified":1524192305319},{"_id":"public/page/3/index.html","hash":"8207913e183615c5dc50f4b702c2f9ef57340c3d","modified":1524192305319},{"_id":"public/page/4/index.html","hash":"52370e4ed9be683a16f66172c8e51ec597750af0","modified":1524192305319},{"_id":"public/tags/持续集成/index.html","hash":"5e6c690e46bcd4c283f7869937577bdb2e7338fc","modified":1524192305319},{"_id":"public/tags/CI/index.html","hash":"2ec868ea40bc7433af99a1f8b029677d02b00833","modified":1524192305320},{"_id":"public/tags/DooD/index.html","hash":"81c908f4a3e0beccb4982deddd085644d6a2f92f","modified":1524192305320},{"_id":"public/tags/jenkins/index.html","hash":"af9dad3f48ea1364634d33fd6fc9c425a87cb81e","modified":1524192305320},{"_id":"public/tags/docker/index.html","hash":"6783d5334cd1615525b73bdd5f8a17c4581446a5","modified":1524192305320},{"_id":"public/tags/aliyun/index.html","hash":"0c1d91e31057b2ae85b762461d5418cf8e6a80b5","modified":1524192305320},{"_id":"public/tags/anaconda/index.html","hash":"6430beea8c7cbf6bdf56be1508b3ff704e8f5d0f","modified":1524192305320},{"_id":"public/tags/conda/index.html","hash":"e1f331368837d9c6e33fe1acb3318baadf1fbcad","modified":1524192305320},{"_id":"public/tags/hexo/index.html","hash":"355a1ab74bc620f8aa545b2cf6e35d0198f46254","modified":1524192305320},{"_id":"public/tags/tensorflow/index.html","hash":"1dc1140bf3ec91651e15bd99a79c6fb1c02ece89","modified":1524192305320},{"_id":"public/tags/centos7/index.html","hash":"740a16295e58c15aef084e5f7692da4aee03629b","modified":1524192305320},{"_id":"public/tags/postgresql/index.html","hash":"00f9be388011e624a099863531cbca0c5d5e49ee","modified":1524192305320},{"_id":"public/tags/curl/index.html","hash":"559b76745fc92a8e8dbbe3fd10112db8fc7838ac","modified":1524192305321},{"_id":"public/tags/Virtualenv/index.html","hash":"dc59478dac036af18f4c3b4ef38f113a1b9ca9bb","modified":1524192305321},{"_id":"public/tags/restful/index.html","hash":"342b59d65af97854b8ce4984c7ead2718ca73261","modified":1524192305321},{"_id":"public/tags/centOS/index.html","hash":"a5040752abb16633aa7c5b1cbfce9f6a5c3f1bae","modified":1524192305321},{"_id":"public/tags/flask/index.html","hash":"64dea946d04a48bf6c79913cce3265a53ff84d27","modified":1524192305321},{"_id":"public/tags/Gunicorn/index.html","hash":"1c906392152366056d9300b968097d92058b02db","modified":1524192305321},{"_id":"public/tags/Supervisor/index.html","hash":"3939c6a3f8fd4b6a55272d6a2cf31d3a3db1cf2e","modified":1524192305321},{"_id":"public/tags/registry/index.html","hash":"fe4547f1b7d8a087a38bf5105a9d35339144a299","modified":1524192305321},{"_id":"public/tags/docker-compose/index.html","hash":"cec876ac99c5b9c133d79b307d4adca8687bf604","modified":1524192305321},{"_id":"public/tags/proxy/index.html","hash":"8d568dcfd4d2da7febec6f3d066a7549c789cfb0","modified":1524192305321},{"_id":"public/tags/iptables/index.html","hash":"7a613a1b91b73ee7bb367a5edadc9563974eb48b","modified":1524192305321},{"_id":"public/tags/redis/index.html","hash":"cd0f51cf2cd6bb3c42bdd36285082c913e1df17c","modified":1524192305321},{"_id":"public/tags/web/index.html","hash":"d6c4255981c8ed4d0100bdb2ff7331182d0c033a","modified":1524192305322},{"_id":"public/tags/shell/index.html","hash":"0ed77feb55b76dbbc0410e645588ab032191f2a3","modified":1524192305322},{"_id":"public/tags/flask-ext-migrate/index.html","hash":"47bc30f7f15e1be13e13680b29b5a138a69f021c","modified":1524192305322},{"_id":"public/tags/git/index.html","hash":"c9bea4bc53670a8432224421e2c03e145fcecff7","modified":1524192833117},{"_id":"public/tags/python/index.html","hash":"2abcc330ea3e5cef4f36f911b991c7ce0fab56ae","modified":1524192305322},{"_id":"public/tags/flask-migrate/index.html","hash":"912ff6febd6891c84dd71b8f3ff82d5798c0fa61","modified":1524192305322},{"_id":"public/tags/持续部署/index.html","hash":"9300d140cb828b054052427923650bd1ee07d34d","modified":1524192305322},{"_id":"public/tags/java/index.html","hash":"a28fdd6eb26d83c5963e268b447f13faa79a122b","modified":1524192305322},{"_id":"public/tags/No-Route-to-host/index.html","hash":"ec42a9a79708b36b5577a714f61d0579a458bc6a","modified":1524192305322},{"_id":"public/tags/js/index.html","hash":"1a16bf9624e6ae2a300315a959143b7765c9c093","modified":1524192305322},{"_id":"public/tags/七牛/index.html","hash":"b552f1fbfb0401d88de5992640fc502388f290b3","modified":1524192305322},{"_id":"public/tags/linux/index.html","hash":"a020225eaf5a65b7cc9c9060d90b37f72ac2e76a","modified":1524192305322},{"_id":"public/tags/磁盘扩容/index.html","hash":"f557b6757fb195ad6673b71ded55478f1fc06102","modified":1524192305323},{"_id":"public/tags/mac/index.html","hash":"ef9f53c7e4906dce2a05deeed26cb41f9f794aca","modified":1524192305323},{"_id":"public/tags/sed/index.html","hash":"0496a2e9f34c4169aa7ba85b66c5b007617041cf","modified":1524192305323},{"_id":"public/tags/grep/index.html","hash":"0e4186644806b1d3064e5acdc567ed9163525de2","modified":1524192305323},{"_id":"public/tags/react-native/index.html","hash":"abcf5baf15ea5c090855607d0c2345faee6c71d8","modified":1524192305323},{"_id":"public/tags/Runtime-is-not-ready-for-debugging/index.html","hash":"5a90b2e198b87ea56177bd63ba2c2196b215bbd5","modified":1524192305323},{"_id":"public/tags/Network-request-failed/index.html","hash":"bb37b1f9a8ba42fc921604c3c5a8323b476f51d6","modified":1524192305324},{"_id":"public/tags/supervisor/index.html","hash":"447c44dd27f98b36a8a0abaf02f0634af4337e17","modified":1524192305323},{"_id":"public/tags/sprintboot/index.html","hash":"8d74037618f0e04f7806a5ead92b9b510421098b","modified":1524192305323},{"_id":"public/tags/web-py/index.html","hash":"b170a2309025cab33f48757e38283641d5ff9fc5","modified":1524192305323},{"_id":"public/tags/gunicorn/index.html","hash":"b035730acabb0d5f0e36dff37aa6ea0130039e3c","modified":1524192305323},{"_id":"public/tags/vagrant/index.html","hash":"2884969658f157aaafe2fb35ac50c971bef03aef","modified":1524192305324},{"_id":"public/tags/win10/index.html","hash":"6740dff02dc94000cbee2bc6b839dfe5926343a3","modified":1524192305324},{"_id":"public/tags/app/index.html","hash":"e6f06fbc292ba6cf270b5d2889fd0d3cabc629ac","modified":1524192305324},{"_id":"public/tags/ios/index.html","hash":"16d5d14428eed5e8791251a79ab8731dd0bd8668","modified":1524192305324},{"_id":"public/tags/npmjs-org-443/index.html","hash":"ac3d74526f7ec70fcbb9a364b7d5679b70c839fc","modified":1524192305324},{"_id":"public/tags/android/index.html","hash":"17420c947221d75741a08c8b4e4a23aa914dc4de","modified":1524192305324},{"_id":"public/tags/gitbucket/index.html","hash":"61be76493eec0e38c30ee56daada6cdbc89f1802","modified":1524192305324},{"_id":"public/tags/跨平台/index.html","hash":"4b6a3ebcdd9f96349c4d661697fc1b297adfdf73","modified":1524192305324},{"_id":"public/tags/webhook/index.html","hash":"d0787bd83d279dfce90454c4d137c174e419ed0d","modified":1524192305324},{"_id":"public/tags/闭包/index.html","hash":"f4daca4a934cce70dddc1f1376202b12b1318351","modified":1524192305324},{"_id":"public/tags/作用域/index.html","hash":"88956682edf8cd163addbe2f0d4dc616145d4c00","modified":1524192305324},{"_id":"public/tags/上下文/index.html","hash":"83b46fdc91cd449fa1fcdaf734c77dc7c118aefd","modified":1524192305325},{"_id":"public/images/logo.png","hash":"a221de8117c2f85b65088042a929dab93b8c6ca1","modified":1524191999846},{"_id":"public/images/aaron.jpg","hash":"d1b44d6c31c7e0bd1687c5ddaac98259b62633b8","modified":1524191999852},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1524192236247},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1524192236247},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1524192236248},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1524192236248},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1524192236248},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1524192236249},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1524192236249},{"_id":"themes/yilia/_config.yml","hash":"0d2c3ac67b32b8228c256104ccc431c918eead34","modified":1524192236250},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1524192236269},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1524192236299},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1524192236250},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1524192236251},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1524192236251},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1524192236251},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1524192236252},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1524192236252},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1524192236253},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1524192236265},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1524192236266},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1524192236266},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1524192236267},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1524192236267},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1524192236268},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1524192236268},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1524192236296},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1524192236298},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1524192236269},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1524192236291},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524192236264},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1524192236296},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1524192236297},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1524192236254},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1524192236254},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1524192236254},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1524192236255},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1524192236255},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1524192236256},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1524192236256},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1524192236256},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1524192236257},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1524192236257},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1524192236258},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1524192236258},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1524192236258},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1524192236259},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1524192236265},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1524192236265},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1524192236291},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1524192236292},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1524192236292},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1524192236293},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1524192236293},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1524192236294},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1524192236295},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1524192236294},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1524192236294},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1524192236270},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1524192236271},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1524192236270},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1524192236271},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1524192236272},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1524192236272},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1524192236273},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1524192236273},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1524192236273},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1524192236276},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1524192236279},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1524192236279},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1524192236280},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1524192236281},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1524192236281},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1524192236282},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1524192236279},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1524192236283},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1524192236283},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1524192236282},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1524192236284},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1524192236284},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1524192236283},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1524192236284},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1524192236285},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1524192236285},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1524192236285},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1524192236286},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1524192236287},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1524192236287},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1524192236287},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1524192236288},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1524192236288},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1524192236288},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1524192236289},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1524192236290},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1524192236289},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1524192236290},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1524192236290},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1524192236264},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1524192236259},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1524192236260},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1524192236260},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1524192236260},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1524192236261},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1524192236261},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1524192236262},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1524192236262},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1524192236262},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1524192236263},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1524192236274},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1524192236275},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1524192236274},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1524192236275},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1524192236276},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1524192236277},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1524192236277},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1524192236278},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1524192236278},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1524192236280},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1524192236280},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1524192236281},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1524192305345},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1524192305345},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1524192305346},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1524192305346},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1524192305346},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1524192305347},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1524192305347},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1524192305347},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1524192305347},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1524192305411},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1524192305411},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1524192305411},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1524192305411},{"_id":"public/2018/04/20/git删除所有提交历史记录/index.html","hash":"62742fd6b6c822d63698d61f188794b476ee8f58","modified":1524192960338}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Docker outside of Docker","date":"2017-11-16T08:06:20.000Z","_content":"## 添加用户jenkins至docker组\n```shell\n# 如果不存在docker组就groupadd一个\n$ sudo groupadd docker\n\n# 添加用户jenkins至docker组 \n$ sudo gpasswd -a jenkins docker\n\n# 重启docker服务\n$ sudo service docker restart\n```\n\n\n## 自定义jenkins镜像\n镜像Dockerfile    \n\n```shell\nFrom jenkins\n\nUSER root\nAGR dockerGid=995\n\nRUN echo \"docker:x:${dockerGid}:jenkins\" >> /etc/group\n\nUSER jenkins\n```\n\n其中的dockerGid是docker组id，可以在宿主机里**cat /etc/group | grep ^docker**查看组id序号。    \n\n### docker:dial unix /var/run/docker.sock:permission denied.\n上面的dockerfile内容关键是将宿主机的docker组及用户配置，写入docker镜像里，防止在docker容器里运行docker命令没有权限，会报错。    \n**一定要注意，设置的dockerGid一定要与宿主机的组id一致。**\n\n### build自定义镜像\n```shell\ndocker build -t local_jenkins\n```\n\n## Docker进程监听的Unix域socket\n### /var/run/docker.sock\n这个文件是什么呢？简单地说，它是Docker守护进程(Docker daemon)默认监听的Unix域套接字(Unix domain socket)，容器中的进程可以通过它与Docker守护进程进行通信。\n### 管理jenkins的docker-compose\n```shell\nversion: '2'\nservices:\n  my_jenkins:\n    image: local_jenkins\n    volumes:\n      - ./jenkins_home:/var/jenkins_home\n      - /bin/docker:/usr/bin/docker\n      - /usr/bin/docker.sock:/var/run/docker.sock\n    ports:\n      - \"8081:8080\"\n```\n在这个docker-compose中，我们挂载了**/bin/docker**,**/var/run/docker.sock**，实现了DooD(Docker outside of Docker)。在jenkins镜像里run起来的容器实际上就是运行在宿主机上的。\n\n\n\n\n","source":"_posts/Docker-outside-of-Docker.md","raw":"---\ntitle: Docker outside of Docker\ndate: 2017-11-16 16:06:20\ntags: [持续集成, CI, DooD, jenkins, docker]\n---\n## 添加用户jenkins至docker组\n```shell\n# 如果不存在docker组就groupadd一个\n$ sudo groupadd docker\n\n# 添加用户jenkins至docker组 \n$ sudo gpasswd -a jenkins docker\n\n# 重启docker服务\n$ sudo service docker restart\n```\n\n\n## 自定义jenkins镜像\n镜像Dockerfile    \n\n```shell\nFrom jenkins\n\nUSER root\nAGR dockerGid=995\n\nRUN echo \"docker:x:${dockerGid}:jenkins\" >> /etc/group\n\nUSER jenkins\n```\n\n其中的dockerGid是docker组id，可以在宿主机里**cat /etc/group | grep ^docker**查看组id序号。    \n\n### docker:dial unix /var/run/docker.sock:permission denied.\n上面的dockerfile内容关键是将宿主机的docker组及用户配置，写入docker镜像里，防止在docker容器里运行docker命令没有权限，会报错。    \n**一定要注意，设置的dockerGid一定要与宿主机的组id一致。**\n\n### build自定义镜像\n```shell\ndocker build -t local_jenkins\n```\n\n## Docker进程监听的Unix域socket\n### /var/run/docker.sock\n这个文件是什么呢？简单地说，它是Docker守护进程(Docker daemon)默认监听的Unix域套接字(Unix domain socket)，容器中的进程可以通过它与Docker守护进程进行通信。\n### 管理jenkins的docker-compose\n```shell\nversion: '2'\nservices:\n  my_jenkins:\n    image: local_jenkins\n    volumes:\n      - ./jenkins_home:/var/jenkins_home\n      - /bin/docker:/usr/bin/docker\n      - /usr/bin/docker.sock:/var/run/docker.sock\n    ports:\n      - \"8081:8080\"\n```\n在这个docker-compose中，我们挂载了**/bin/docker**,**/var/run/docker.sock**，实现了DooD(Docker outside of Docker)。在jenkins镜像里run起来的容器实际上就是运行在宿主机上的。\n\n\n\n\n","slug":"Docker-outside-of-Docker","published":1,"updated":"2018-04-19T03:20:43.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8wg0000sof7qgqs9y6g","content":"<h2 id=\"添加用户jenkins至docker组\"><a href=\"#添加用户jenkins至docker组\" class=\"headerlink\" title=\"添加用户jenkins至docker组\"></a>添加用户jenkins至docker组</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 如果不存在docker组就groupadd一个</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo groupadd docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 添加用户jenkins至docker组 </span><br><span class=\"line\"><span class=\"meta\">$</span> sudo gpasswd -a jenkins docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 重启docker服务</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo service docker restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义jenkins镜像\"><a href=\"#自定义jenkins镜像\" class=\"headerlink\" title=\"自定义jenkins镜像\"></a>自定义jenkins镜像</h2><p>镜像Dockerfile    </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">From jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\">AGR dockerGid=995</span><br><span class=\"line\"></span><br><span class=\"line\">RUN echo \"docker:x:$&#123;dockerGid&#125;:jenkins\" &gt;&gt; /etc/group</span><br><span class=\"line\"></span><br><span class=\"line\">USER jenkins</span><br></pre></td></tr></table></figure>\n<p>其中的dockerGid是docker组id，可以在宿主机里<strong>cat /etc/group | grep ^docker</strong>查看组id序号。    </p>\n<h3 id=\"docker-dial-unix-var-run-docker-sock-permission-denied\"><a href=\"#docker-dial-unix-var-run-docker-sock-permission-denied\" class=\"headerlink\" title=\"docker:dial unix /var/run/docker.sock:permission denied.\"></a>docker:dial unix /var/run/docker.sock:permission denied.</h3><p>上面的dockerfile内容关键是将宿主机的docker组及用户配置，写入docker镜像里，防止在docker容器里运行docker命令没有权限，会报错。<br><strong>一定要注意，设置的dockerGid一定要与宿主机的组id一致。</strong></p>\n<h3 id=\"build自定义镜像\"><a href=\"#build自定义镜像\" class=\"headerlink\" title=\"build自定义镜像\"></a>build自定义镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t local_jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"Docker进程监听的Unix域socket\"><a href=\"#Docker进程监听的Unix域socket\" class=\"headerlink\" title=\"Docker进程监听的Unix域socket\"></a>Docker进程监听的Unix域socket</h2><h3 id=\"var-run-docker-sock\"><a href=\"#var-run-docker-sock\" class=\"headerlink\" title=\"/var/run/docker.sock\"></a>/var/run/docker.sock</h3><p>这个文件是什么呢？简单地说，它是Docker守护进程(Docker daemon)默认监听的Unix域套接字(Unix domain socket)，容器中的进程可以通过它与Docker守护进程进行通信。</p>\n<h3 id=\"管理jenkins的docker-compose\"><a href=\"#管理jenkins的docker-compose\" class=\"headerlink\" title=\"管理jenkins的docker-compose\"></a>管理jenkins的docker-compose</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: '2'</span><br><span class=\"line\">services:</span><br><span class=\"line\">  my_jenkins:</span><br><span class=\"line\">    image: local_jenkins</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./jenkins_home:/var/jenkins_home</span><br><span class=\"line\">      - /bin/docker:/usr/bin/docker</span><br><span class=\"line\">      - /usr/bin/docker.sock:/var/run/docker.sock</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - \"8081:8080\"</span><br></pre></td></tr></table></figure>\n<p>在这个docker-compose中，我们挂载了<strong>/bin/docker</strong>,<strong>/var/run/docker.sock</strong>，实现了DooD(Docker outside of Docker)。在jenkins镜像里run起来的容器实际上就是运行在宿主机上的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"添加用户jenkins至docker组\"><a href=\"#添加用户jenkins至docker组\" class=\"headerlink\" title=\"添加用户jenkins至docker组\"></a>添加用户jenkins至docker组</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 如果不存在docker组就groupadd一个</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo groupadd docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 添加用户jenkins至docker组 </span><br><span class=\"line\"><span class=\"meta\">$</span> sudo gpasswd -a jenkins docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 重启docker服务</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo service docker restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义jenkins镜像\"><a href=\"#自定义jenkins镜像\" class=\"headerlink\" title=\"自定义jenkins镜像\"></a>自定义jenkins镜像</h2><p>镜像Dockerfile    </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">From jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\">AGR dockerGid=995</span><br><span class=\"line\"></span><br><span class=\"line\">RUN echo \"docker:x:$&#123;dockerGid&#125;:jenkins\" &gt;&gt; /etc/group</span><br><span class=\"line\"></span><br><span class=\"line\">USER jenkins</span><br></pre></td></tr></table></figure>\n<p>其中的dockerGid是docker组id，可以在宿主机里<strong>cat /etc/group | grep ^docker</strong>查看组id序号。    </p>\n<h3 id=\"docker-dial-unix-var-run-docker-sock-permission-denied\"><a href=\"#docker-dial-unix-var-run-docker-sock-permission-denied\" class=\"headerlink\" title=\"docker:dial unix /var/run/docker.sock:permission denied.\"></a>docker:dial unix /var/run/docker.sock:permission denied.</h3><p>上面的dockerfile内容关键是将宿主机的docker组及用户配置，写入docker镜像里，防止在docker容器里运行docker命令没有权限，会报错。<br><strong>一定要注意，设置的dockerGid一定要与宿主机的组id一致。</strong></p>\n<h3 id=\"build自定义镜像\"><a href=\"#build自定义镜像\" class=\"headerlink\" title=\"build自定义镜像\"></a>build自定义镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t local_jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"Docker进程监听的Unix域socket\"><a href=\"#Docker进程监听的Unix域socket\" class=\"headerlink\" title=\"Docker进程监听的Unix域socket\"></a>Docker进程监听的Unix域socket</h2><h3 id=\"var-run-docker-sock\"><a href=\"#var-run-docker-sock\" class=\"headerlink\" title=\"/var/run/docker.sock\"></a>/var/run/docker.sock</h3><p>这个文件是什么呢？简单地说，它是Docker守护进程(Docker daemon)默认监听的Unix域套接字(Unix domain socket)，容器中的进程可以通过它与Docker守护进程进行通信。</p>\n<h3 id=\"管理jenkins的docker-compose\"><a href=\"#管理jenkins的docker-compose\" class=\"headerlink\" title=\"管理jenkins的docker-compose\"></a>管理jenkins的docker-compose</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: '2'</span><br><span class=\"line\">services:</span><br><span class=\"line\">  my_jenkins:</span><br><span class=\"line\">    image: local_jenkins</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./jenkins_home:/var/jenkins_home</span><br><span class=\"line\">      - /bin/docker:/usr/bin/docker</span><br><span class=\"line\">      - /usr/bin/docker.sock:/var/run/docker.sock</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - \"8081:8080\"</span><br></pre></td></tr></table></figure>\n<p>在这个docker-compose中，我们挂载了<strong>/bin/docker</strong>,<strong>/var/run/docker.sock</strong>，实现了DooD(Docker outside of Docker)。在jenkins镜像里run起来的容器实际上就是运行在宿主机上的。</p>\n"},{"title":"Write failed: Broken pipe","date":"2017-07-05T02:52:07.000Z","_content":"### Write failed: Broken pipe\n\nssh远程连接阿里云centos服务器时，隔几分钟不操作，就会报错：    \n```\nWrite failed: Broken pipe   \n```\n\n解决方法：    \n在/etc/ssh/sshd_config文件中，添加如下配置：　    \n```\nClientAliveInterval 60   \n```\n重启一下就生效了。","source":"_posts/Write-failed-Broken-pipe.md","raw":"---\ntitle: 'Write failed: Broken pipe'\ndate: 2017-07-05 10:52:07\ntags: [aliyun]\n---\n### Write failed: Broken pipe\n\nssh远程连接阿里云centos服务器时，隔几分钟不操作，就会报错：    \n```\nWrite failed: Broken pipe   \n```\n\n解决方法：    \n在/etc/ssh/sshd_config文件中，添加如下配置：　    \n```\nClientAliveInterval 60   \n```\n重启一下就生效了。","slug":"Write-failed-Broken-pipe","published":1,"updated":"2018-04-19T03:20:43.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8wm0001sof7mz54ttmn","content":"<h3 id=\"Write-failed-Broken-pipe\"><a href=\"#Write-failed-Broken-pipe\" class=\"headerlink\" title=\"Write failed: Broken pipe\"></a>Write failed: Broken pipe</h3><p>ssh远程连接阿里云centos服务器时，隔几分钟不操作，就会报错：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Write</span> failed: <span class=\"keyword\">Broken </span>pipe</span><br></pre></td></tr></table></figure></p>\n<p>解决方法：<br>在/etc/ssh/sshd_config文件中，添加如下配置：　<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClientAliveInterval <span class=\"number\">60</span></span><br></pre></td></tr></table></figure></p>\n<p>重启一下就生效了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Write-failed-Broken-pipe\"><a href=\"#Write-failed-Broken-pipe\" class=\"headerlink\" title=\"Write failed: Broken pipe\"></a>Write failed: Broken pipe</h3><p>ssh远程连接阿里云centos服务器时，隔几分钟不操作，就会报错：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Write</span> failed: <span class=\"keyword\">Broken </span>pipe</span><br></pre></td></tr></table></figure></p>\n<p>解决方法：<br>在/etc/ssh/sshd_config文件中，添加如下配置：　<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClientAliveInterval <span class=\"number\">60</span></span><br></pre></td></tr></table></figure></p>\n<p>重启一下就生效了。</p>\n"},{"title":"anaconda安装tensorflow","date":"2017-08-29T03:30:25.000Z","_content":"## 下载anaconda\n\nanaconda是一个用于科学计算的python发行版，支持linux、mac、windows系统。    \n[anaconda官方下载地址](https://www.continuum.io/downloads)    \n我下载的版本是python27的anaconda2-4.4.0-Windows-x86_64.exe    \n\n## 创建python3的anaconda环境\n```shell\nconda create -n python3 python=3.5.2 anaconda\n```\n\n## 安装tensorflow\n```shell\n# 查看当前版本分支\nconda info -e\n\n# 切换python3的环境\nactivate python3\n\n# 安装tensorflow\nconda install tensorflow\n```\n\n## 启动spyder\n```shell\n# 在python3的虚拟环境下\nspyder\n```\n","source":"_posts/anaconda安装tensorflow.md","raw":"---\ntitle: anaconda安装tensorflow\ndate: 2017-08-29 11:30:25\ntags: [anaconda, conda, tensorflow]\n---\n## 下载anaconda\n\nanaconda是一个用于科学计算的python发行版，支持linux、mac、windows系统。    \n[anaconda官方下载地址](https://www.continuum.io/downloads)    \n我下载的版本是python27的anaconda2-4.4.0-Windows-x86_64.exe    \n\n## 创建python3的anaconda环境\n```shell\nconda create -n python3 python=3.5.2 anaconda\n```\n\n## 安装tensorflow\n```shell\n# 查看当前版本分支\nconda info -e\n\n# 切换python3的环境\nactivate python3\n\n# 安装tensorflow\nconda install tensorflow\n```\n\n## 启动spyder\n```shell\n# 在python3的虚拟环境下\nspyder\n```\n","slug":"anaconda安装tensorflow","published":1,"updated":"2018-04-19T03:20:43.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8x5000esof78os6oxkp","content":"<h2 id=\"下载anaconda\"><a href=\"#下载anaconda\" class=\"headerlink\" title=\"下载anaconda\"></a>下载anaconda</h2><p>anaconda是一个用于科学计算的python发行版，支持linux、mac、windows系统。<br><a href=\"https://www.continuum.io/downloads\" target=\"_blank\" rel=\"noopener\">anaconda官方下载地址</a><br>我下载的版本是python27的anaconda2-4.4.0-Windows-x86_64.exe    </p>\n<h2 id=\"创建python3的anaconda环境\"><a href=\"#创建python3的anaconda环境\" class=\"headerlink\" title=\"创建python3的anaconda环境\"></a>创建python3的anaconda环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n python3 python=3.5.2 anaconda</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装tensorflow\"><a href=\"#安装tensorflow\" class=\"headerlink\" title=\"安装tensorflow\"></a>安装tensorflow</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前版本分支</span></span><br><span class=\"line\">conda info -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换python3的环境</span></span><br><span class=\"line\">activate python3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装tensorflow</span></span><br><span class=\"line\">conda install tensorflow</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动spyder\"><a href=\"#启动spyder\" class=\"headerlink\" title=\"启动spyder\"></a>启动spyder</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在python3的虚拟环境下</span></span><br><span class=\"line\">spyder</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下载anaconda\"><a href=\"#下载anaconda\" class=\"headerlink\" title=\"下载anaconda\"></a>下载anaconda</h2><p>anaconda是一个用于科学计算的python发行版，支持linux、mac、windows系统。<br><a href=\"https://www.continuum.io/downloads\" target=\"_blank\" rel=\"noopener\">anaconda官方下载地址</a><br>我下载的版本是python27的anaconda2-4.4.0-Windows-x86_64.exe    </p>\n<h2 id=\"创建python3的anaconda环境\"><a href=\"#创建python3的anaconda环境\" class=\"headerlink\" title=\"创建python3的anaconda环境\"></a>创建python3的anaconda环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n python3 python=3.5.2 anaconda</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装tensorflow\"><a href=\"#安装tensorflow\" class=\"headerlink\" title=\"安装tensorflow\"></a>安装tensorflow</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前版本分支</span></span><br><span class=\"line\">conda info -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换python3的环境</span></span><br><span class=\"line\">activate python3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装tensorflow</span></span><br><span class=\"line\">conda install tensorflow</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动spyder\"><a href=\"#启动spyder\" class=\"headerlink\" title=\"启动spyder\"></a>启动spyder</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在python3的虚拟环境下</span></span><br><span class=\"line\">spyder</span><br></pre></td></tr></table></figure>\n"},{"title":"YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1","date":"2017-03-28T11:35:15.000Z","_content":"在hexo generate时，报错:\n\n    YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1\n    \n原因是在tags:hexo之间hexo之前要加一个空格！！！","source":"_posts/YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1.md","raw":"---\ntitle: >-\n  YAMLException: can not read a block mapping entry; a multiline key may not be\n  an implicit key at line 4, column 1\ndate: 2017-03-28 19:35:15\ntags: hexo\n---\n在hexo generate时，报错:\n\n    YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1\n    \n原因是在tags:hexo之间hexo之前要加一个空格！！！","slug":"YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1","published":1,"updated":"2018-04-19T03:20:43.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8x9000fsof7zmn11y6b","content":"<p>在hexo generate时，报错:</p>\n<pre><code>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1\n</code></pre><p>原因是在tags:hexo之间hexo之前要加一个空格！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在hexo generate时，报错:</p>\n<pre><code>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1\n</code></pre><p>原因是在tags:hexo之间hexo之前要加一个空格！！！</p>\n"},{"title":"centos7安装postgresql","date":"2017-12-07T08:13:46.000Z","_content":"## 安装启动postgresql\n\n```shell\nyum install postgresql-server\nservice postgresql initdb\nservice postgresql start\n```\n## 修改管理员密码\n\n```shell\nsu - postgres\npsql\n$ ALTER USER postgres WITH PASSWORD 'postgres';\n```\n\n## 配置远程访问\n\n修改**/var/lib/pgsql/data/postgresql.conf**\n```shell\nlisten_addresses = '*'\n```\n\n修改客户端认证配置文件**/var/lib/pgsql/data/pg_hba.conf**,添加\n\n```shell\nhost  all  all   10.0.0.0/8  md5\n```\n\n## 重启服务\n\n```shell\nservice postgresql restart\n```\n","source":"_posts/centos7安装postgresql.md","raw":"---\ntitle: centos7安装postgresql\ndate: 2017-12-07 16:13:46\ntags: [centos7, postgresql]\n---\n## 安装启动postgresql\n\n```shell\nyum install postgresql-server\nservice postgresql initdb\nservice postgresql start\n```\n## 修改管理员密码\n\n```shell\nsu - postgres\npsql\n$ ALTER USER postgres WITH PASSWORD 'postgres';\n```\n\n## 配置远程访问\n\n修改**/var/lib/pgsql/data/postgresql.conf**\n```shell\nlisten_addresses = '*'\n```\n\n修改客户端认证配置文件**/var/lib/pgsql/data/pg_hba.conf**,添加\n\n```shell\nhost  all  all   10.0.0.0/8  md5\n```\n\n## 重启服务\n\n```shell\nservice postgresql restart\n```\n","slug":"centos7安装postgresql","published":1,"updated":"2018-04-19T03:20:43.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8xf000hsof7cwz6s63j","content":"<h2 id=\"安装启动postgresql\"><a href=\"#安装启动postgresql\" class=\"headerlink\" title=\"安装启动postgresql\"></a>安装启动postgresql</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install postgresql-server</span><br><span class=\"line\">service postgresql initdb</span><br><span class=\"line\">service postgresql start</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改管理员密码\"><a href=\"#修改管理员密码\" class=\"headerlink\" title=\"修改管理员密码\"></a>修改管理员密码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su - postgres</span><br><span class=\"line\">psql</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ALTER USER postgres WITH PASSWORD <span class=\"string\">'postgres'</span>;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置远程访问\"><a href=\"#配置远程访问\" class=\"headerlink\" title=\"配置远程访问\"></a>配置远程访问</h2><p>修改<strong>/var/lib/pgsql/data/postgresql.conf</strong><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen_addresses = '*'</span><br></pre></td></tr></table></figure></p>\n<p>修改客户端认证配置文件<strong>/var/lib/pgsql/data/pg_hba.conf</strong>,添加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host  all  all   10.0.0.0/8  md5</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service postgresql restart</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装启动postgresql\"><a href=\"#安装启动postgresql\" class=\"headerlink\" title=\"安装启动postgresql\"></a>安装启动postgresql</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install postgresql-server</span><br><span class=\"line\">service postgresql initdb</span><br><span class=\"line\">service postgresql start</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改管理员密码\"><a href=\"#修改管理员密码\" class=\"headerlink\" title=\"修改管理员密码\"></a>修改管理员密码</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su - postgres</span><br><span class=\"line\">psql</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ALTER USER postgres WITH PASSWORD <span class=\"string\">'postgres'</span>;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置远程访问\"><a href=\"#配置远程访问\" class=\"headerlink\" title=\"配置远程访问\"></a>配置远程访问</h2><p>修改<strong>/var/lib/pgsql/data/postgresql.conf</strong><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen_addresses = '*'</span><br></pre></td></tr></table></figure></p>\n<p>修改客户端认证配置文件<strong>/var/lib/pgsql/data/pg_hba.conf</strong>,添加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host  all  all   10.0.0.0/8  md5</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service postgresql restart</span><br></pre></td></tr></table></figure>\n"},{"title":"curl测试restful服务","date":"2016-07-19T08:00:06.000Z","_content":"利用curl，可以很方便的测试restful服务，发送HTTP GET，POST，PUT，DELETE请求。也可以改变HTTP header来指定特别条件。\n\n### curl参数\n> -X/--request [GET|POST|PUT|DELETE|...]  <mark>指定http request方式</mark>    \n> -H/--header                             <mark>设定request请求的header</mark>  \n> -i/--include                            <mark>显示response响应的header</mark>  \n> -d/--data                               <mark>设定request的参数</mark>  \n> -v/--verbose                            <mark>输出更多的信息</mark>  \n> -u/--user                               <mark>使用者账号，密码</mark>  \n> -b/--cookie                             <mark>cookie</mark>\n\n### GET\n    $ curl -i http://localhost:5000/rest/api/v1.0/tasks\n\n### POST\n    $ curl -i -H \"Content-Type: application/json\" -X POST -d '{\"title\":\"learn python\"}' http://localhost:5000/rest/api/v1.0/tasks  \n\n### PUT\n    $ curl -i -H \"Content-Type: application/json\" -X PUT -d '{\"title\":\"learn nodejs\"}' http://localhost:5000/rest/api/v1.0/tasks/2\n\n### DELETE\n    $ curl -i -X DELETE http://localhost:5000/rest/api/v1.0/tasks/1\n  ","source":"_posts/curl测试restful服务.md","raw":"---\ntitle: curl测试restful服务\ndate: 2016-07-19 16:00:06\ntags: [curl,restful]\n---\n利用curl，可以很方便的测试restful服务，发送HTTP GET，POST，PUT，DELETE请求。也可以改变HTTP header来指定特别条件。\n\n### curl参数\n> -X/--request [GET|POST|PUT|DELETE|...]  <mark>指定http request方式</mark>    \n> -H/--header                             <mark>设定request请求的header</mark>  \n> -i/--include                            <mark>显示response响应的header</mark>  \n> -d/--data                               <mark>设定request的参数</mark>  \n> -v/--verbose                            <mark>输出更多的信息</mark>  \n> -u/--user                               <mark>使用者账号，密码</mark>  \n> -b/--cookie                             <mark>cookie</mark>\n\n### GET\n    $ curl -i http://localhost:5000/rest/api/v1.0/tasks\n\n### POST\n    $ curl -i -H \"Content-Type: application/json\" -X POST -d '{\"title\":\"learn python\"}' http://localhost:5000/rest/api/v1.0/tasks  \n\n### PUT\n    $ curl -i -H \"Content-Type: application/json\" -X PUT -d '{\"title\":\"learn nodejs\"}' http://localhost:5000/rest/api/v1.0/tasks/2\n\n### DELETE\n    $ curl -i -X DELETE http://localhost:5000/rest/api/v1.0/tasks/1\n  ","slug":"curl测试restful服务","published":1,"updated":"2018-04-19T03:20:43.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8xg000isof7j5qx8k9p","content":"<p>利用curl，可以很方便的测试restful服务，发送HTTP GET，POST，PUT，DELETE请求。也可以改变HTTP header来指定特别条件。</p>\n<h3 id=\"curl参数\"><a href=\"#curl参数\" class=\"headerlink\" title=\"curl参数\"></a>curl参数</h3><blockquote>\n<p>-X/–request [GET|POST|PUT|DELETE|…]  <mark>指定http request方式</mark><br>-H/–header                             <mark>设定request请求的header</mark><br>-i/–include                            <mark>显示response响应的header</mark><br>-d/–data                               <mark>设定request的参数</mark><br>-v/–verbose                            <mark>输出更多的信息</mark><br>-u/–user                               <mark>使用者账号，密码</mark><br>-b/–cookie                             <mark>cookie</mark></p>\n</blockquote>\n<h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h3><pre><code>$ curl -i http://localhost:5000/rest/api/v1.0/tasks\n</code></pre><h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><pre><code>$ curl -i -H &quot;Content-Type: application/json&quot; -X POST -d &apos;{&quot;title&quot;:&quot;learn python&quot;}&apos; http://localhost:5000/rest/api/v1.0/tasks  \n</code></pre><h3 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h3><pre><code>$ curl -i -H &quot;Content-Type: application/json&quot; -X PUT -d &apos;{&quot;title&quot;:&quot;learn nodejs&quot;}&apos; http://localhost:5000/rest/api/v1.0/tasks/2\n</code></pre><h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><pre><code>$ curl -i -X DELETE http://localhost:5000/rest/api/v1.0/tasks/1\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>利用curl，可以很方便的测试restful服务，发送HTTP GET，POST，PUT，DELETE请求。也可以改变HTTP header来指定特别条件。</p>\n<h3 id=\"curl参数\"><a href=\"#curl参数\" class=\"headerlink\" title=\"curl参数\"></a>curl参数</h3><blockquote>\n<p>-X/–request [GET|POST|PUT|DELETE|…]  <mark>指定http request方式</mark><br>-H/–header                             <mark>设定request请求的header</mark><br>-i/–include                            <mark>显示response响应的header</mark><br>-d/–data                               <mark>设定request的参数</mark><br>-v/–verbose                            <mark>输出更多的信息</mark><br>-u/–user                               <mark>使用者账号，密码</mark><br>-b/–cookie                             <mark>cookie</mark></p>\n</blockquote>\n<h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h3><pre><code>$ curl -i http://localhost:5000/rest/api/v1.0/tasks\n</code></pre><h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><pre><code>$ curl -i -H &quot;Content-Type: application/json&quot; -X POST -d &apos;{&quot;title&quot;:&quot;learn python&quot;}&apos; http://localhost:5000/rest/api/v1.0/tasks  \n</code></pre><h3 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h3><pre><code>$ curl -i -H &quot;Content-Type: application/json&quot; -X PUT -d &apos;{&quot;title&quot;:&quot;learn nodejs&quot;}&apos; http://localhost:5000/rest/api/v1.0/tasks/2\n</code></pre><h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><pre><code>$ curl -i -X DELETE http://localhost:5000/rest/api/v1.0/tasks/1\n</code></pre>"},{"title":"centOS下配置Virtualenv+Flask+Gunicorn+Supervisor+Nginx","date":"2016-07-18T08:59:19.000Z","_content":"在阿里云上部署flask环境。  \n\n## 安装virtualenv并创建工程  \n\n    $ pip install virtualenv\n    $ virtualenv stooge\n    $ cd stooge\n    $ source bin/activate\n\n## 安装flask并创建一个服务  \n\n    $ pip install flask\n    $ touch runserver.py\n    $ vim runserver.py\n    $ chmod a+x runserver.py\n        \n### runserver.py  \n\n    from flask import Flask\n    \n    app = Flask(__name__)\n    \n    @app.route('/')\n    def hello_world():\n    \treturn 'Hello World!'\n    \n    if __name__ == '__main__':\n    \tapp.run()\n \n## 安装Gunicorn  \n \n Gunicorn是一个开源Python WSGI UNIX的HTTP服务器，默认是同步工作，支持Gevent，Eventlet异步。  \n\n    $ pip install gunicorn\n\n### gunicorn.conf  \n\n在项目stooge根目录下, 配置gevent workers数处理并发，及绑定本地的端口号。 \n\n    #worker process number\n    workers = 3\n    #bind local port\n    bind = '127.0.0.1:8000'\n\n## 安装Supervisor    \n\n    $ sudo pip install supervisor\n\nsupervisor是用python实现的一款进程管理工具。supervisor会帮你把管理的应用程序转成daemon程序，而且可以方便的通过命令开启，关闭，重启等操作。而且它管理的进程一旦崩溃会自动重启，这样就可以保证程序在执行中断后自我修复。  \n\n### supervisor配置\n\nsupervisor包括两部分：   \n\n* supervisord  (server端)\n* supervisorctl  (client端)\n\n重定向配置文件  \n\n    $ sudo echo_supervisord_conf > /etc/supervisord.conf\n    \n虽然可以把所有的配置项都写到supervisord.conf文件里，但并不推荐这样做。而是通过include的方式把不同的程序组写到不同的配置文件里。  \n\n修改supervisord.conf的include section  \n\n    [include]\n    files = /etc/supervisor/conf.d/*.conf\n    \n添加program配置  \n\n新建目录/etc/supervisor/conf.d，并创建stooge.conf\n\n    $ touch stooge.conf\n    $ vim stooge.conf\n    [program:stooge]\n    command=/home/$username/stooge/bin/gunicorn runserver:app -c /home/$username/stooge/gunicorn.conf\n    directory=/home/$username/stooge\n    user=$username\n    autostart=true\n    autorestart=true\n    stdout_logfile=/home/$username/stooge/logs/gunicorn_supervisor.log\n\n这样的配置，通过[program:stooge]来告诉supervisord需要管理哪个进程。可以在client端(supervisorctl或web页面)显示，并对该进程start,restart,stop。\n\n### supervisorctl\n\nsupervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定配置文件。  \n\n    $ supervisord -c /etc/supervisord.conf\n\nshell 命令  \n\n    $ supervisorctl status #查看程序状态\n    $ supervisorctl stop stooge\n    $ supervisorctl start stooge\n    $ supervisorctl restart stooge\n    $ supervisorctl reread #读取有更新的配置文件\n    $ supervisorctl update #重启配置文件修改过的进程\n\n在这里我们启动stooge  \n\n    $ supervisorctl start stooge\n\n## 安装nginx\n    $ yum install nginx\n\ncentos7下的nginx1.6.3没有sites-available和sites-enabled子目录。但是有conf.d子目录。和配置supervisord一样，也是可以通过include的方式把不同的程序组写到不同的配置文件里。\n\n### nginx配置\n\n确保/etc/nginx/nginx.conf中，http模块中引入conf.d子目录。  \n  \n    include /etc/nginx/conf.d/*.conf\n\n在/etc/nginx/conf.d下创建stooge.conf  \n\n    server {\n    \tlisten 80;\n    \tserver_name xx.xx.xx.xx;\n    \t\n    \troot /home/$username/stooge/;\n    \taccess_log /home/$username/stooge/access.log;\n    \terror_log /home/$username/stooge/error.log;\n    \t\n    \tlocation / {\n    \t\tproxy_set_header X-Forword-For $proxy_add_x_forwarded_for;\n    \t\tproxy_set_header Host $http_host;\n    \t\tproxy_redirect off;\n    \t\tif (!-f $request_filename) {\n    \t\t\tproxy_pass http://127.0.0.1:8000;\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    }\n\n重启nginx服务  \n\n    $sudo service nginx restart\n\n## 配置firewalld  \n\n安装完nginx后，80端口是没有开放的，外网无法访问。  \n增加http,https到/etc/firewalld/zones/public.xml文件。  \n    \n    <service name=\"http\"/>\n    <service name=\"https\"/>\n    \n## 访问helloworld服务\n\n外网访问ip，显示helloworld了！\n\n\n\n    \n\n\n\n","source":"_posts/centOS下配置Virtualenv-Flask-Gunicorn-Supervisor-Nginx.md","raw":"---\ntitle: centOS下配置Virtualenv+Flask+Gunicorn+Supervisor+Nginx\ndate: 2016-07-18 16:59:19\ntags: [centOS,Virtualenv,flask,Gunicorn,Supervisor]\n---\n在阿里云上部署flask环境。  \n\n## 安装virtualenv并创建工程  \n\n    $ pip install virtualenv\n    $ virtualenv stooge\n    $ cd stooge\n    $ source bin/activate\n\n## 安装flask并创建一个服务  \n\n    $ pip install flask\n    $ touch runserver.py\n    $ vim runserver.py\n    $ chmod a+x runserver.py\n        \n### runserver.py  \n\n    from flask import Flask\n    \n    app = Flask(__name__)\n    \n    @app.route('/')\n    def hello_world():\n    \treturn 'Hello World!'\n    \n    if __name__ == '__main__':\n    \tapp.run()\n \n## 安装Gunicorn  \n \n Gunicorn是一个开源Python WSGI UNIX的HTTP服务器，默认是同步工作，支持Gevent，Eventlet异步。  \n\n    $ pip install gunicorn\n\n### gunicorn.conf  \n\n在项目stooge根目录下, 配置gevent workers数处理并发，及绑定本地的端口号。 \n\n    #worker process number\n    workers = 3\n    #bind local port\n    bind = '127.0.0.1:8000'\n\n## 安装Supervisor    \n\n    $ sudo pip install supervisor\n\nsupervisor是用python实现的一款进程管理工具。supervisor会帮你把管理的应用程序转成daemon程序，而且可以方便的通过命令开启，关闭，重启等操作。而且它管理的进程一旦崩溃会自动重启，这样就可以保证程序在执行中断后自我修复。  \n\n### supervisor配置\n\nsupervisor包括两部分：   \n\n* supervisord  (server端)\n* supervisorctl  (client端)\n\n重定向配置文件  \n\n    $ sudo echo_supervisord_conf > /etc/supervisord.conf\n    \n虽然可以把所有的配置项都写到supervisord.conf文件里，但并不推荐这样做。而是通过include的方式把不同的程序组写到不同的配置文件里。  \n\n修改supervisord.conf的include section  \n\n    [include]\n    files = /etc/supervisor/conf.d/*.conf\n    \n添加program配置  \n\n新建目录/etc/supervisor/conf.d，并创建stooge.conf\n\n    $ touch stooge.conf\n    $ vim stooge.conf\n    [program:stooge]\n    command=/home/$username/stooge/bin/gunicorn runserver:app -c /home/$username/stooge/gunicorn.conf\n    directory=/home/$username/stooge\n    user=$username\n    autostart=true\n    autorestart=true\n    stdout_logfile=/home/$username/stooge/logs/gunicorn_supervisor.log\n\n这样的配置，通过[program:stooge]来告诉supervisord需要管理哪个进程。可以在client端(supervisorctl或web页面)显示，并对该进程start,restart,stop。\n\n### supervisorctl\n\nsupervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定配置文件。  \n\n    $ supervisord -c /etc/supervisord.conf\n\nshell 命令  \n\n    $ supervisorctl status #查看程序状态\n    $ supervisorctl stop stooge\n    $ supervisorctl start stooge\n    $ supervisorctl restart stooge\n    $ supervisorctl reread #读取有更新的配置文件\n    $ supervisorctl update #重启配置文件修改过的进程\n\n在这里我们启动stooge  \n\n    $ supervisorctl start stooge\n\n## 安装nginx\n    $ yum install nginx\n\ncentos7下的nginx1.6.3没有sites-available和sites-enabled子目录。但是有conf.d子目录。和配置supervisord一样，也是可以通过include的方式把不同的程序组写到不同的配置文件里。\n\n### nginx配置\n\n确保/etc/nginx/nginx.conf中，http模块中引入conf.d子目录。  \n  \n    include /etc/nginx/conf.d/*.conf\n\n在/etc/nginx/conf.d下创建stooge.conf  \n\n    server {\n    \tlisten 80;\n    \tserver_name xx.xx.xx.xx;\n    \t\n    \troot /home/$username/stooge/;\n    \taccess_log /home/$username/stooge/access.log;\n    \terror_log /home/$username/stooge/error.log;\n    \t\n    \tlocation / {\n    \t\tproxy_set_header X-Forword-For $proxy_add_x_forwarded_for;\n    \t\tproxy_set_header Host $http_host;\n    \t\tproxy_redirect off;\n    \t\tif (!-f $request_filename) {\n    \t\t\tproxy_pass http://127.0.0.1:8000;\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    }\n\n重启nginx服务  \n\n    $sudo service nginx restart\n\n## 配置firewalld  \n\n安装完nginx后，80端口是没有开放的，外网无法访问。  \n增加http,https到/etc/firewalld/zones/public.xml文件。  \n    \n    <service name=\"http\"/>\n    <service name=\"https\"/>\n    \n## 访问helloworld服务\n\n外网访问ip，显示helloworld了！\n\n\n\n    \n\n\n\n","slug":"centOS下配置Virtualenv-Flask-Gunicorn-Supervisor-Nginx","published":1,"updated":"2018-04-19T03:20:43.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8xh000jsof7b9wk1qs2","content":"<p>在阿里云上部署flask环境。  </p>\n<h2 id=\"安装virtualenv并创建工程\"><a href=\"#安装virtualenv并创建工程\" class=\"headerlink\" title=\"安装virtualenv并创建工程\"></a>安装virtualenv并创建工程</h2><pre><code>$ pip install virtualenv\n$ virtualenv stooge\n$ cd stooge\n$ source bin/activate\n</code></pre><h2 id=\"安装flask并创建一个服务\"><a href=\"#安装flask并创建一个服务\" class=\"headerlink\" title=\"安装flask并创建一个服务\"></a>安装flask并创建一个服务</h2><pre><code>$ pip install flask\n$ touch runserver.py\n$ vim runserver.py\n$ chmod a+x runserver.py\n</code></pre><h3 id=\"runserver-py\"><a href=\"#runserver-py\" class=\"headerlink\" title=\"runserver.py\"></a>runserver.py</h3><pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(&apos;/&apos;)\ndef hello_world():\n    return &apos;Hello World!&apos;\n\nif __name__ == &apos;__main__&apos;:\n    app.run()\n</code></pre><h2 id=\"安装Gunicorn\"><a href=\"#安装Gunicorn\" class=\"headerlink\" title=\"安装Gunicorn\"></a>安装Gunicorn</h2><p> Gunicorn是一个开源Python WSGI UNIX的HTTP服务器，默认是同步工作，支持Gevent，Eventlet异步。  </p>\n<pre><code>$ pip install gunicorn\n</code></pre><h3 id=\"gunicorn-conf\"><a href=\"#gunicorn-conf\" class=\"headerlink\" title=\"gunicorn.conf\"></a>gunicorn.conf</h3><p>在项目stooge根目录下, 配置gevent workers数处理并发，及绑定本地的端口号。 </p>\n<pre><code>#worker process number\nworkers = 3\n#bind local port\nbind = &apos;127.0.0.1:8000&apos;\n</code></pre><h2 id=\"安装Supervisor\"><a href=\"#安装Supervisor\" class=\"headerlink\" title=\"安装Supervisor\"></a>安装Supervisor</h2><pre><code>$ sudo pip install supervisor\n</code></pre><p>supervisor是用python实现的一款进程管理工具。supervisor会帮你把管理的应用程序转成daemon程序，而且可以方便的通过命令开启，关闭，重启等操作。而且它管理的进程一旦崩溃会自动重启，这样就可以保证程序在执行中断后自我修复。  </p>\n<h3 id=\"supervisor配置\"><a href=\"#supervisor配置\" class=\"headerlink\" title=\"supervisor配置\"></a>supervisor配置</h3><p>supervisor包括两部分：   </p>\n<ul>\n<li>supervisord  (server端)</li>\n<li>supervisorctl  (client端)</li>\n</ul>\n<p>重定向配置文件  </p>\n<pre><code>$ sudo echo_supervisord_conf &gt; /etc/supervisord.conf\n</code></pre><p>虽然可以把所有的配置项都写到supervisord.conf文件里，但并不推荐这样做。而是通过include的方式把不同的程序组写到不同的配置文件里。  </p>\n<p>修改supervisord.conf的include section  </p>\n<pre><code>[include]\nfiles = /etc/supervisor/conf.d/*.conf\n</code></pre><p>添加program配置  </p>\n<p>新建目录/etc/supervisor/conf.d，并创建stooge.conf</p>\n<pre><code>$ touch stooge.conf\n$ vim stooge.conf\n[program:stooge]\ncommand=/home/$username/stooge/bin/gunicorn runserver:app -c /home/$username/stooge/gunicorn.conf\ndirectory=/home/$username/stooge\nuser=$username\nautostart=true\nautorestart=true\nstdout_logfile=/home/$username/stooge/logs/gunicorn_supervisor.log\n</code></pre><p>这样的配置，通过[program:stooge]来告诉supervisord需要管理哪个进程。可以在client端(supervisorctl或web页面)显示，并对该进程start,restart,stop。</p>\n<h3 id=\"supervisorctl\"><a href=\"#supervisorctl\" class=\"headerlink\" title=\"supervisorctl\"></a>supervisorctl</h3><p>supervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定配置文件。  </p>\n<pre><code>$ supervisord -c /etc/supervisord.conf\n</code></pre><p>shell 命令  </p>\n<pre><code>$ supervisorctl status #查看程序状态\n$ supervisorctl stop stooge\n$ supervisorctl start stooge\n$ supervisorctl restart stooge\n$ supervisorctl reread #读取有更新的配置文件\n$ supervisorctl update #重启配置文件修改过的进程\n</code></pre><p>在这里我们启动stooge  </p>\n<pre><code>$ supervisorctl start stooge\n</code></pre><h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><pre><code>$ yum install nginx\n</code></pre><p>centos7下的nginx1.6.3没有sites-available和sites-enabled子目录。但是有conf.d子目录。和配置supervisord一样，也是可以通过include的方式把不同的程序组写到不同的配置文件里。</p>\n<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><p>确保/etc/nginx/nginx.conf中，http模块中引入conf.d子目录。  </p>\n<pre><code>include /etc/nginx/conf.d/*.conf\n</code></pre><p>在/etc/nginx/conf.d下创建stooge.conf  </p>\n<pre><code>server {\n    listen 80;\n    server_name xx.xx.xx.xx;\n\n    root /home/$username/stooge/;\n    access_log /home/$username/stooge/access.log;\n    error_log /home/$username/stooge/error.log;\n\n    location / {\n        proxy_set_header X-Forword-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        if (!-f $request_filename) {\n            proxy_pass http://127.0.0.1:8000;\n            break;\n        }\n    }\n}\n</code></pre><p>重启nginx服务  </p>\n<pre><code>$sudo service nginx restart\n</code></pre><h2 id=\"配置firewalld\"><a href=\"#配置firewalld\" class=\"headerlink\" title=\"配置firewalld\"></a>配置firewalld</h2><p>安装完nginx后，80端口是没有开放的，外网无法访问。<br>增加http,https到/etc/firewalld/zones/public.xml文件。  </p>\n<pre><code>&lt;service name=&quot;http&quot;/&gt;\n&lt;service name=&quot;https&quot;/&gt;\n</code></pre><h2 id=\"访问helloworld服务\"><a href=\"#访问helloworld服务\" class=\"headerlink\" title=\"访问helloworld服务\"></a>访问helloworld服务</h2><p>外网访问ip，显示helloworld了！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在阿里云上部署flask环境。  </p>\n<h2 id=\"安装virtualenv并创建工程\"><a href=\"#安装virtualenv并创建工程\" class=\"headerlink\" title=\"安装virtualenv并创建工程\"></a>安装virtualenv并创建工程</h2><pre><code>$ pip install virtualenv\n$ virtualenv stooge\n$ cd stooge\n$ source bin/activate\n</code></pre><h2 id=\"安装flask并创建一个服务\"><a href=\"#安装flask并创建一个服务\" class=\"headerlink\" title=\"安装flask并创建一个服务\"></a>安装flask并创建一个服务</h2><pre><code>$ pip install flask\n$ touch runserver.py\n$ vim runserver.py\n$ chmod a+x runserver.py\n</code></pre><h3 id=\"runserver-py\"><a href=\"#runserver-py\" class=\"headerlink\" title=\"runserver.py\"></a>runserver.py</h3><pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(&apos;/&apos;)\ndef hello_world():\n    return &apos;Hello World!&apos;\n\nif __name__ == &apos;__main__&apos;:\n    app.run()\n</code></pre><h2 id=\"安装Gunicorn\"><a href=\"#安装Gunicorn\" class=\"headerlink\" title=\"安装Gunicorn\"></a>安装Gunicorn</h2><p> Gunicorn是一个开源Python WSGI UNIX的HTTP服务器，默认是同步工作，支持Gevent，Eventlet异步。  </p>\n<pre><code>$ pip install gunicorn\n</code></pre><h3 id=\"gunicorn-conf\"><a href=\"#gunicorn-conf\" class=\"headerlink\" title=\"gunicorn.conf\"></a>gunicorn.conf</h3><p>在项目stooge根目录下, 配置gevent workers数处理并发，及绑定本地的端口号。 </p>\n<pre><code>#worker process number\nworkers = 3\n#bind local port\nbind = &apos;127.0.0.1:8000&apos;\n</code></pre><h2 id=\"安装Supervisor\"><a href=\"#安装Supervisor\" class=\"headerlink\" title=\"安装Supervisor\"></a>安装Supervisor</h2><pre><code>$ sudo pip install supervisor\n</code></pre><p>supervisor是用python实现的一款进程管理工具。supervisor会帮你把管理的应用程序转成daemon程序，而且可以方便的通过命令开启，关闭，重启等操作。而且它管理的进程一旦崩溃会自动重启，这样就可以保证程序在执行中断后自我修复。  </p>\n<h3 id=\"supervisor配置\"><a href=\"#supervisor配置\" class=\"headerlink\" title=\"supervisor配置\"></a>supervisor配置</h3><p>supervisor包括两部分：   </p>\n<ul>\n<li>supervisord  (server端)</li>\n<li>supervisorctl  (client端)</li>\n</ul>\n<p>重定向配置文件  </p>\n<pre><code>$ sudo echo_supervisord_conf &gt; /etc/supervisord.conf\n</code></pre><p>虽然可以把所有的配置项都写到supervisord.conf文件里，但并不推荐这样做。而是通过include的方式把不同的程序组写到不同的配置文件里。  </p>\n<p>修改supervisord.conf的include section  </p>\n<pre><code>[include]\nfiles = /etc/supervisor/conf.d/*.conf\n</code></pre><p>添加program配置  </p>\n<p>新建目录/etc/supervisor/conf.d，并创建stooge.conf</p>\n<pre><code>$ touch stooge.conf\n$ vim stooge.conf\n[program:stooge]\ncommand=/home/$username/stooge/bin/gunicorn runserver:app -c /home/$username/stooge/gunicorn.conf\ndirectory=/home/$username/stooge\nuser=$username\nautostart=true\nautorestart=true\nstdout_logfile=/home/$username/stooge/logs/gunicorn_supervisor.log\n</code></pre><p>这样的配置，通过[program:stooge]来告诉supervisord需要管理哪个进程。可以在client端(supervisorctl或web页面)显示，并对该进程start,restart,stop。</p>\n<h3 id=\"supervisorctl\"><a href=\"#supervisorctl\" class=\"headerlink\" title=\"supervisorctl\"></a>supervisorctl</h3><p>supervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定配置文件。  </p>\n<pre><code>$ supervisord -c /etc/supervisord.conf\n</code></pre><p>shell 命令  </p>\n<pre><code>$ supervisorctl status #查看程序状态\n$ supervisorctl stop stooge\n$ supervisorctl start stooge\n$ supervisorctl restart stooge\n$ supervisorctl reread #读取有更新的配置文件\n$ supervisorctl update #重启配置文件修改过的进程\n</code></pre><p>在这里我们启动stooge  </p>\n<pre><code>$ supervisorctl start stooge\n</code></pre><h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><pre><code>$ yum install nginx\n</code></pre><p>centos7下的nginx1.6.3没有sites-available和sites-enabled子目录。但是有conf.d子目录。和配置supervisord一样，也是可以通过include的方式把不同的程序组写到不同的配置文件里。</p>\n<h3 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h3><p>确保/etc/nginx/nginx.conf中，http模块中引入conf.d子目录。  </p>\n<pre><code>include /etc/nginx/conf.d/*.conf\n</code></pre><p>在/etc/nginx/conf.d下创建stooge.conf  </p>\n<pre><code>server {\n    listen 80;\n    server_name xx.xx.xx.xx;\n\n    root /home/$username/stooge/;\n    access_log /home/$username/stooge/access.log;\n    error_log /home/$username/stooge/error.log;\n\n    location / {\n        proxy_set_header X-Forword-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        if (!-f $request_filename) {\n            proxy_pass http://127.0.0.1:8000;\n            break;\n        }\n    }\n}\n</code></pre><p>重启nginx服务  </p>\n<pre><code>$sudo service nginx restart\n</code></pre><h2 id=\"配置firewalld\"><a href=\"#配置firewalld\" class=\"headerlink\" title=\"配置firewalld\"></a>配置firewalld</h2><p>安装完nginx后，80端口是没有开放的，外网无法访问。<br>增加http,https到/etc/firewalld/zones/public.xml文件。  </p>\n<pre><code>&lt;service name=&quot;http&quot;/&gt;\n&lt;service name=&quot;https&quot;/&gt;\n</code></pre><h2 id=\"访问helloworld服务\"><a href=\"#访问helloworld服务\" class=\"headerlink\" title=\"访问helloworld服务\"></a>访问helloworld服务</h2><p>外网访问ip，显示helloworld了！</p>\n"},{"title":"docker-compose的使用","date":"2017-07-27T04:09:33.000Z","_content":"docker compose是一个用来定义和运行复杂应用的docker工具。使用compose，你可以在一个文件中定义一个多容器应用，然后使用一条命令来启动应用。    \n\n## 下载docker-compose\n\n```shell\ncurl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n## 创建应用目录\n```shell\nmkdir compose-gitbucket\ntouch docker-compose.yml\n```\n\n## docker-compose.yml配置文件\n```yml\ngitbucket:\n  image: f99aq8ove/gitbucket\n  volumes:\n    - ./gitbucket:/gitbucket\n  ports:\n    - \"8080:8080\"\n    - \"29418:29418\"\n  restart: always\n```\n\n## docker-compose命令\n> build 构建或重建服务    \n> help 命令帮助    \n> kill 杀掉容器    \n> logs 显示容器的输出内容    \n> port 打印绑定的开放端口    \n> ps 显示容器    \n> pull 拉取服务镜像    \n> restart 重启服务    \n> rm 删除停止的容器    \n> run 运行一个一次性命令    \n> scale 设置服务的容器数目    \n> start 开启服务    \n> stop 停止服务    \n> up 创建并启动容器    \n\n一般up之后，又改写了yml配置文件，则需要rm掉旧的容器，再up。\n\n## 后台启动\n在应用目录下启动\n\n```shell\ndocker-compose up -d\n```\n","source":"_posts/docker-compose的使用.md","raw":"---\ntitle: docker-compose的使用\ndate: 2017-07-27 12:09:33\ntags: [docker, docker-compose]\n---\ndocker compose是一个用来定义和运行复杂应用的docker工具。使用compose，你可以在一个文件中定义一个多容器应用，然后使用一条命令来启动应用。    \n\n## 下载docker-compose\n\n```shell\ncurl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n## 创建应用目录\n```shell\nmkdir compose-gitbucket\ntouch docker-compose.yml\n```\n\n## docker-compose.yml配置文件\n```yml\ngitbucket:\n  image: f99aq8ove/gitbucket\n  volumes:\n    - ./gitbucket:/gitbucket\n  ports:\n    - \"8080:8080\"\n    - \"29418:29418\"\n  restart: always\n```\n\n## docker-compose命令\n> build 构建或重建服务    \n> help 命令帮助    \n> kill 杀掉容器    \n> logs 显示容器的输出内容    \n> port 打印绑定的开放端口    \n> ps 显示容器    \n> pull 拉取服务镜像    \n> restart 重启服务    \n> rm 删除停止的容器    \n> run 运行一个一次性命令    \n> scale 设置服务的容器数目    \n> start 开启服务    \n> stop 停止服务    \n> up 创建并启动容器    \n\n一般up之后，又改写了yml配置文件，则需要rm掉旧的容器，再up。\n\n## 后台启动\n在应用目录下启动\n\n```shell\ndocker-compose up -d\n```\n","slug":"docker-compose的使用","published":1,"updated":"2018-04-19T03:20:43.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8xj000lsof7z5p8eq5c","content":"<p>docker compose是一个用来定义和运行复杂应用的docker工具。使用compose，你可以在一个文件中定义一个多容器应用，然后使用一条命令来启动应用。    </p>\n<h2 id=\"下载docker-compose\"><a href=\"#下载docker-compose\" class=\"headerlink\" title=\"下载docker-compose\"></a>下载docker-compose</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建应用目录\"><a href=\"#创建应用目录\" class=\"headerlink\" title=\"创建应用目录\"></a>创建应用目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir compose-gitbucket</span><br><span class=\"line\">touch docker-compose.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose-yml配置文件\"><a href=\"#docker-compose-yml配置文件\" class=\"headerlink\" title=\"docker-compose.yml配置文件\"></a>docker-compose.yml配置文件</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">gitbucket:</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"string\">f99aq8ove/gitbucket</span></span><br><span class=\"line\"><span class=\"attr\">  volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">./gitbucket:/gitbucket</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"8080:8080\"</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"29418:29418\"</span></span><br><span class=\"line\"><span class=\"attr\">  restart:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose命令\"><a href=\"#docker-compose命令\" class=\"headerlink\" title=\"docker-compose命令\"></a>docker-compose命令</h2><blockquote>\n<p>build 构建或重建服务<br>help 命令帮助<br>kill 杀掉容器<br>logs 显示容器的输出内容<br>port 打印绑定的开放端口<br>ps 显示容器<br>pull 拉取服务镜像<br>restart 重启服务<br>rm 删除停止的容器<br>run 运行一个一次性命令<br>scale 设置服务的容器数目<br>start 开启服务<br>stop 停止服务<br>up 创建并启动容器    </p>\n</blockquote>\n<p>一般up之后，又改写了yml配置文件，则需要rm掉旧的容器，再up。</p>\n<h2 id=\"后台启动\"><a href=\"#后台启动\" class=\"headerlink\" title=\"后台启动\"></a>后台启动</h2><p>在应用目录下启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>docker compose是一个用来定义和运行复杂应用的docker工具。使用compose，你可以在一个文件中定义一个多容器应用，然后使用一条命令来启动应用。    </p>\n<h2 id=\"下载docker-compose\"><a href=\"#下载docker-compose\" class=\"headerlink\" title=\"下载docker-compose\"></a>下载docker-compose</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.3.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建应用目录\"><a href=\"#创建应用目录\" class=\"headerlink\" title=\"创建应用目录\"></a>创建应用目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir compose-gitbucket</span><br><span class=\"line\">touch docker-compose.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose-yml配置文件\"><a href=\"#docker-compose-yml配置文件\" class=\"headerlink\" title=\"docker-compose.yml配置文件\"></a>docker-compose.yml配置文件</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">gitbucket:</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"string\">f99aq8ove/gitbucket</span></span><br><span class=\"line\"><span class=\"attr\">  volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">./gitbucket:/gitbucket</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"8080:8080\"</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"29418:29418\"</span></span><br><span class=\"line\"><span class=\"attr\">  restart:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose命令\"><a href=\"#docker-compose命令\" class=\"headerlink\" title=\"docker-compose命令\"></a>docker-compose命令</h2><blockquote>\n<p>build 构建或重建服务<br>help 命令帮助<br>kill 杀掉容器<br>logs 显示容器的输出内容<br>port 打印绑定的开放端口<br>ps 显示容器<br>pull 拉取服务镜像<br>restart 重启服务<br>rm 删除停止的容器<br>run 运行一个一次性命令<br>scale 设置服务的容器数目<br>start 开启服务<br>stop 停止服务<br>up 创建并启动容器    </p>\n</blockquote>\n<p>一般up之后，又改写了yml配置文件，则需要rm掉旧的容器，再up。</p>\n<h2 id=\"后台启动\"><a href=\"#后台启动\" class=\"headerlink\" title=\"后台启动\"></a>后台启动</h2><p>在应用目录下启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n"},{"title":"docker创建私有仓库","date":"2017-07-24T08:50:48.000Z","_content":"\n## 拉取registry的镜像\n```\ndocker pull registry:2.1.1\n```\n## 启动容器\n```\ndocker run -d -v /root/compose-docker-registry:/var/lib/registry -p 5000:5000 --restart=always --name registry2 --privileged registry:2.1.1\n```\n## 打包镜像push到本地仓库\n```\ndocker tag postgres $registry-address:5000/postgres\ndocker push $registry-address:5000/postgres\n```\n   \n## list仓库中的镜像\n在client端执行\n```\ncurl -XGET http://$registry-address:5000/v2/_catalog    \n```\n\n## 可能问题\n\n#### docker received unexpected HTTP status:501 Not Implemented\n这个问题是client端配置了docker的http-proxy，没有将docker的私有仓库registry所在ip设为例外导致的。\n#### server gave HTTP response to HTTPS client\nregistry默认的是https协议，因此需要在client端配置insecure-registries。    \n我的docker版本是1.12.1，配置文件是/etc/docker/daemon.json    \n```\n{\"insecure-registries\":[\"$registry-address:5000\"]}\n```\n        ","source":"_posts/docker创建私有仓库.md","raw":"---\ntitle: docker创建私有仓库\ndate: 2017-07-24 16:50:48\ntags: [docker, registry]\n---\n\n## 拉取registry的镜像\n```\ndocker pull registry:2.1.1\n```\n## 启动容器\n```\ndocker run -d -v /root/compose-docker-registry:/var/lib/registry -p 5000:5000 --restart=always --name registry2 --privileged registry:2.1.1\n```\n## 打包镜像push到本地仓库\n```\ndocker tag postgres $registry-address:5000/postgres\ndocker push $registry-address:5000/postgres\n```\n   \n## list仓库中的镜像\n在client端执行\n```\ncurl -XGET http://$registry-address:5000/v2/_catalog    \n```\n\n## 可能问题\n\n#### docker received unexpected HTTP status:501 Not Implemented\n这个问题是client端配置了docker的http-proxy，没有将docker的私有仓库registry所在ip设为例外导致的。\n#### server gave HTTP response to HTTPS client\nregistry默认的是https协议，因此需要在client端配置insecure-registries。    \n我的docker版本是1.12.1，配置文件是/etc/docker/daemon.json    \n```\n{\"insecure-registries\":[\"$registry-address:5000\"]}\n```\n        ","slug":"docker创建私有仓库","published":1,"updated":"2018-04-19T03:20:43.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8xm000msof71ldskhbu","content":"<h2 id=\"拉取registry的镜像\"><a href=\"#拉取registry的镜像\" class=\"headerlink\" title=\"拉取registry的镜像\"></a>拉取registry的镜像</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">pull</span> <span class=\"selector-tag\">registry</span><span class=\"selector-pseudo\">:2.1.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v <span class=\"string\">/root/compose-docker-registry</span>:<span class=\"string\">/var/lib/registry</span> -p 5000<span class=\"function\">:5000</span> <span class=\"params\">--restart=always</span> <span class=\"params\">--name</span> registry2 <span class=\"params\">--privileged</span> registry<span class=\"function\">:2.1.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"打包镜像push到本地仓库\"><a href=\"#打包镜像push到本地仓库\" class=\"headerlink\" title=\"打包镜像push到本地仓库\"></a>打包镜像push到本地仓库</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag postgres <span class=\"variable\">$registry</span>-<span class=\"selector-tag\">address</span>:<span class=\"number\">5000</span>/postgres</span><br><span class=\"line\">docker push <span class=\"variable\">$registry</span>-<span class=\"selector-tag\">address</span>:<span class=\"number\">5000</span>/postgres</span><br></pre></td></tr></table></figure>\n<h2 id=\"list仓库中的镜像\"><a href=\"#list仓库中的镜像\" class=\"headerlink\" title=\"list仓库中的镜像\"></a>list仓库中的镜像</h2><p>在client端执行<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET http:<span class=\"regexp\">//</span><span class=\"variable\">$registry</span>-address:<span class=\"number\">5000</span><span class=\"regexp\">/v2/</span>_catalog</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可能问题\"><a href=\"#可能问题\" class=\"headerlink\" title=\"可能问题\"></a>可能问题</h2><h4 id=\"docker-received-unexpected-HTTP-status-501-Not-Implemented\"><a href=\"#docker-received-unexpected-HTTP-status-501-Not-Implemented\" class=\"headerlink\" title=\"docker received unexpected HTTP status:501 Not Implemented\"></a>docker received unexpected HTTP status:501 Not Implemented</h4><p>这个问题是client端配置了docker的http-proxy，没有将docker的私有仓库registry所在ip设为例外导致的。</p>\n<h4 id=\"server-gave-HTTP-response-to-HTTPS-client\"><a href=\"#server-gave-HTTP-response-to-HTTPS-client\" class=\"headerlink\" title=\"server gave HTTP response to HTTPS client\"></a>server gave HTTP response to HTTPS client</h4><p>registry默认的是https协议，因此需要在client端配置insecure-registries。<br>我的docker版本是1.12.1，配置文件是/etc/docker/daemon.json<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"insecure-registries\"</span>:[<span class=\"string\">\"$registry-address:5000\"</span>]&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"拉取registry的镜像\"><a href=\"#拉取registry的镜像\" class=\"headerlink\" title=\"拉取registry的镜像\"></a>拉取registry的镜像</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">pull</span> <span class=\"selector-tag\">registry</span><span class=\"selector-pseudo\">:2.1.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v <span class=\"string\">/root/compose-docker-registry</span>:<span class=\"string\">/var/lib/registry</span> -p 5000<span class=\"function\">:5000</span> <span class=\"params\">--restart=always</span> <span class=\"params\">--name</span> registry2 <span class=\"params\">--privileged</span> registry<span class=\"function\">:2.1.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"打包镜像push到本地仓库\"><a href=\"#打包镜像push到本地仓库\" class=\"headerlink\" title=\"打包镜像push到本地仓库\"></a>打包镜像push到本地仓库</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag postgres <span class=\"variable\">$registry</span>-<span class=\"selector-tag\">address</span>:<span class=\"number\">5000</span>/postgres</span><br><span class=\"line\">docker push <span class=\"variable\">$registry</span>-<span class=\"selector-tag\">address</span>:<span class=\"number\">5000</span>/postgres</span><br></pre></td></tr></table></figure>\n<h2 id=\"list仓库中的镜像\"><a href=\"#list仓库中的镜像\" class=\"headerlink\" title=\"list仓库中的镜像\"></a>list仓库中的镜像</h2><p>在client端执行<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XGET http:<span class=\"regexp\">//</span><span class=\"variable\">$registry</span>-address:<span class=\"number\">5000</span><span class=\"regexp\">/v2/</span>_catalog</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可能问题\"><a href=\"#可能问题\" class=\"headerlink\" title=\"可能问题\"></a>可能问题</h2><h4 id=\"docker-received-unexpected-HTTP-status-501-Not-Implemented\"><a href=\"#docker-received-unexpected-HTTP-status-501-Not-Implemented\" class=\"headerlink\" title=\"docker received unexpected HTTP status:501 Not Implemented\"></a>docker received unexpected HTTP status:501 Not Implemented</h4><p>这个问题是client端配置了docker的http-proxy，没有将docker的私有仓库registry所在ip设为例外导致的。</p>\n<h4 id=\"server-gave-HTTP-response-to-HTTPS-client\"><a href=\"#server-gave-HTTP-response-to-HTTPS-client\" class=\"headerlink\" title=\"server gave HTTP response to HTTPS client\"></a>server gave HTTP response to HTTPS client</h4><p>registry默认的是https协议，因此需要在client端配置insecure-registries。<br>我的docker版本是1.12.1，配置文件是/etc/docker/daemon.json<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"insecure-registries\"</span>:[<span class=\"string\">\"$registry-address:5000\"</span>]&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"docker设置http代理","date":"2017-07-24T08:51:51.000Z","_content":"#### 创建目录\n```\nmkdir /etc/systemd/system/docker.service.d\n```\n\n#### 创建http-proxy.conf文件\n```\ntouch /etc/systemd/system/docker.service.d/http-proxy.conf\n```\n\n#### 在http-proxy.conf文件中记入\n\n```\n[Service]\nEnvironment=\"HTTP_PROXY=http://username:passwd@hostname:port/\" \"NO_PROXY=localhost,127.0.0.1\"\n```\n\n#### reload配置及重启docker服务\n```\nsystemctl daemon-reload\nsystemctl show docker --property Environment\nsystemctl restart docker.service\n```\n","source":"_posts/docker设置http代理.md","raw":"---\ntitle: docker设置http代理\ndate: 2017-07-24 16:51:51\ntags: [docker, proxy]\n---\n#### 创建目录\n```\nmkdir /etc/systemd/system/docker.service.d\n```\n\n#### 创建http-proxy.conf文件\n```\ntouch /etc/systemd/system/docker.service.d/http-proxy.conf\n```\n\n#### 在http-proxy.conf文件中记入\n\n```\n[Service]\nEnvironment=\"HTTP_PROXY=http://username:passwd@hostname:port/\" \"NO_PROXY=localhost,127.0.0.1\"\n```\n\n#### reload配置及重启docker服务\n```\nsystemctl daemon-reload\nsystemctl show docker --property Environment\nsystemctl restart docker.service\n```\n","slug":"docker设置http代理","published":1,"updated":"2018-04-19T03:20:43.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8xq000osof72u9i6ghk","content":"<h4 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /etc/systemd/system/docker<span class=\"selector-class\">.service</span><span class=\"selector-class\">.d</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建http-proxy-conf文件\"><a href=\"#创建http-proxy-conf文件\" class=\"headerlink\" title=\"创建http-proxy.conf文件\"></a>创建http-proxy.conf文件</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/systemd/system/docker<span class=\"selector-class\">.service</span><span class=\"selector-class\">.d</span>/http-proxy.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"在http-proxy-conf文件中记入\"><a href=\"#在http-proxy-conf文件中记入\" class=\"headerlink\" title=\"在http-proxy.conf文件中记入\"></a>在http-proxy.conf文件中记入</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">Environment</span>=<span class=\"string\">\"HTTP_PROXY=http://username:passwd@hostname:port/\"</span> <span class=\"string\">\"NO_PROXY=localhost,127.0.0.1\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"reload配置及重启docker服务\"><a href=\"#reload配置及重启docker服务\" class=\"headerlink\" title=\"reload配置及重启docker服务\"></a>reload配置及重启docker服务</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl show docker --<span class=\"keyword\">property</span><span class=\"title\"> </span>Environment</span><br><span class=\"line\">systemctl restart docker.service</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /etc/systemd/system/docker<span class=\"selector-class\">.service</span><span class=\"selector-class\">.d</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建http-proxy-conf文件\"><a href=\"#创建http-proxy-conf文件\" class=\"headerlink\" title=\"创建http-proxy.conf文件\"></a>创建http-proxy.conf文件</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/systemd/system/docker<span class=\"selector-class\">.service</span><span class=\"selector-class\">.d</span>/http-proxy.conf</span><br></pre></td></tr></table></figure>\n<h4 id=\"在http-proxy-conf文件中记入\"><a href=\"#在http-proxy-conf文件中记入\" class=\"headerlink\" title=\"在http-proxy.conf文件中记入\"></a>在http-proxy.conf文件中记入</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">Environment</span>=<span class=\"string\">\"HTTP_PROXY=http://username:passwd@hostname:port/\"</span> <span class=\"string\">\"NO_PROXY=localhost,127.0.0.1\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"reload配置及重启docker服务\"><a href=\"#reload配置及重启docker服务\" class=\"headerlink\" title=\"reload配置及重启docker服务\"></a>reload配置及重启docker服务</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl show docker --<span class=\"keyword\">property</span><span class=\"title\"> </span>Environment</span><br><span class=\"line\">systemctl restart docker.service</span><br></pre></td></tr></table></figure>\n"},{"title":"docker容器启动iptables报错","date":"2017-03-28T12:22:32.000Z","_content":"### 错误信息\n```\ndocker0: iptables: No chain/target/match by that name\n```\n### 重启docker\n```\nservice docker restart\n```\n### 列出iptables的所有规则\n```\niptables -L\n```\n可以看到iptables里面多出了Chain Docker的选项。    \n经验为：在启动firewalld之后，iptables被激活，此时没有docker chain，重启docker后被加入到iptable里面。\n","source":"_posts/docker容器启动iptables报错.md","raw":"---\ntitle: docker容器启动iptables报错\ndate: 2017-03-28 20:22:32\ntags: [docker,iptables]\n---\n### 错误信息\n```\ndocker0: iptables: No chain/target/match by that name\n```\n### 重启docker\n```\nservice docker restart\n```\n### 列出iptables的所有规则\n```\niptables -L\n```\n可以看到iptables里面多出了Chain Docker的选项。    \n经验为：在启动firewalld之后，iptables被激活，此时没有docker chain，重启docker后被加入到iptable里面。\n","slug":"docker容器启动iptables报错","published":1,"updated":"2018-04-19T03:20:43.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8xt000psof7ompydoll","content":"<h3 id=\"错误信息\"><a href=\"#错误信息\" class=\"headerlink\" title=\"错误信息\"></a>错误信息</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">docker0:</span> <span class=\"attr\">iptables:</span> <span class=\"literal\">No</span> <span class=\"string\">chain/target/match</span> <span class=\"string\">by</span> <span class=\"string\">that</span> <span class=\"string\">name</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重启docker\"><a href=\"#重启docker\" class=\"headerlink\" title=\"重启docker\"></a>重启docker</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">service docker restart</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"列出iptables的所有规则\"><a href=\"#列出iptables的所有规则\" class=\"headerlink\" title=\"列出iptables的所有规则\"></a>列出iptables的所有规则</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">iptables -L</span></span><br></pre></td></tr></table></figure>\n<p>可以看到iptables里面多出了Chain Docker的选项。<br>经验为：在启动firewalld之后，iptables被激活，此时没有docker chain，重启docker后被加入到iptable里面。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"错误信息\"><a href=\"#错误信息\" class=\"headerlink\" title=\"错误信息\"></a>错误信息</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">docker0:</span> <span class=\"attr\">iptables:</span> <span class=\"literal\">No</span> <span class=\"string\">chain/target/match</span> <span class=\"string\">by</span> <span class=\"string\">that</span> <span class=\"string\">name</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重启docker\"><a href=\"#重启docker\" class=\"headerlink\" title=\"重启docker\"></a>重启docker</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">service docker restart</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"列出iptables的所有规则\"><a href=\"#列出iptables的所有规则\" class=\"headerlink\" title=\"列出iptables的所有规则\"></a>列出iptables的所有规则</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">iptables -L</span></span><br></pre></td></tr></table></figure>\n<p>可以看到iptables里面多出了Chain Docker的选项。<br>经验为：在启动firewalld之后，iptables被激活，此时没有docker chain，重启docker后被加入到iptable里面。</p>\n"},{"title":"docker部署web环境","date":"2017-03-28T12:04:17.000Z","_content":"### postgresql\n```\n1. docker pull sameersbn/postgresql\n2. docker run --name=postgresql -itd --restart always \\\n--publish 5432:5432 \\\n--volume /opt/postgresql/data:/var/lib/postgresql \\\n--env 'DB_USER=mymebyo_adm01' --env 'DB_PASS=mymebyo_adm01' --env 'DB_NAME=mymebyo' \\\nsameersbn/postgresql    \n```\n### redis\n```\n1. docker pull redis\n2. docker run --name=redis -p 6379:6379 -v /opt/redis/data:/data -d redis redis-server --appendonly yes\n```\n**redis-server --appendonly yes** :在容器执行redis-server启动命令，并打开redis持久化配置\n### java web\n```\n1. docker pull java\n2. docker run -it --volume /var/www:/var/www --publish 8082:8080 --link postgresql:mebyo --link redis:redis java /bin/bash\n3. java -jar mebyo-1.0.0.jar\n```","source":"_posts/docker部署.md","raw":"---\ntitle: docker部署web环境\ndate: 2017-03-28 20:04:17\ntags: [docker,postgresql,redis,web]\n---\n### postgresql\n```\n1. docker pull sameersbn/postgresql\n2. docker run --name=postgresql -itd --restart always \\\n--publish 5432:5432 \\\n--volume /opt/postgresql/data:/var/lib/postgresql \\\n--env 'DB_USER=mymebyo_adm01' --env 'DB_PASS=mymebyo_adm01' --env 'DB_NAME=mymebyo' \\\nsameersbn/postgresql    \n```\n### redis\n```\n1. docker pull redis\n2. docker run --name=redis -p 6379:6379 -v /opt/redis/data:/data -d redis redis-server --appendonly yes\n```\n**redis-server --appendonly yes** :在容器执行redis-server启动命令，并打开redis持久化配置\n### java web\n```\n1. docker pull java\n2. docker run -it --volume /var/www:/var/www --publish 8082:8080 --link postgresql:mebyo --link redis:redis java /bin/bash\n3. java -jar mebyo-1.0.0.jar\n```","slug":"docker部署","published":1,"updated":"2018-04-19T03:20:43.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8xw000rsof769vm8sen","content":"<h3 id=\"postgresql\"><a href=\"#postgresql\" class=\"headerlink\" title=\"postgresql\"></a>postgresql</h3><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. docker pull sameersbn/postgresql</span><br><span class=\"line\"><span class=\"number\">2</span>. docker run --name=postgresql -itd --restart always \\</span><br><span class=\"line\">--publish <span class=\"number\">5432</span>:<span class=\"number\">5432</span> \\</span><br><span class=\"line\">--volume /opt/postgresql/<span class=\"symbol\">data:</span>/var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">postgresql</span> \\</span></span><br><span class=\"line\">--env <span class=\"string\">'DB_USER=mymebyo_adm01'</span> --env <span class=\"string\">'DB_PASS=mymebyo_adm01'</span> --env <span class=\"string\">'DB_NAME=mymebyo'</span> \\</span><br><span class=\"line\">sameersbn/postgresql</span><br></pre></td></tr></table></figure>\n<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. docker pull redis</span><br><span class=\"line\">2. docker <span class=\"builtin-name\">run</span> <span class=\"attribute\">--name</span>=redis -p 6379:6379 -v /opt/redis/data:/data -d redis redis-server --appendonly <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n<p><strong>redis-server –appendonly yes</strong> :在容器执行redis-server启动命令，并打开redis持久化配置</p>\n<h3 id=\"java-web\"><a href=\"#java-web\" class=\"headerlink\" title=\"java web\"></a>java web</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. docker pull java</span><br><span class=\"line\">2. docker run -it <span class=\"params\">--volume</span> <span class=\"string\">/var/www</span>:<span class=\"string\">/var/www</span> <span class=\"params\">--publish</span> 8082<span class=\"function\">:8080</span> <span class=\"params\">--link</span> postgresql<span class=\"function\">:mebyo</span> <span class=\"params\">--link</span> redis<span class=\"function\">:redis</span> java <span class=\"string\">/bin/bash</span></span><br><span class=\"line\">3. java -jar mebyo-1.0.0.jar</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"postgresql\"><a href=\"#postgresql\" class=\"headerlink\" title=\"postgresql\"></a>postgresql</h3><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. docker pull sameersbn/postgresql</span><br><span class=\"line\"><span class=\"number\">2</span>. docker run --name=postgresql -itd --restart always \\</span><br><span class=\"line\">--publish <span class=\"number\">5432</span>:<span class=\"number\">5432</span> \\</span><br><span class=\"line\">--volume /opt/postgresql/<span class=\"symbol\">data:</span>/var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">postgresql</span> \\</span></span><br><span class=\"line\">--env <span class=\"string\">'DB_USER=mymebyo_adm01'</span> --env <span class=\"string\">'DB_PASS=mymebyo_adm01'</span> --env <span class=\"string\">'DB_NAME=mymebyo'</span> \\</span><br><span class=\"line\">sameersbn/postgresql</span><br></pre></td></tr></table></figure>\n<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. docker pull redis</span><br><span class=\"line\">2. docker <span class=\"builtin-name\">run</span> <span class=\"attribute\">--name</span>=redis -p 6379:6379 -v /opt/redis/data:/data -d redis redis-server --appendonly <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n<p><strong>redis-server –appendonly yes</strong> :在容器执行redis-server启动命令，并打开redis持久化配置</p>\n<h3 id=\"java-web\"><a href=\"#java-web\" class=\"headerlink\" title=\"java web\"></a>java web</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. docker pull java</span><br><span class=\"line\">2. docker run -it <span class=\"params\">--volume</span> <span class=\"string\">/var/www</span>:<span class=\"string\">/var/www</span> <span class=\"params\">--publish</span> 8082<span class=\"function\">:8080</span> <span class=\"params\">--link</span> postgresql<span class=\"function\">:mebyo</span> <span class=\"params\">--link</span> redis<span class=\"function\">:redis</span> java <span class=\"string\">/bin/bash</span></span><br><span class=\"line\">3. java -jar mebyo-1.0.0.jar</span><br></pre></td></tr></table></figure>"},{"title":"flask.exthook.ExtDeprecationWarning警告的消除","date":"2016-06-17T01:12:32.000Z","_content":"flask升级到0.11版后，弃用了以 **flask.ext.xxx** 导入扩展模块的形式，改为 **flask_xxx**。\n如果仍然沿用原来的形式，flask会报警告flask.exthook.ExtDeprecationWarning。  \n\nflask团队提供了<a href=\"https://github.com/pallets/flask-ext-migrate\">flask-ext-migrate</a>的转换工具。  \n\npip安装：  \n\n    $ pip install flask-ext-migrate\n\n转换：  \n\n    $ flask_ext_migrate xxx.py\n \n<mark>但目前pip上的版本上存在bug，最新的github上fix了这个问题。</mark>  \n这个转换工具一次只能转换一个python文件。  \n随便写个shell批量处理吧。  \n\n    $ for f in `find . -name \"*.py\"`\n    > {\n    > flask_ext_migrate $f\n    > }\n\n\n\n\n\n\n\n\n","source":"_posts/flask-exthook-ExtDeprecationWarning警告的消除.md","raw":"---\ntitle: flask.exthook.ExtDeprecationWarning警告的消除\ndate: 2016-06-17 09:12:32\ntags: [flask,shell,flask-ext-migrate]\n---\nflask升级到0.11版后，弃用了以 **flask.ext.xxx** 导入扩展模块的形式，改为 **flask_xxx**。\n如果仍然沿用原来的形式，flask会报警告flask.exthook.ExtDeprecationWarning。  \n\nflask团队提供了<a href=\"https://github.com/pallets/flask-ext-migrate\">flask-ext-migrate</a>的转换工具。  \n\npip安装：  \n\n    $ pip install flask-ext-migrate\n\n转换：  \n\n    $ flask_ext_migrate xxx.py\n \n<mark>但目前pip上的版本上存在bug，最新的github上fix了这个问题。</mark>  \n这个转换工具一次只能转换一个python文件。  \n随便写个shell批量处理吧。  \n\n    $ for f in `find . -name \"*.py\"`\n    > {\n    > flask_ext_migrate $f\n    > }\n\n\n\n\n\n\n\n\n","slug":"flask-exthook-ExtDeprecationWarning警告的消除","published":1,"updated":"2018-04-19T03:20:43.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8xz000tsof79qrn5fk5","content":"<p>flask升级到0.11版后，弃用了以 <strong>flask.ext.xxx</strong> 导入扩展模块的形式，改为 <strong>flask_xxx</strong>。<br>如果仍然沿用原来的形式，flask会报警告flask.exthook.ExtDeprecationWarning。  </p>\n<p>flask团队提供了<a href=\"https://github.com/pallets/flask-ext-migrate\" target=\"_blank\" rel=\"noopener\">flask-ext-migrate</a>的转换工具。  </p>\n<p>pip安装：  </p>\n<pre><code>$ pip install flask-ext-migrate\n</code></pre><p>转换：  </p>\n<pre><code>$ flask_ext_migrate xxx.py\n</code></pre><p><mark>但目前pip上的版本上存在bug，最新的github上fix了这个问题。</mark><br>这个转换工具一次只能转换一个python文件。<br>随便写个shell批量处理吧。  </p>\n<pre><code>$ for f in `find . -name &quot;*.py&quot;`\n&gt; {\n&gt; flask_ext_migrate $f\n&gt; }\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>flask升级到0.11版后，弃用了以 <strong>flask.ext.xxx</strong> 导入扩展模块的形式，改为 <strong>flask_xxx</strong>。<br>如果仍然沿用原来的形式，flask会报警告flask.exthook.ExtDeprecationWarning。  </p>\n<p>flask团队提供了<a href=\"https://github.com/pallets/flask-ext-migrate\" target=\"_blank\" rel=\"noopener\">flask-ext-migrate</a>的转换工具。  </p>\n<p>pip安装：  </p>\n<pre><code>$ pip install flask-ext-migrate\n</code></pre><p>转换：  </p>\n<pre><code>$ flask_ext_migrate xxx.py\n</code></pre><p><mark>但目前pip上的版本上存在bug，最新的github上fix了这个问题。</mark><br>这个转换工具一次只能转换一个python文件。<br>随便写个shell批量处理吧。  </p>\n<pre><code>$ for f in `find . -name &quot;*.py&quot;`\n&gt; {\n&gt; flask_ext_migrate $f\n&gt; }\n</code></pre>"},{"title":"git删除tag","date":"2016-11-23T07:07:14.000Z","_content":"同事在git上误打了tag，并且只删除了本地的tag，没有删除origin上的tag。管理员账户登录了git仓库的web页面，找到了这个tag但还是没有办法删掉。  \nok！只有命令行开搞！  \n#### 配置ssh config\n![webapi](http://obksgg9lx.bkt.clouddn.com/ssh-config.png)\n#### 删除tag\n![webapi](http://obksgg9lx.bkt.clouddn.com/delete-tag.png)\n#### 主要命令\n    ssh-agent\n    eval `ssh-agent`\n    ssh-add $git_rsa\n    git tag -d $tag_name\n    git push origin :refs/tags/tag_name\n","source":"_posts/git删除tag.md","raw":"---\ntitle: git删除tag\ndate: 2016-11-23 15:07:14\ntags: git\n---\n同事在git上误打了tag，并且只删除了本地的tag，没有删除origin上的tag。管理员账户登录了git仓库的web页面，找到了这个tag但还是没有办法删掉。  \nok！只有命令行开搞！  \n#### 配置ssh config\n![webapi](http://obksgg9lx.bkt.clouddn.com/ssh-config.png)\n#### 删除tag\n![webapi](http://obksgg9lx.bkt.clouddn.com/delete-tag.png)\n#### 主要命令\n    ssh-agent\n    eval `ssh-agent`\n    ssh-add $git_rsa\n    git tag -d $tag_name\n    git push origin :refs/tags/tag_name\n","slug":"git删除tag","published":1,"updated":"2018-04-19T03:20:43.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8y3000wsof7c0ufdyn6","content":"<p>同事在git上误打了tag，并且只删除了本地的tag，没有删除origin上的tag。管理员账户登录了git仓库的web页面，找到了这个tag但还是没有办法删掉。<br>ok！只有命令行开搞！  </p>\n<h4 id=\"配置ssh-config\"><a href=\"#配置ssh-config\" class=\"headerlink\" title=\"配置ssh config\"></a>配置ssh config</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/ssh-config.png\" alt=\"webapi\"></p>\n<h4 id=\"删除tag\"><a href=\"#删除tag\" class=\"headerlink\" title=\"删除tag\"></a>删除tag</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/delete-tag.png\" alt=\"webapi\"></p>\n<h4 id=\"主要命令\"><a href=\"#主要命令\" class=\"headerlink\" title=\"主要命令\"></a>主要命令</h4><pre><code>ssh-agent\neval `ssh-agent`\nssh-add $git_rsa\ngit tag -d $tag_name\ngit push origin :refs/tags/tag_name\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>同事在git上误打了tag，并且只删除了本地的tag，没有删除origin上的tag。管理员账户登录了git仓库的web页面，找到了这个tag但还是没有办法删掉。<br>ok！只有命令行开搞！  </p>\n<h4 id=\"配置ssh-config\"><a href=\"#配置ssh-config\" class=\"headerlink\" title=\"配置ssh config\"></a>配置ssh config</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/ssh-config.png\" alt=\"webapi\"></p>\n<h4 id=\"删除tag\"><a href=\"#删除tag\" class=\"headerlink\" title=\"删除tag\"></a>删除tag</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/delete-tag.png\" alt=\"webapi\"></p>\n<h4 id=\"主要命令\"><a href=\"#主要命令\" class=\"headerlink\" title=\"主要命令\"></a>主要命令</h4><pre><code>ssh-agent\neval `ssh-agent`\nssh-add $git_rsa\ngit tag -d $tag_name\ngit push origin :refs/tags/tag_name\n</code></pre>"},{"title":"git删除所有提交历史记录","date":"2018-04-20T02:53:25.000Z","_content":"## checkout\n\n   ```shell\n   git checkout --orphan latest_branch\n   ```\n\n## 添加所有文件\n\n   ```shell\n   git add -A\n   ```\n   ​\n\n## 提交变更\n\n   ```shell\n   git commit -am \"something about message\"\n   ```\n   ​\n\n## 删除分支\n\n   ```shell\n   git branch -D master\n   ```\n   ​\n\n## 重命名当前branch为目标名\n\n   ```shell\n   git branch -m master\n   ```\n\n   ​\n## 强制push\n\n   ```shell\n   git push -f origin master\n   ```\n   ​","source":"_posts/git删除所有提交历史记录.md","raw":"---\ntitle: git删除所有提交历史记录\ndate: 2018-04-20 10:53:25\ntags: [git]\n---\n## checkout\n\n   ```shell\n   git checkout --orphan latest_branch\n   ```\n\n## 添加所有文件\n\n   ```shell\n   git add -A\n   ```\n   ​\n\n## 提交变更\n\n   ```shell\n   git commit -am \"something about message\"\n   ```\n   ​\n\n## 删除分支\n\n   ```shell\n   git branch -D master\n   ```\n   ​\n\n## 重命名当前branch为目标名\n\n   ```shell\n   git branch -m master\n   ```\n\n   ​\n## 强制push\n\n   ```shell\n   git push -f origin master\n   ```\n   ​","slug":"git删除所有提交历史记录","published":1,"updated":"2018-04-20T02:55:51.045Z","_id":"cjg7ck8y7000ysof7txe91bm4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --orphan latest_branch</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加所有文件\"><a href=\"#添加所有文件\" class=\"headerlink\" title=\"添加所有文件\"></a>添加所有文件</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n<h2 id=\"提交变更\"><a href=\"#提交变更\" class=\"headerlink\" title=\"提交变更\"></a>提交变更</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am \"something about message\"</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D master</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n<h2 id=\"重命名当前branch为目标名\"><a href=\"#重命名当前branch为目标名\" class=\"headerlink\" title=\"重命名当前branch为目标名\"></a>重命名当前branch为目标名</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m master</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n<h2 id=\"强制push\"><a href=\"#强制push\" class=\"headerlink\" title=\"强制push\"></a>强制push</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f origin master</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --orphan latest_branch</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加所有文件\"><a href=\"#添加所有文件\" class=\"headerlink\" title=\"添加所有文件\"></a>添加所有文件</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n<h2 id=\"提交变更\"><a href=\"#提交变更\" class=\"headerlink\" title=\"提交变更\"></a>提交变更</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am \"something about message\"</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D master</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n<h2 id=\"重命名当前branch为目标名\"><a href=\"#重命名当前branch为目标名\" class=\"headerlink\" title=\"重命名当前branch为目标名\"></a>重命名当前branch为目标名</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m master</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n<h2 id=\"强制push\"><a href=\"#强制push\" class=\"headerlink\" title=\"强制push\"></a>强制push</h2>   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f origin master</span><br></pre></td></tr></table></figure>\n<p>   ​</p>\n"},{"title":"flask-migrate数据库迁移","date":"2016-08-11T01:50:52.000Z","_content":"在迭代开发中，会阶段性的变更数据库模型，更新数据库。  \n变更时，为了不丢失数据库中的数据，可以使用数据库迁移工具。  \n\n**flask－migrate**是对Alembic的轻量级封装，并且已经被集成到了flask-script中。  \n## 安装\n    $ pip install flask-migrate\n\n## 配置\n    from flask_sqlalchemy import SQLAlchemy as SQLAlchemy\n    from flask_script import Manager, Shell\n    from flask_migrate import Migrate, MigrateCommand\n    \n    app = Flask(__name__)\n    manager = Manager(app)\n    db = SQLAlchemy(app)\n    migrate = Migrate(app, db)\n    \n    manager.add_command(\"shell\", Shell(make_context=make_shell_context))\n    manager.add_command('db', MigrateCommand)\n    \n    if __name__ == '__main__':\n        manager.run()\n        \n## 创建迁移仓库\n    $ python xxx.py db init\n## 创建迁移脚本\n    $ python xxx.py db migrate\n## 数据库迁移\n    $ python xxx.py db upgrade    \n    ","source":"_posts/flask-migrate数据库迁移.md","raw":"---\ntitle: flask-migrate数据库迁移\ndate: 2016-08-11 09:50:52\ntags: [python, flask, flask-migrate]\n---\n在迭代开发中，会阶段性的变更数据库模型，更新数据库。  \n变更时，为了不丢失数据库中的数据，可以使用数据库迁移工具。  \n\n**flask－migrate**是对Alembic的轻量级封装，并且已经被集成到了flask-script中。  \n## 安装\n    $ pip install flask-migrate\n\n## 配置\n    from flask_sqlalchemy import SQLAlchemy as SQLAlchemy\n    from flask_script import Manager, Shell\n    from flask_migrate import Migrate, MigrateCommand\n    \n    app = Flask(__name__)\n    manager = Manager(app)\n    db = SQLAlchemy(app)\n    migrate = Migrate(app, db)\n    \n    manager.add_command(\"shell\", Shell(make_context=make_shell_context))\n    manager.add_command('db', MigrateCommand)\n    \n    if __name__ == '__main__':\n        manager.run()\n        \n## 创建迁移仓库\n    $ python xxx.py db init\n## 创建迁移脚本\n    $ python xxx.py db migrate\n## 数据库迁移\n    $ python xxx.py db upgrade    \n    ","slug":"flask-migrate数据库迁移","published":1,"updated":"2018-04-19T03:20:43.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8y90010sof7d09ov2f2","content":"<p>在迭代开发中，会阶段性的变更数据库模型，更新数据库。<br>变更时，为了不丢失数据库中的数据，可以使用数据库迁移工具。  </p>\n<p><strong>flask－migrate</strong>是对Alembic的轻量级封装，并且已经被集成到了flask-script中。  </p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>$ pip install flask-migrate\n</code></pre><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><pre><code>from flask_sqlalchemy import SQLAlchemy as SQLAlchemy\nfrom flask_script import Manager, Shell\nfrom flask_migrate import Migrate, MigrateCommand\n\napp = Flask(__name__)\nmanager = Manager(app)\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n\nmanager.add_command(&quot;shell&quot;, Shell(make_context=make_shell_context))\nmanager.add_command(&apos;db&apos;, MigrateCommand)\n\nif __name__ == &apos;__main__&apos;:\n    manager.run()\n</code></pre><h2 id=\"创建迁移仓库\"><a href=\"#创建迁移仓库\" class=\"headerlink\" title=\"创建迁移仓库\"></a>创建迁移仓库</h2><pre><code>$ python xxx.py db init\n</code></pre><h2 id=\"创建迁移脚本\"><a href=\"#创建迁移脚本\" class=\"headerlink\" title=\"创建迁移脚本\"></a>创建迁移脚本</h2><pre><code>$ python xxx.py db migrate\n</code></pre><h2 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h2><pre><code>$ python xxx.py db upgrade    \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>在迭代开发中，会阶段性的变更数据库模型，更新数据库。<br>变更时，为了不丢失数据库中的数据，可以使用数据库迁移工具。  </p>\n<p><strong>flask－migrate</strong>是对Alembic的轻量级封装，并且已经被集成到了flask-script中。  </p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>$ pip install flask-migrate\n</code></pre><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><pre><code>from flask_sqlalchemy import SQLAlchemy as SQLAlchemy\nfrom flask_script import Manager, Shell\nfrom flask_migrate import Migrate, MigrateCommand\n\napp = Flask(__name__)\nmanager = Manager(app)\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n\nmanager.add_command(&quot;shell&quot;, Shell(make_context=make_shell_context))\nmanager.add_command(&apos;db&apos;, MigrateCommand)\n\nif __name__ == &apos;__main__&apos;:\n    manager.run()\n</code></pre><h2 id=\"创建迁移仓库\"><a href=\"#创建迁移仓库\" class=\"headerlink\" title=\"创建迁移仓库\"></a>创建迁移仓库</h2><pre><code>$ python xxx.py db init\n</code></pre><h2 id=\"创建迁移脚本\"><a href=\"#创建迁移脚本\" class=\"headerlink\" title=\"创建迁移脚本\"></a>创建迁移脚本</h2><pre><code>$ python xxx.py db migrate\n</code></pre><h2 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h2><pre><code>$ python xxx.py db upgrade    \n</code></pre>"},{"title":"jenkins自动部署docker应用","date":"2017-11-17T10:29:54.000Z","_content":"## 项目背景\n目前需要部署一个基于python flask的web服务，数据库使用的是postgresql。\n \n## 思路&流程\n* 准备docker镜像\n* jenkins拉取远端源码--git\n* 实现应用打包--jenkins本地\n* 把应用打包进docker镜像--dockerfile\n* 镜像同步到docker私有仓库--shell docker命令\n* 删除老的docker容器--shell docker命令\n* 运行新的docker容器--shell docker命令\n\n### 准备docker镜像\n#### 创建自定义flask镜像\n基于**tiangolo/uwsgi-nginx-flask**创建flask的镜像。    \n自定义flask镜像的dockerfile:\n\n```shell\nFROM tiangolo/uwsgi-nginx-flask:python2.7\n\nCOPY ./app /app\nCOPY ./lib/libseuif97.so /usr/lib\nRUN pip install -r requirements.txt\n```\n\n因为网络环境不好，安装requirements.txt中python的第三方库时，发生报错，因此我将基本的库事先安装好。    \n并且把需要的so静态文件也COPY进镜像中。    \n后面如果有变化，可以根据需要在jenkins中再动态生成dockerfile并执行。\n\n```shell\ndocker build -t test-flask .\n```\n\n#### 创建自定义的postgresql\n自定义postgresql镜像的dockerfile:\n\n```shell\nFROM postgres:9.3\n\nADD ./sql /docker-entrypoint-initdb.d/\n```\n我们有一些master表，以及基础数据，我们需要在运行这个容器之前，将这些基础数据insert进db这个docker之中。    \n可以把各种sql文件放入/sql路径下。\n\n#### commit到私有docker仓库\n\n```shell\ndocker commit -m \"flask插件安装\" -a \"liubing\" $containId liubing/test-flask\ndocker tag liubing/$imageName $dockerRegistsryAddress/test-flask\ndocker push $dockerRegistsryAddress/test-flask\n```\n\ndb的docker也可提前commit到私有仓库。\n### jenkins拉源码\n\n在jenkins中配置“源码管理”，输入source仓库的git地址，并绑定git用户及需要检测状态变化的branch。在构建时会自动下载git源码的。\n\n![配置git地址](http://obksgg9lx.bkt.clouddn.com/git.png)\n\n### 实现应用打包\n\n目前开发的是一个python项目，python不需要打包。源码即可执行。\n\n### 把应用打包进docker镜像\n\n```shell\necho 'From $dockerRegistsryAddress/test-flask\nMAINTAINER liubing \"lbingg@hotmail.com\"\n\nCOPY . /app\n\n' > Dockerfile;\n```\njenkins中执行的脚本会默认当前脚本处于jenkins环境中的workspace中的当前应用工程下。因此在copy程序时，我们需要将当前目录下的所有文件全部拷贝入新创建docker镜像的/app目录中。\n\n### 镜像同步到docker私有仓库\n\n```shell\ndocker build -t $dockerRegistsryAddress/test-flask;\n```\n### 删除老的docker容器\n\n```shell\ndocker stop postgresql || true;\ndocker rm postgresql || true;\ndocker stop test-flask || true;\ndocker rm test-flask || true;\n```\n\n### 运行新的docker容器\n\n```shell\ndocker run --name=postgresql -itd --restart always --publish 5432:5432 --volume /opt/postgresql/data:/var/lib/postgresql --env 'DB_USER=postgres' --env 'DB_PASS=postgres' --env 'DB_NAME=postgres' $dockerRegistryAddress:5000/test-db-1;\n\ndocker run --name test-flask --publish 80:80 --link postgresql:postgres -d $dockerRegistryAddress:5000/test-flask;\n```\n\njenkins中的“构建”配置\n\n![配置构建](http://obksgg9lx.bkt.clouddn.com/structure.png)\n\n### 问题点\n\n需要在jenkins的docker中运行其他的docker命令，可以使用Docker outside of Docker来配置。    \n![Docker-outside-of-Docker](http://liubing1545.github.io/2017/11/16/Docker-outside-of-Docker)","source":"_posts/jenkins自动部署docker应用.md","raw":"---\ntitle: jenkins自动部署docker应用\ndate: 2017-11-17 18:29:54\ntags: [jenkins, 持续部署, docker]\n---\n## 项目背景\n目前需要部署一个基于python flask的web服务，数据库使用的是postgresql。\n \n## 思路&流程\n* 准备docker镜像\n* jenkins拉取远端源码--git\n* 实现应用打包--jenkins本地\n* 把应用打包进docker镜像--dockerfile\n* 镜像同步到docker私有仓库--shell docker命令\n* 删除老的docker容器--shell docker命令\n* 运行新的docker容器--shell docker命令\n\n### 准备docker镜像\n#### 创建自定义flask镜像\n基于**tiangolo/uwsgi-nginx-flask**创建flask的镜像。    \n自定义flask镜像的dockerfile:\n\n```shell\nFROM tiangolo/uwsgi-nginx-flask:python2.7\n\nCOPY ./app /app\nCOPY ./lib/libseuif97.so /usr/lib\nRUN pip install -r requirements.txt\n```\n\n因为网络环境不好，安装requirements.txt中python的第三方库时，发生报错，因此我将基本的库事先安装好。    \n并且把需要的so静态文件也COPY进镜像中。    \n后面如果有变化，可以根据需要在jenkins中再动态生成dockerfile并执行。\n\n```shell\ndocker build -t test-flask .\n```\n\n#### 创建自定义的postgresql\n自定义postgresql镜像的dockerfile:\n\n```shell\nFROM postgres:9.3\n\nADD ./sql /docker-entrypoint-initdb.d/\n```\n我们有一些master表，以及基础数据，我们需要在运行这个容器之前，将这些基础数据insert进db这个docker之中。    \n可以把各种sql文件放入/sql路径下。\n\n#### commit到私有docker仓库\n\n```shell\ndocker commit -m \"flask插件安装\" -a \"liubing\" $containId liubing/test-flask\ndocker tag liubing/$imageName $dockerRegistsryAddress/test-flask\ndocker push $dockerRegistsryAddress/test-flask\n```\n\ndb的docker也可提前commit到私有仓库。\n### jenkins拉源码\n\n在jenkins中配置“源码管理”，输入source仓库的git地址，并绑定git用户及需要检测状态变化的branch。在构建时会自动下载git源码的。\n\n![配置git地址](http://obksgg9lx.bkt.clouddn.com/git.png)\n\n### 实现应用打包\n\n目前开发的是一个python项目，python不需要打包。源码即可执行。\n\n### 把应用打包进docker镜像\n\n```shell\necho 'From $dockerRegistsryAddress/test-flask\nMAINTAINER liubing \"lbingg@hotmail.com\"\n\nCOPY . /app\n\n' > Dockerfile;\n```\njenkins中执行的脚本会默认当前脚本处于jenkins环境中的workspace中的当前应用工程下。因此在copy程序时，我们需要将当前目录下的所有文件全部拷贝入新创建docker镜像的/app目录中。\n\n### 镜像同步到docker私有仓库\n\n```shell\ndocker build -t $dockerRegistsryAddress/test-flask;\n```\n### 删除老的docker容器\n\n```shell\ndocker stop postgresql || true;\ndocker rm postgresql || true;\ndocker stop test-flask || true;\ndocker rm test-flask || true;\n```\n\n### 运行新的docker容器\n\n```shell\ndocker run --name=postgresql -itd --restart always --publish 5432:5432 --volume /opt/postgresql/data:/var/lib/postgresql --env 'DB_USER=postgres' --env 'DB_PASS=postgres' --env 'DB_NAME=postgres' $dockerRegistryAddress:5000/test-db-1;\n\ndocker run --name test-flask --publish 80:80 --link postgresql:postgres -d $dockerRegistryAddress:5000/test-flask;\n```\n\njenkins中的“构建”配置\n\n![配置构建](http://obksgg9lx.bkt.clouddn.com/structure.png)\n\n### 问题点\n\n需要在jenkins的docker中运行其他的docker命令，可以使用Docker outside of Docker来配置。    \n![Docker-outside-of-Docker](http://liubing1545.github.io/2017/11/16/Docker-outside-of-Docker)","slug":"jenkins自动部署docker应用","published":1,"updated":"2018-04-19T03:20:43.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8yb0012sof7nwj0nzue","content":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>目前需要部署一个基于python flask的web服务，数据库使用的是postgresql。</p>\n<h2 id=\"思路-amp-流程\"><a href=\"#思路-amp-流程\" class=\"headerlink\" title=\"思路&amp;流程\"></a>思路&amp;流程</h2><ul>\n<li>准备docker镜像</li>\n<li>jenkins拉取远端源码–git</li>\n<li>实现应用打包–jenkins本地</li>\n<li>把应用打包进docker镜像–dockerfile</li>\n<li>镜像同步到docker私有仓库–shell docker命令</li>\n<li>删除老的docker容器–shell docker命令</li>\n<li>运行新的docker容器–shell docker命令</li>\n</ul>\n<h3 id=\"准备docker镜像\"><a href=\"#准备docker镜像\" class=\"headerlink\" title=\"准备docker镜像\"></a>准备docker镜像</h3><h4 id=\"创建自定义flask镜像\"><a href=\"#创建自定义flask镜像\" class=\"headerlink\" title=\"创建自定义flask镜像\"></a>创建自定义flask镜像</h4><p>基于<strong>tiangolo/uwsgi-nginx-flask</strong>创建flask的镜像。<br>自定义flask镜像的dockerfile:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM tiangolo/uwsgi-nginx-flask:python2.7</span><br><span class=\"line\"></span><br><span class=\"line\">COPY ./app /app</span><br><span class=\"line\">COPY ./lib/libseuif97.so /usr/lib</span><br><span class=\"line\">RUN pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>因为网络环境不好，安装requirements.txt中python的第三方库时，发生报错，因此我将基本的库事先安装好。<br>并且把需要的so静态文件也COPY进镜像中。<br>后面如果有变化，可以根据需要在jenkins中再动态生成dockerfile并执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t test-flask .</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建自定义的postgresql\"><a href=\"#创建自定义的postgresql\" class=\"headerlink\" title=\"创建自定义的postgresql\"></a>创建自定义的postgresql</h4><p>自定义postgresql镜像的dockerfile:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM postgres:9.3</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./sql /docker-entrypoint-initdb.d/</span><br></pre></td></tr></table></figure>\n<p>我们有一些master表，以及基础数据，我们需要在运行这个容器之前，将这些基础数据insert进db这个docker之中。<br>可以把各种sql文件放入/sql路径下。</p>\n<h4 id=\"commit到私有docker仓库\"><a href=\"#commit到私有docker仓库\" class=\"headerlink\" title=\"commit到私有docker仓库\"></a>commit到私有docker仓库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m \"flask插件安装\" -a \"liubing\" $containId liubing/test-flask</span><br><span class=\"line\">docker tag liubing/$imageName $dockerRegistsryAddress/test-flask</span><br><span class=\"line\">docker push $dockerRegistsryAddress/test-flask</span><br></pre></td></tr></table></figure>\n<p>db的docker也可提前commit到私有仓库。</p>\n<h3 id=\"jenkins拉源码\"><a href=\"#jenkins拉源码\" class=\"headerlink\" title=\"jenkins拉源码\"></a>jenkins拉源码</h3><p>在jenkins中配置“源码管理”，输入source仓库的git地址，并绑定git用户及需要检测状态变化的branch。在构建时会自动下载git源码的。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/git.png\" alt=\"配置git地址\"></p>\n<h3 id=\"实现应用打包\"><a href=\"#实现应用打包\" class=\"headerlink\" title=\"实现应用打包\"></a>实现应用打包</h3><p>目前开发的是一个python项目，python不需要打包。源码即可执行。</p>\n<h3 id=\"把应用打包进docker镜像\"><a href=\"#把应用打包进docker镜像\" class=\"headerlink\" title=\"把应用打包进docker镜像\"></a>把应用打包进docker镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 'From $dockerRegistsryAddress/test-flask</span><br><span class=\"line\">MAINTAINER liubing \"lbingg@hotmail.com\"</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\"></span><br><span class=\"line\">' &gt; Dockerfile;</span><br></pre></td></tr></table></figure>\n<p>jenkins中执行的脚本会默认当前脚本处于jenkins环境中的workspace中的当前应用工程下。因此在copy程序时，我们需要将当前目录下的所有文件全部拷贝入新创建docker镜像的/app目录中。</p>\n<h3 id=\"镜像同步到docker私有仓库\"><a href=\"#镜像同步到docker私有仓库\" class=\"headerlink\" title=\"镜像同步到docker私有仓库\"></a>镜像同步到docker私有仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t $dockerRegistsryAddress/test-flask;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除老的docker容器\"><a href=\"#删除老的docker容器\" class=\"headerlink\" title=\"删除老的docker容器\"></a>删除老的docker容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop postgresql || true;</span><br><span class=\"line\">docker rm postgresql || true;</span><br><span class=\"line\">docker stop test-flask || true;</span><br><span class=\"line\">docker rm test-flask || true;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行新的docker容器\"><a href=\"#运行新的docker容器\" class=\"headerlink\" title=\"运行新的docker容器\"></a>运行新的docker容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name=postgresql -itd --restart always --publish 5432:5432 --volume /opt/postgresql/data:/var/lib/postgresql --env 'DB_USER=postgres' --env 'DB_PASS=postgres' --env 'DB_NAME=postgres' $dockerRegistryAddress:5000/test-db-1;</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name test-flask --publish 80:80 --link postgresql:postgres -d $dockerRegistryAddress:5000/test-flask;</span><br></pre></td></tr></table></figure>\n<p>jenkins中的“构建”配置</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/structure.png\" alt=\"配置构建\"></p>\n<h3 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h3><p>需要在jenkins的docker中运行其他的docker命令，可以使用Docker outside of Docker来配置。<br><img src=\"http://liubing1545.github.io/2017/11/16/Docker-outside-of-Docker\" alt=\"Docker-outside-of-Docker\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>目前需要部署一个基于python flask的web服务，数据库使用的是postgresql。</p>\n<h2 id=\"思路-amp-流程\"><a href=\"#思路-amp-流程\" class=\"headerlink\" title=\"思路&amp;流程\"></a>思路&amp;流程</h2><ul>\n<li>准备docker镜像</li>\n<li>jenkins拉取远端源码–git</li>\n<li>实现应用打包–jenkins本地</li>\n<li>把应用打包进docker镜像–dockerfile</li>\n<li>镜像同步到docker私有仓库–shell docker命令</li>\n<li>删除老的docker容器–shell docker命令</li>\n<li>运行新的docker容器–shell docker命令</li>\n</ul>\n<h3 id=\"准备docker镜像\"><a href=\"#准备docker镜像\" class=\"headerlink\" title=\"准备docker镜像\"></a>准备docker镜像</h3><h4 id=\"创建自定义flask镜像\"><a href=\"#创建自定义flask镜像\" class=\"headerlink\" title=\"创建自定义flask镜像\"></a>创建自定义flask镜像</h4><p>基于<strong>tiangolo/uwsgi-nginx-flask</strong>创建flask的镜像。<br>自定义flask镜像的dockerfile:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM tiangolo/uwsgi-nginx-flask:python2.7</span><br><span class=\"line\"></span><br><span class=\"line\">COPY ./app /app</span><br><span class=\"line\">COPY ./lib/libseuif97.so /usr/lib</span><br><span class=\"line\">RUN pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>因为网络环境不好，安装requirements.txt中python的第三方库时，发生报错，因此我将基本的库事先安装好。<br>并且把需要的so静态文件也COPY进镜像中。<br>后面如果有变化，可以根据需要在jenkins中再动态生成dockerfile并执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t test-flask .</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建自定义的postgresql\"><a href=\"#创建自定义的postgresql\" class=\"headerlink\" title=\"创建自定义的postgresql\"></a>创建自定义的postgresql</h4><p>自定义postgresql镜像的dockerfile:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM postgres:9.3</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./sql /docker-entrypoint-initdb.d/</span><br></pre></td></tr></table></figure>\n<p>我们有一些master表，以及基础数据，我们需要在运行这个容器之前，将这些基础数据insert进db这个docker之中。<br>可以把各种sql文件放入/sql路径下。</p>\n<h4 id=\"commit到私有docker仓库\"><a href=\"#commit到私有docker仓库\" class=\"headerlink\" title=\"commit到私有docker仓库\"></a>commit到私有docker仓库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m \"flask插件安装\" -a \"liubing\" $containId liubing/test-flask</span><br><span class=\"line\">docker tag liubing/$imageName $dockerRegistsryAddress/test-flask</span><br><span class=\"line\">docker push $dockerRegistsryAddress/test-flask</span><br></pre></td></tr></table></figure>\n<p>db的docker也可提前commit到私有仓库。</p>\n<h3 id=\"jenkins拉源码\"><a href=\"#jenkins拉源码\" class=\"headerlink\" title=\"jenkins拉源码\"></a>jenkins拉源码</h3><p>在jenkins中配置“源码管理”，输入source仓库的git地址，并绑定git用户及需要检测状态变化的branch。在构建时会自动下载git源码的。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/git.png\" alt=\"配置git地址\"></p>\n<h3 id=\"实现应用打包\"><a href=\"#实现应用打包\" class=\"headerlink\" title=\"实现应用打包\"></a>实现应用打包</h3><p>目前开发的是一个python项目，python不需要打包。源码即可执行。</p>\n<h3 id=\"把应用打包进docker镜像\"><a href=\"#把应用打包进docker镜像\" class=\"headerlink\" title=\"把应用打包进docker镜像\"></a>把应用打包进docker镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 'From $dockerRegistsryAddress/test-flask</span><br><span class=\"line\">MAINTAINER liubing \"lbingg@hotmail.com\"</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\"></span><br><span class=\"line\">' &gt; Dockerfile;</span><br></pre></td></tr></table></figure>\n<p>jenkins中执行的脚本会默认当前脚本处于jenkins环境中的workspace中的当前应用工程下。因此在copy程序时，我们需要将当前目录下的所有文件全部拷贝入新创建docker镜像的/app目录中。</p>\n<h3 id=\"镜像同步到docker私有仓库\"><a href=\"#镜像同步到docker私有仓库\" class=\"headerlink\" title=\"镜像同步到docker私有仓库\"></a>镜像同步到docker私有仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t $dockerRegistsryAddress/test-flask;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除老的docker容器\"><a href=\"#删除老的docker容器\" class=\"headerlink\" title=\"删除老的docker容器\"></a>删除老的docker容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop postgresql || true;</span><br><span class=\"line\">docker rm postgresql || true;</span><br><span class=\"line\">docker stop test-flask || true;</span><br><span class=\"line\">docker rm test-flask || true;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行新的docker容器\"><a href=\"#运行新的docker容器\" class=\"headerlink\" title=\"运行新的docker容器\"></a>运行新的docker容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name=postgresql -itd --restart always --publish 5432:5432 --volume /opt/postgresql/data:/var/lib/postgresql --env 'DB_USER=postgres' --env 'DB_PASS=postgres' --env 'DB_NAME=postgres' $dockerRegistryAddress:5000/test-db-1;</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name test-flask --publish 80:80 --link postgresql:postgres -d $dockerRegistryAddress:5000/test-flask;</span><br></pre></td></tr></table></figure>\n<p>jenkins中的“构建”配置</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/structure.png\" alt=\"配置构建\"></p>\n<h3 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h3><p>需要在jenkins的docker中运行其他的docker命令，可以使用Docker outside of Docker来配置。<br><img src=\"http://liubing1545.github.io/2017/11/16/Docker-outside-of-Docker\" alt=\"Docker-outside-of-Docker\"></p>\n"},{"title":"git撤销merge操作","date":"2016-09-18T04:02:00.000Z","_content":"使用git偶尔会遇到merge错代码的情形，这时需要撤销merge的操作。    \n\n    $ git show bb46d15\n\ncommit id 是 bb46d15。  \n可以看到merge commit的parents次序。该次序从1开始，想保留哪个parent就指定它的序号。\n\n    $ git revert -m 2 bb46d15\n\n2是想要保留的parent branch序号，其他的parent branch会撤销掉。  \nbb46d15是指定对具体的commit id进行操作。","source":"_posts/git撤销merge操作.md","raw":"---\ntitle: git撤销merge操作\ndate: 2016-09-18 12:02:00\ntags: git\n---\n使用git偶尔会遇到merge错代码的情形，这时需要撤销merge的操作。    \n\n    $ git show bb46d15\n\ncommit id 是 bb46d15。  \n可以看到merge commit的parents次序。该次序从1开始，想保留哪个parent就指定它的序号。\n\n    $ git revert -m 2 bb46d15\n\n2是想要保留的parent branch序号，其他的parent branch会撤销掉。  \nbb46d15是指定对具体的commit id进行操作。","slug":"git撤销merge操作","published":1,"updated":"2018-04-19T03:20:43.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8yd0013sof7e4b2c24o","content":"<p>使用git偶尔会遇到merge错代码的情形，这时需要撤销merge的操作。    </p>\n<pre><code>$ git show bb46d15\n</code></pre><p>commit id 是 bb46d15。<br>可以看到merge commit的parents次序。该次序从1开始，想保留哪个parent就指定它的序号。</p>\n<pre><code>$ git revert -m 2 bb46d15\n</code></pre><p>2是想要保留的parent branch序号，其他的parent branch会撤销掉。<br>bb46d15是指定对具体的commit id进行操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用git偶尔会遇到merge错代码的情形，这时需要撤销merge的操作。    </p>\n<pre><code>$ git show bb46d15\n</code></pre><p>commit id 是 bb46d15。<br>可以看到merge commit的parents次序。该次序从1开始，想保留哪个parent就指定它的序号。</p>\n<pre><code>$ git revert -m 2 bb46d15\n</code></pre><p>2是想要保留的parent branch序号，其他的parent branch会撤销掉。<br>bb46d15是指定对具体的commit id进行操作。</p>\n"},{"title":"java工程启动 No Route to host","date":"2017-03-28T12:17:35.000Z","_content":"1. 检查宿主机防火墙是否开启    \n```\nfirewall-cmd --state #查看默认防火墙状态（关闭后显示not running，开启后显示running）    \nsystemctl stop firewalld.service #停止firewall    \nsystemctl disable firewalld.service #禁止firewall开机启动    \n```\n2. 确认project工程连接的postgresql服务是映射到宿主机的ip及port，而不是postgresql docker自身的ip及port\n3. 确认postgresql服务docker的pg_hba.conf文件，是否设置接收任意的ip发来的请求    \npg_hba.conf:    \n```\nhost    all             all             0.0.0.0/0               md5    \n```\n4. 确认postgresql服务docker的postgres.conf文件的监听端口    \npostgres.conf:    \n```\nlisten_addresses = '*'      # what IP address(es) to listen on;    \n```\n**netstat -tunlp命令**查看下监听状态是否正常    \n```\nActive Internet connections (only servers)                                 \nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      816/postgres         \ntcp6       0      0 :::5432                 :::*                    LISTEN      816/postgres\n```\n### 参考\n[stackoverflow解决方法](http://stackoverflow.com/questions/25069832/docker-tomcat-and-postgresql-containers-in-same-host-no-route-to-host)","source":"_posts/java工程启动No-Route-to-host.md","raw":"---\ntitle: java工程启动 No Route to host\ndate: 2017-03-28 20:17:35\ntags: [docker,java,No Route to host]\n---\n1. 检查宿主机防火墙是否开启    \n```\nfirewall-cmd --state #查看默认防火墙状态（关闭后显示not running，开启后显示running）    \nsystemctl stop firewalld.service #停止firewall    \nsystemctl disable firewalld.service #禁止firewall开机启动    \n```\n2. 确认project工程连接的postgresql服务是映射到宿主机的ip及port，而不是postgresql docker自身的ip及port\n3. 确认postgresql服务docker的pg_hba.conf文件，是否设置接收任意的ip发来的请求    \npg_hba.conf:    \n```\nhost    all             all             0.0.0.0/0               md5    \n```\n4. 确认postgresql服务docker的postgres.conf文件的监听端口    \npostgres.conf:    \n```\nlisten_addresses = '*'      # what IP address(es) to listen on;    \n```\n**netstat -tunlp命令**查看下监听状态是否正常    \n```\nActive Internet connections (only servers)                                 \nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      816/postgres         \ntcp6       0      0 :::5432                 :::*                    LISTEN      816/postgres\n```\n### 参考\n[stackoverflow解决方法](http://stackoverflow.com/questions/25069832/docker-tomcat-and-postgresql-containers-in-same-host-no-route-to-host)","slug":"java工程启动No-Route-to-host","published":1,"updated":"2018-04-19T03:20:43.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8yf0015sof7hirajw7i","content":"<ol>\n<li><p>检查宿主机防火墙是否开启    </p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --state <span class=\"comment\">#查看默认防火墙状态（关闭后显示not running，开启后显示running）    </span></span></span><br><span class=\"line\"><span class=\"bash\">systemctl stop firewalld.service <span class=\"comment\">#停止firewall    </span></span></span><br><span class=\"line\"><span class=\"bash\">systemctl <span class=\"built_in\">disable</span> firewalld.service <span class=\"comment\">#禁止firewall开机启动</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确认project工程连接的postgresql服务是映射到宿主机的ip及port，而不是postgresql docker自身的ip及port</p>\n</li>\n<li><p>确认postgresql服务docker的pg_hba.conf文件，是否设置接收任意的ip发来的请求<br>pg_hba.conf:    </p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host    all             all             <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">0</span>               md5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确认postgresql服务docker的postgres.conf文件的监听端口<br>postgres.conf:    </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">listen_addresses</span> = <span class=\"string\">'*'</span>      # what IP address(es) to listen <span class=\"literal\">on</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>netstat -tunlp命令</strong>查看下监听状态是否正常<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (only servers)                                 </span><br><span class=\"line\">Proto Recv-Q Send-Q Local<span class=\"built_in\"> Address </span>          Foreign<span class=\"built_in\"> Address </span>        State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      816/postgres         </span><br><span class=\"line\">tcp6       0      0 :::5432                 :::*                    LISTEN      816/postgres</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://stackoverflow.com/questions/25069832/docker-tomcat-and-postgresql-containers-in-same-host-no-route-to-host\" target=\"_blank\" rel=\"noopener\">stackoverflow解决方法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>检查宿主机防火墙是否开启    </p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --state <span class=\"comment\">#查看默认防火墙状态（关闭后显示not running，开启后显示running）    </span></span></span><br><span class=\"line\"><span class=\"bash\">systemctl stop firewalld.service <span class=\"comment\">#停止firewall    </span></span></span><br><span class=\"line\"><span class=\"bash\">systemctl <span class=\"built_in\">disable</span> firewalld.service <span class=\"comment\">#禁止firewall开机启动</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确认project工程连接的postgresql服务是映射到宿主机的ip及port，而不是postgresql docker自身的ip及port</p>\n</li>\n<li><p>确认postgresql服务docker的pg_hba.conf文件，是否设置接收任意的ip发来的请求<br>pg_hba.conf:    </p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host    all             all             <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">0</span>               md5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确认postgresql服务docker的postgres.conf文件的监听端口<br>postgres.conf:    </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">listen_addresses</span> = <span class=\"string\">'*'</span>      # what IP address(es) to listen <span class=\"literal\">on</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>netstat -tunlp命令</strong>查看下监听状态是否正常<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Internet connections (only servers)                                 </span><br><span class=\"line\">Proto Recv-Q Send-Q Local<span class=\"built_in\"> Address </span>          Foreign<span class=\"built_in\"> Address </span>        State       PID/Program name    </span><br><span class=\"line\">tcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      816/postgres         </span><br><span class=\"line\">tcp6       0      0 :::5432                 :::*                    LISTEN      816/postgres</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://stackoverflow.com/questions/25069832/docker-tomcat-and-postgresql-containers-in-same-host-no-route-to-host\" target=\"_blank\" rel=\"noopener\">stackoverflow解决方法</a></p>\n"},{"title":"js七牛上传实践","date":"2016-06-24T09:22:14.000Z","_content":"* 七牛有免费的配额可以使用，在测试开发时，将图片，视频流等多种媒体文件可以上传到七牛上。  \n* 其次，七牛可以绕过搭载应用的server，手机端或者pc端可以直接上传下载媒体资源至七牛云。只是在上传时，需要先向应用server要求访问七牛的token，拿到这个token后直接与七牛交互。  \n* 最后，七牛云支持cdn加速，即使对成熟的应用来说，也是不错的选择。 \n\n![七牛](http://developer.qiniu.com/article/developer/img/upload-with-callback.png)\n\n下面讲解flask作为业务服务器，进行七牛云存储的过程。  \n\n\n","source":"_posts/js七牛上传实践.md","raw":"---\ntitle: js七牛上传实践\ndate: 2016-06-24 17:22:14\ntags: [js,七牛,flask]\n---\n* 七牛有免费的配额可以使用，在测试开发时，将图片，视频流等多种媒体文件可以上传到七牛上。  \n* 其次，七牛可以绕过搭载应用的server，手机端或者pc端可以直接上传下载媒体资源至七牛云。只是在上传时，需要先向应用server要求访问七牛的token，拿到这个token后直接与七牛交互。  \n* 最后，七牛云支持cdn加速，即使对成熟的应用来说，也是不错的选择。 \n\n![七牛](http://developer.qiniu.com/article/developer/img/upload-with-callback.png)\n\n下面讲解flask作为业务服务器，进行七牛云存储的过程。  \n\n\n","slug":"js七牛上传实践","published":1,"updated":"2018-04-19T03:20:43.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8yj0017sof74iayb2an","content":"<ul>\n<li>七牛有免费的配额可以使用，在测试开发时，将图片，视频流等多种媒体文件可以上传到七牛上。  </li>\n<li>其次，七牛可以绕过搭载应用的server，手机端或者pc端可以直接上传下载媒体资源至七牛云。只是在上传时，需要先向应用server要求访问七牛的token，拿到这个token后直接与七牛交互。  </li>\n<li>最后，七牛云支持cdn加速，即使对成熟的应用来说，也是不错的选择。 </li>\n</ul>\n<p><img src=\"http://developer.qiniu.com/article/developer/img/upload-with-callback.png\" alt=\"七牛\"></p>\n<p>下面讲解flask作为业务服务器，进行七牛云存储的过程。  </p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>七牛有免费的配额可以使用，在测试开发时，将图片，视频流等多种媒体文件可以上传到七牛上。  </li>\n<li>其次，七牛可以绕过搭载应用的server，手机端或者pc端可以直接上传下载媒体资源至七牛云。只是在上传时，需要先向应用server要求访问七牛的token，拿到这个token后直接与七牛交互。  </li>\n<li>最后，七牛云支持cdn加速，即使对成熟的应用来说，也是不错的选择。 </li>\n</ul>\n<p><img src=\"http://developer.qiniu.com/article/developer/img/upload-with-callback.png\" alt=\"七牛\"></p>\n<p>下面讲解flask作为业务服务器，进行七牛云存储的过程。  </p>\n"},{"layout":"testhexo","title":"mac下搭建hexo至github","date":"2016-05-22T03:28:02.000Z","_content":"\n**hexo**是一款基于Node.js的静态博客框架:<a href=\"https://github.com/hexojs/hexo\">hexo github</a>\n  \n## 安装nodejs\n\n    brew install node\n    \n## 安装hexo\n\n    npm install -g hexo\n    hexo init <folder>\n    npm install\n\n## hexo语法\n\n    hexo new \"postName\" #新建文章\n    hexo generate #生成静态页面至public目录\n    hexo server #本地预览，默认4000端口\n    hexo deploy ＃发布\n\n## 配置\n\n修改hexo根目录下的_config.yml文件,xxx为github的账户名称。  \n\n    deploy:\n      type: git\n      repository: https://github.com/xxx/xxx.github.io.git\n      branch: master\n     \n在github创建xxx.github.io\n\n## 安装主题\n\n个人比较喜欢<a href=\"https://github.com/litten/hexo-theme-yilia\">yilia github</a>\n\n## 发布\n\n    $ hexo d -g","source":"_posts/mac下搭建hexo至github.md","raw":"layout: testhexo\ntitle: mac下搭建hexo至github\ndate: 2016-05-22 11:28:02\ntags:\n---\n\n**hexo**是一款基于Node.js的静态博客框架:<a href=\"https://github.com/hexojs/hexo\">hexo github</a>\n  \n## 安装nodejs\n\n    brew install node\n    \n## 安装hexo\n\n    npm install -g hexo\n    hexo init <folder>\n    npm install\n\n## hexo语法\n\n    hexo new \"postName\" #新建文章\n    hexo generate #生成静态页面至public目录\n    hexo server #本地预览，默认4000端口\n    hexo deploy ＃发布\n\n## 配置\n\n修改hexo根目录下的_config.yml文件,xxx为github的账户名称。  \n\n    deploy:\n      type: git\n      repository: https://github.com/xxx/xxx.github.io.git\n      branch: master\n     \n在github创建xxx.github.io\n\n## 安装主题\n\n个人比较喜欢<a href=\"https://github.com/litten/hexo-theme-yilia\">yilia github</a>\n\n## 发布\n\n    $ hexo d -g","slug":"mac下搭建hexo至github","published":1,"updated":"2018-04-19T03:20:43.034Z","comments":1,"photos":[],"link":"","_id":"cjg7ck8ym001asof7qzr1ifq4","content":"<p><strong>hexo</strong>是一款基于Node.js的静态博客框架:<a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">hexo github</a></p>\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><pre><code>brew install node\n</code></pre><h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><pre><code>npm install -g hexo\nhexo init &lt;folder&gt;\nnpm install\n</code></pre><h2 id=\"hexo语法\"><a href=\"#hexo语法\" class=\"headerlink\" title=\"hexo语法\"></a>hexo语法</h2><pre><code>hexo new &quot;postName&quot; #新建文章\nhexo generate #生成静态页面至public目录\nhexo server #本地预览，默认4000端口\nhexo deploy ＃发布\n</code></pre><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改hexo根目录下的_config.yml文件,xxx为github的账户名称。  </p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/xxx/xxx.github.io.git\n  branch: master\n</code></pre><p>在github创建xxx.github.io</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><p>个人比较喜欢<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia github</a></p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><pre><code>$ hexo d -g\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><strong>hexo</strong>是一款基于Node.js的静态博客框架:<a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">hexo github</a></p>\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><pre><code>brew install node\n</code></pre><h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><pre><code>npm install -g hexo\nhexo init &lt;folder&gt;\nnpm install\n</code></pre><h2 id=\"hexo语法\"><a href=\"#hexo语法\" class=\"headerlink\" title=\"hexo语法\"></a>hexo语法</h2><pre><code>hexo new &quot;postName&quot; #新建文章\nhexo generate #生成静态页面至public目录\nhexo server #本地预览，默认4000端口\nhexo deploy ＃发布\n</code></pre><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改hexo根目录下的_config.yml文件,xxx为github的账户名称。  </p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/xxx/xxx.github.io.git\n  branch: master\n</code></pre><p>在github创建xxx.github.io</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><p>个人比较喜欢<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia github</a></p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><pre><code>$ hexo d -g\n</code></pre>"},{"title":"linux虚拟机磁盘扩容","date":"2017-03-28T10:04:05.000Z","_content":"### 问题点\n安装了centos7的虚拟机，yum update时报错空间不足 **No space left on device**。\n### VBoxManage modifyhd\n在宿主机上的安装virtualBox的根目录执行resize命令进行扩容:    \n\n    C:\\Program Files\\Oracle\\VirtualBox>VBoxManage modifyhd E:\\dockerVM\\dockerVM.vdi --resize 35000\n\n### CentOS的LVM管理\n查看磁盘状况\n\n    $ fdisk -l /dev/sda\n将空余磁盘创建为SDA3\n\n    $ fdisk /dev/sda\n    n {new partition}\n    p {primary partition}\n    3 {partition number}\n    \n    t {change partition id}\n    3 {partition number}\n    8e {linux LVM partition}\n    w\n    \n重启虚拟机\n\n    $reboot\n查看当前Volume group\n\n    $ vgdisplay\n创建/dev/sda3，根据VG Name:[centos]，扩展LVM的逻辑卷\n\n    $ lvscan\n    $ pvcreate /dev/sda3\n    $ vgextend /dev/centos/root /dev/sda3\n  \n调整逻辑卷文件系统的大小\n\n    $ xfs_growfs /dev/centos/root\n    $df -h\nOK了！","source":"_posts/linux虚拟机磁盘扩容.md","raw":"---\ntitle: linux虚拟机磁盘扩容\ndate: 2017-03-28 18:04:05\ntags: [linux,磁盘扩容]\n---\n### 问题点\n安装了centos7的虚拟机，yum update时报错空间不足 **No space left on device**。\n### VBoxManage modifyhd\n在宿主机上的安装virtualBox的根目录执行resize命令进行扩容:    \n\n    C:\\Program Files\\Oracle\\VirtualBox>VBoxManage modifyhd E:\\dockerVM\\dockerVM.vdi --resize 35000\n\n### CentOS的LVM管理\n查看磁盘状况\n\n    $ fdisk -l /dev/sda\n将空余磁盘创建为SDA3\n\n    $ fdisk /dev/sda\n    n {new partition}\n    p {primary partition}\n    3 {partition number}\n    \n    t {change partition id}\n    3 {partition number}\n    8e {linux LVM partition}\n    w\n    \n重启虚拟机\n\n    $reboot\n查看当前Volume group\n\n    $ vgdisplay\n创建/dev/sda3，根据VG Name:[centos]，扩展LVM的逻辑卷\n\n    $ lvscan\n    $ pvcreate /dev/sda3\n    $ vgextend /dev/centos/root /dev/sda3\n  \n调整逻辑卷文件系统的大小\n\n    $ xfs_growfs /dev/centos/root\n    $df -h\nOK了！","slug":"linux虚拟机磁盘扩容","published":1,"updated":"2018-04-19T03:20:43.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8yn001bsof7hg5cx977","content":"<h3 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h3><p>安装了centos7的虚拟机，yum update时报错空间不足 <strong>No space left on device</strong>。</p>\n<h3 id=\"VBoxManage-modifyhd\"><a href=\"#VBoxManage-modifyhd\" class=\"headerlink\" title=\"VBoxManage modifyhd\"></a>VBoxManage modifyhd</h3><p>在宿主机上的安装virtualBox的根目录执行resize命令进行扩容:    </p>\n<pre><code>C:\\Program Files\\Oracle\\VirtualBox&gt;VBoxManage modifyhd E:\\dockerVM\\dockerVM.vdi --resize 35000\n</code></pre><h3 id=\"CentOS的LVM管理\"><a href=\"#CentOS的LVM管理\" class=\"headerlink\" title=\"CentOS的LVM管理\"></a>CentOS的LVM管理</h3><p>查看磁盘状况</p>\n<pre><code>$ fdisk -l /dev/sda\n</code></pre><p>将空余磁盘创建为SDA3</p>\n<pre><code>$ fdisk /dev/sda\nn {new partition}\np {primary partition}\n3 {partition number}\n\nt {change partition id}\n3 {partition number}\n8e {linux LVM partition}\nw\n</code></pre><p>重启虚拟机</p>\n<pre><code>$reboot\n</code></pre><p>查看当前Volume group</p>\n<pre><code>$ vgdisplay\n</code></pre><p>创建/dev/sda3，根据VG Name:[centos]，扩展LVM的逻辑卷</p>\n<pre><code>$ lvscan\n$ pvcreate /dev/sda3\n$ vgextend /dev/centos/root /dev/sda3\n</code></pre><p>调整逻辑卷文件系统的大小</p>\n<pre><code>$ xfs_growfs /dev/centos/root\n$df -h\n</code></pre><p>OK了！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h3><p>安装了centos7的虚拟机，yum update时报错空间不足 <strong>No space left on device</strong>。</p>\n<h3 id=\"VBoxManage-modifyhd\"><a href=\"#VBoxManage-modifyhd\" class=\"headerlink\" title=\"VBoxManage modifyhd\"></a>VBoxManage modifyhd</h3><p>在宿主机上的安装virtualBox的根目录执行resize命令进行扩容:    </p>\n<pre><code>C:\\Program Files\\Oracle\\VirtualBox&gt;VBoxManage modifyhd E:\\dockerVM\\dockerVM.vdi --resize 35000\n</code></pre><h3 id=\"CentOS的LVM管理\"><a href=\"#CentOS的LVM管理\" class=\"headerlink\" title=\"CentOS的LVM管理\"></a>CentOS的LVM管理</h3><p>查看磁盘状况</p>\n<pre><code>$ fdisk -l /dev/sda\n</code></pre><p>将空余磁盘创建为SDA3</p>\n<pre><code>$ fdisk /dev/sda\nn {new partition}\np {primary partition}\n3 {partition number}\n\nt {change partition id}\n3 {partition number}\n8e {linux LVM partition}\nw\n</code></pre><p>重启虚拟机</p>\n<pre><code>$reboot\n</code></pre><p>查看当前Volume group</p>\n<pre><code>$ vgdisplay\n</code></pre><p>创建/dev/sda3，根据VG Name:[centos]，扩展LVM的逻辑卷</p>\n<pre><code>$ lvscan\n$ pvcreate /dev/sda3\n$ vgextend /dev/centos/root /dev/sda3\n</code></pre><p>调整逻辑卷文件系统的大小</p>\n<pre><code>$ xfs_growfs /dev/centos/root\n$df -h\n</code></pre><p>OK了！</p>\n"},{"title":"mac下批量替换文本","date":"2016-06-08T04:02:39.000Z","_content":"在mac下使用sed与linux下稍微有一些不同。  \n-i 参数可以指定备份源文件名  \n\n    sed -i \"bk\" \"s/Cat/Dog/g\" example.txt\n\n替换example.txt文件中的Cat->Dog时，会生成备份文件example.txtbk。也可以指定不生成备份文件，-i参数为“”。\n\n批量替换命令如下：  \n\n    sed -i \"\" \"s/Cat/Dog/g\" `grep Cat -rl ./`\n\n用grep查找出当前文件夹下含有Cat的文件，然后替换成Dog。并且不指定备份文件。\n","source":"_posts/mac下批量替换文本.md","raw":"---\ntitle: mac下批量替换文本\ndate: 2016-06-08 12:02:39\ntags: [mac,sed,grep]\n---\n在mac下使用sed与linux下稍微有一些不同。  \n-i 参数可以指定备份源文件名  \n\n    sed -i \"bk\" \"s/Cat/Dog/g\" example.txt\n\n替换example.txt文件中的Cat->Dog时，会生成备份文件example.txtbk。也可以指定不生成备份文件，-i参数为“”。\n\n批量替换命令如下：  \n\n    sed -i \"\" \"s/Cat/Dog/g\" `grep Cat -rl ./`\n\n用grep查找出当前文件夹下含有Cat的文件，然后替换成Dog。并且不指定备份文件。\n","slug":"mac下批量替换文本","published":1,"updated":"2018-04-19T03:20:43.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8yp001dsof7v7sp5cyl","content":"<p>在mac下使用sed与linux下稍微有一些不同。<br>-i 参数可以指定备份源文件名  </p>\n<pre><code>sed -i &quot;bk&quot; &quot;s/Cat/Dog/g&quot; example.txt\n</code></pre><p>替换example.txt文件中的Cat-&gt;Dog时，会生成备份文件example.txtbk。也可以指定不生成备份文件，-i参数为“”。</p>\n<p>批量替换命令如下：  </p>\n<pre><code>sed -i &quot;&quot; &quot;s/Cat/Dog/g&quot; `grep Cat -rl ./`\n</code></pre><p>用grep查找出当前文件夹下含有Cat的文件，然后替换成Dog。并且不指定备份文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在mac下使用sed与linux下稍微有一些不同。<br>-i 参数可以指定备份源文件名  </p>\n<pre><code>sed -i &quot;bk&quot; &quot;s/Cat/Dog/g&quot; example.txt\n</code></pre><p>替换example.txt文件中的Cat-&gt;Dog时，会生成备份文件example.txtbk。也可以指定不生成备份文件，-i参数为“”。</p>\n<p>批量替换命令如下：  </p>\n<pre><code>sed -i &quot;&quot; &quot;s/Cat/Dog/g&quot; `grep Cat -rl ./`\n</code></pre><p>用grep查找出当前文件夹下含有Cat的文件，然后替换成Dog。并且不指定备份文件。</p>\n"},{"title":"pip freeze","date":"2016-05-31T02:15:40.000Z","_content":"在本地python开发时，可以生成requirements.txt文件，用于记录所有依赖包及其精确的版本号。  \n\n    pip freeze >requirements.txt\n可创建与本地完全一致的副本环境。  \n\n    pip install -r requirements.txt\n","source":"_posts/pip-freeze.md","raw":"---\ntitle: pip freeze\ndate: 2016-05-31 10:15:40\ntags: python\n---\n在本地python开发时，可以生成requirements.txt文件，用于记录所有依赖包及其精确的版本号。  \n\n    pip freeze >requirements.txt\n可创建与本地完全一致的副本环境。  \n\n    pip install -r requirements.txt\n","slug":"pip-freeze","published":1,"updated":"2018-04-19T03:20:43.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8yx001fsof79wv990wb","content":"<p>在本地python开发时，可以生成requirements.txt文件，用于记录所有依赖包及其精确的版本号。  </p>\n<pre><code>pip freeze &gt;requirements.txt\n</code></pre><p>可创建与本地完全一致的副本环境。  </p>\n<pre><code>pip install -r requirements.txt\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>在本地python开发时，可以生成requirements.txt文件，用于记录所有依赖包及其精确的版本号。  </p>\n<pre><code>pip freeze &gt;requirements.txt\n</code></pre><p>可创建与本地完全一致的副本环境。  </p>\n<pre><code>pip install -r requirements.txt\n</code></pre>"},{"title":"react native与webapi交互","date":"2016-08-08T03:56:15.000Z","_content":"react native坑太大了！！！\n既然跳进去了，就想办法填坑呗～\n\n## webapi\n#### 本地开启webAPI\n![webapi](http://obksgg9lx.bkt.clouddn.com/webapi.png)\n\n#### curl测试webAPI\n![test webapi](http://obksgg9lx.bkt.clouddn.com/getToken.png)\n\n## react native如何debug\n#### command + d\n在ios的simulator上，command+d调出菜单，选择Debug JS Remotely\n\n![debug](http://obksgg9lx.bkt.clouddn.com/debugJS.png)  \n\n#### Runtime is not ready for debugging.\n如果报出该错，则需要下载chrome浏览器，mac自带的safari无法载入本地的reactJS文件。\n\n![error](http://obksgg9lx.bkt.clouddn.com/debugging.png)\n\n#### Network request failed.\n如果报出该错，需要配置xcode里对于http请求的设置。  \n\n![error](http://obksgg9lx.bkt.clouddn.com/networkRequestFail.png)\n\n这个错误搞的我烦躁了一个周末，根本没有头绪。  \n首先，要确认RCTWebSocketExecutor.m文件中host = @\"localhost\";\n\n![host](http://obksgg9lx.bkt.clouddn.com/RCTWebSocketExecutor.png)\n\n其次，要在plist的APP Transport Security Settings中添加Allow Arbitrary Loads为True。这个设置把request请求不仅仅局限于https安全模式，http也被允许了。\n\n![plist](http://obksgg9lx.bkt.clouddn.com/plist.png)\n\n#### chrome debug\n测试一下，与本地webapi的交互，在chrome浏览器下可以打断点，查看变量了。\n\n![chrome](http://obksgg9lx.bkt.clouddn.com/chromeTool.png)\n\nwebapi的监听也收到了request。\n\n![webapi listen](http://obksgg9lx.bkt.clouddn.com/requestForWebAPI.png)\n\n## 退出debug模式\n\n#### command + d\n在ios的simulator上，command+d调出菜单，选择Stop Remote JS Debugging\n\n![stop debug](http://obksgg9lx.bkt.clouddn.com/debugJSStop.png)\n\n参照<a href=\"http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#debugging\">facebook debugging文档</a>\n","source":"_posts/react-native与webapi交互.md","raw":"---\ntitle: react native与webapi交互\ndate: 2016-08-08 11:56:15\ntags: [react native,Runtime is not ready for debugging,Network request failed]\n---\nreact native坑太大了！！！\n既然跳进去了，就想办法填坑呗～\n\n## webapi\n#### 本地开启webAPI\n![webapi](http://obksgg9lx.bkt.clouddn.com/webapi.png)\n\n#### curl测试webAPI\n![test webapi](http://obksgg9lx.bkt.clouddn.com/getToken.png)\n\n## react native如何debug\n#### command + d\n在ios的simulator上，command+d调出菜单，选择Debug JS Remotely\n\n![debug](http://obksgg9lx.bkt.clouddn.com/debugJS.png)  \n\n#### Runtime is not ready for debugging.\n如果报出该错，则需要下载chrome浏览器，mac自带的safari无法载入本地的reactJS文件。\n\n![error](http://obksgg9lx.bkt.clouddn.com/debugging.png)\n\n#### Network request failed.\n如果报出该错，需要配置xcode里对于http请求的设置。  \n\n![error](http://obksgg9lx.bkt.clouddn.com/networkRequestFail.png)\n\n这个错误搞的我烦躁了一个周末，根本没有头绪。  \n首先，要确认RCTWebSocketExecutor.m文件中host = @\"localhost\";\n\n![host](http://obksgg9lx.bkt.clouddn.com/RCTWebSocketExecutor.png)\n\n其次，要在plist的APP Transport Security Settings中添加Allow Arbitrary Loads为True。这个设置把request请求不仅仅局限于https安全模式，http也被允许了。\n\n![plist](http://obksgg9lx.bkt.clouddn.com/plist.png)\n\n#### chrome debug\n测试一下，与本地webapi的交互，在chrome浏览器下可以打断点，查看变量了。\n\n![chrome](http://obksgg9lx.bkt.clouddn.com/chromeTool.png)\n\nwebapi的监听也收到了request。\n\n![webapi listen](http://obksgg9lx.bkt.clouddn.com/requestForWebAPI.png)\n\n## 退出debug模式\n\n#### command + d\n在ios的simulator上，command+d调出菜单，选择Stop Remote JS Debugging\n\n![stop debug](http://obksgg9lx.bkt.clouddn.com/debugJSStop.png)\n\n参照<a href=\"http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#debugging\">facebook debugging文档</a>\n","slug":"react-native与webapi交互","published":1,"updated":"2018-04-19T03:20:43.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8z2001hsof7qqqhx1q0","content":"<p>react native坑太大了！！！<br>既然跳进去了，就想办法填坑呗～</p>\n<h2 id=\"webapi\"><a href=\"#webapi\" class=\"headerlink\" title=\"webapi\"></a>webapi</h2><h4 id=\"本地开启webAPI\"><a href=\"#本地开启webAPI\" class=\"headerlink\" title=\"本地开启webAPI\"></a>本地开启webAPI</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/webapi.png\" alt=\"webapi\"></p>\n<h4 id=\"curl测试webAPI\"><a href=\"#curl测试webAPI\" class=\"headerlink\" title=\"curl测试webAPI\"></a>curl测试webAPI</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/getToken.png\" alt=\"test webapi\"></p>\n<h2 id=\"react-native如何debug\"><a href=\"#react-native如何debug\" class=\"headerlink\" title=\"react native如何debug\"></a>react native如何debug</h2><h4 id=\"command-d\"><a href=\"#command-d\" class=\"headerlink\" title=\"command + d\"></a>command + d</h4><p>在ios的simulator上，command+d调出菜单，选择Debug JS Remotely</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugJS.png\" alt=\"debug\">  </p>\n<h4 id=\"Runtime-is-not-ready-for-debugging\"><a href=\"#Runtime-is-not-ready-for-debugging\" class=\"headerlink\" title=\"Runtime is not ready for debugging.\"></a>Runtime is not ready for debugging.</h4><p>如果报出该错，则需要下载chrome浏览器，mac自带的safari无法载入本地的reactJS文件。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugging.png\" alt=\"error\"></p>\n<h4 id=\"Network-request-failed\"><a href=\"#Network-request-failed\" class=\"headerlink\" title=\"Network request failed.\"></a>Network request failed.</h4><p>如果报出该错，需要配置xcode里对于http请求的设置。  </p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/networkRequestFail.png\" alt=\"error\"></p>\n<p>这个错误搞的我烦躁了一个周末，根本没有头绪。<br>首先，要确认RCTWebSocketExecutor.m文件中host = @”localhost”;</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/RCTWebSocketExecutor.png\" alt=\"host\"></p>\n<p>其次，要在plist的APP Transport Security Settings中添加Allow Arbitrary Loads为True。这个设置把request请求不仅仅局限于https安全模式，http也被允许了。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/plist.png\" alt=\"plist\"></p>\n<h4 id=\"chrome-debug\"><a href=\"#chrome-debug\" class=\"headerlink\" title=\"chrome debug\"></a>chrome debug</h4><p>测试一下，与本地webapi的交互，在chrome浏览器下可以打断点，查看变量了。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/chromeTool.png\" alt=\"chrome\"></p>\n<p>webapi的监听也收到了request。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/requestForWebAPI.png\" alt=\"webapi listen\"></p>\n<h2 id=\"退出debug模式\"><a href=\"#退出debug模式\" class=\"headerlink\" title=\"退出debug模式\"></a>退出debug模式</h2><h4 id=\"command-d-1\"><a href=\"#command-d-1\" class=\"headerlink\" title=\"command + d\"></a>command + d</h4><p>在ios的simulator上，command+d调出菜单，选择Stop Remote JS Debugging</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugJSStop.png\" alt=\"stop debug\"></p>\n<p>参照<a href=\"http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#debugging\" target=\"_blank\" rel=\"noopener\">facebook debugging文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>react native坑太大了！！！<br>既然跳进去了，就想办法填坑呗～</p>\n<h2 id=\"webapi\"><a href=\"#webapi\" class=\"headerlink\" title=\"webapi\"></a>webapi</h2><h4 id=\"本地开启webAPI\"><a href=\"#本地开启webAPI\" class=\"headerlink\" title=\"本地开启webAPI\"></a>本地开启webAPI</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/webapi.png\" alt=\"webapi\"></p>\n<h4 id=\"curl测试webAPI\"><a href=\"#curl测试webAPI\" class=\"headerlink\" title=\"curl测试webAPI\"></a>curl测试webAPI</h4><p><img src=\"http://obksgg9lx.bkt.clouddn.com/getToken.png\" alt=\"test webapi\"></p>\n<h2 id=\"react-native如何debug\"><a href=\"#react-native如何debug\" class=\"headerlink\" title=\"react native如何debug\"></a>react native如何debug</h2><h4 id=\"command-d\"><a href=\"#command-d\" class=\"headerlink\" title=\"command + d\"></a>command + d</h4><p>在ios的simulator上，command+d调出菜单，选择Debug JS Remotely</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugJS.png\" alt=\"debug\">  </p>\n<h4 id=\"Runtime-is-not-ready-for-debugging\"><a href=\"#Runtime-is-not-ready-for-debugging\" class=\"headerlink\" title=\"Runtime is not ready for debugging.\"></a>Runtime is not ready for debugging.</h4><p>如果报出该错，则需要下载chrome浏览器，mac自带的safari无法载入本地的reactJS文件。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugging.png\" alt=\"error\"></p>\n<h4 id=\"Network-request-failed\"><a href=\"#Network-request-failed\" class=\"headerlink\" title=\"Network request failed.\"></a>Network request failed.</h4><p>如果报出该错，需要配置xcode里对于http请求的设置。  </p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/networkRequestFail.png\" alt=\"error\"></p>\n<p>这个错误搞的我烦躁了一个周末，根本没有头绪。<br>首先，要确认RCTWebSocketExecutor.m文件中host = @”localhost”;</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/RCTWebSocketExecutor.png\" alt=\"host\"></p>\n<p>其次，要在plist的APP Transport Security Settings中添加Allow Arbitrary Loads为True。这个设置把request请求不仅仅局限于https安全模式，http也被允许了。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/plist.png\" alt=\"plist\"></p>\n<h4 id=\"chrome-debug\"><a href=\"#chrome-debug\" class=\"headerlink\" title=\"chrome debug\"></a>chrome debug</h4><p>测试一下，与本地webapi的交互，在chrome浏览器下可以打断点，查看变量了。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/chromeTool.png\" alt=\"chrome\"></p>\n<p>webapi的监听也收到了request。</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/requestForWebAPI.png\" alt=\"webapi listen\"></p>\n<h2 id=\"退出debug模式\"><a href=\"#退出debug模式\" class=\"headerlink\" title=\"退出debug模式\"></a>退出debug模式</h2><h4 id=\"command-d-1\"><a href=\"#command-d-1\" class=\"headerlink\" title=\"command + d\"></a>command + d</h4><p>在ios的simulator上，command+d调出菜单，选择Stop Remote JS Debugging</p>\n<p><img src=\"http://obksgg9lx.bkt.clouddn.com/debugJSStop.png\" alt=\"stop debug\"></p>\n<p>参照<a href=\"http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#debugging\" target=\"_blank\" rel=\"noopener\">facebook debugging文档</a></p>\n"},{"title":"shell反向删除文件","date":"2016-06-24T09:12:07.000Z","_content":"除了filename文件外，全部rm掉。\n\n    $ shopt -s extglob\n    $ rm -rf !(filename)\n \n","source":"_posts/shell反向删除文件.md","raw":"---\ntitle: shell反向删除文件\ndate: 2016-06-24 17:12:07\ntags: [linux,shell]\n---\n除了filename文件外，全部rm掉。\n\n    $ shopt -s extglob\n    $ rm -rf !(filename)\n \n","slug":"shell反向删除文件","published":1,"updated":"2018-04-19T03:20:43.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8z6001jsof74pp7riod","content":"<p>除了filename文件外，全部rm掉。</p>\n<pre><code>$ shopt -s extglob\n$ rm -rf !(filename)\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>除了filename文件外，全部rm掉。</p>\n<pre><code>$ shopt -s extglob\n$ rm -rf !(filename)\n</code></pre>"},{"title":"supervisor管理服务器进程","date":"2017-07-07T08:57:57.000Z","_content":"在服务器上同时管理多个java进程和python进程，我使用supervisor。\n在/etc/supervisor/conf.d/路径下创建xxx.conf    \n在xxx.conf下配置如下    \n\n```+shell\n[program:gzh]\ncommand=/root/python-gzh/venv/bin/gunicorn main:application -c /root/python-gzh/gunicorn.conf\ndirectory=/root/python-gzh\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/python-gzh/logs/gzh.log\n\n[program:provider]\ncommand=java -jar /root/springboot/platform-system-provider.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/provider.log\n\n[program:webapi]\ncommand=java -jar /root/springboot/platform-mobile-client.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/webapi.log\n\n[program:web]\ncommand=java -jar /root/springboot/platform-admin-web.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/web.log\n```\n通过supervisorctl可以监控管理各种进程的状态了。\n","source":"_posts/supervisor管理服务器进程.md","raw":"---\ntitle: supervisor管理服务器进程\ndate: 2017-07-07 16:57:57\ntags: [supervisor,sprintboot,web.py]\n---\n在服务器上同时管理多个java进程和python进程，我使用supervisor。\n在/etc/supervisor/conf.d/路径下创建xxx.conf    \n在xxx.conf下配置如下    \n\n```+shell\n[program:gzh]\ncommand=/root/python-gzh/venv/bin/gunicorn main:application -c /root/python-gzh/gunicorn.conf\ndirectory=/root/python-gzh\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/python-gzh/logs/gzh.log\n\n[program:provider]\ncommand=java -jar /root/springboot/platform-system-provider.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/provider.log\n\n[program:webapi]\ncommand=java -jar /root/springboot/platform-mobile-client.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/webapi.log\n\n[program:web]\ncommand=java -jar /root/springboot/platform-admin-web.jar --spring.profiles.active=prod\ndirectory=/root/springboot\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/root/springboot/logs/web.log\n```\n通过supervisorctl可以监控管理各种进程的状态了。\n","slug":"supervisor管理服务器进程","published":1,"updated":"2018-04-19T03:20:43.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8z8001ksof7tjkrmr4r","content":"<p>在服务器上同时管理多个java进程和python进程，我使用supervisor。<br>在/etc/supervisor/conf.d/路径下创建xxx.conf<br>在xxx.conf下配置如下    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:gzh]</span><br><span class=\"line\">command=/root/python-gzh/venv/bin/gunicorn main:application -c /root/python-gzh/gunicorn.conf</span><br><span class=\"line\">directory=/root/python-gzh</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/python-gzh/logs/gzh.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:provider]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-system-provider.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/provider.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:webapi]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-mobile-client.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/webapi.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:web]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-admin-web.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/web.log</span><br></pre></td></tr></table></figure>\n<p>通过supervisorctl可以监控管理各种进程的状态了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在服务器上同时管理多个java进程和python进程，我使用supervisor。<br>在/etc/supervisor/conf.d/路径下创建xxx.conf<br>在xxx.conf下配置如下    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:gzh]</span><br><span class=\"line\">command=/root/python-gzh/venv/bin/gunicorn main:application -c /root/python-gzh/gunicorn.conf</span><br><span class=\"line\">directory=/root/python-gzh</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/python-gzh/logs/gzh.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:provider]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-system-provider.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/provider.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:webapi]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-mobile-client.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/webapi.log</span><br><span class=\"line\"></span><br><span class=\"line\">[program:web]</span><br><span class=\"line\">command=java -jar /root/springboot/platform-admin-web.jar --spring.profiles.active=prod</span><br><span class=\"line\">directory=/root/springboot</span><br><span class=\"line\">user=root</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stdout_logfile=/root/springboot/logs/web.log</span><br></pre></td></tr></table></figure>\n<p>通过supervisorctl可以监控管理各种进程的状态了。</p>\n"},{"title":"web.py与gunicorn","date":"2017-07-07T09:02:35.000Z","_content":"web.py的application.py模块，主要实现了WSGI兼容的接口，以便应用程序被WSGI应用服务器调用。   \n\n## WSGI接口的实现\n    app = web.application(urls, globals())\n    application = app.wsgifunc()\n\n## Gunicorn.conf的配置\n    workers = 3\n    bind = '127.0.0.1:8000'\n    \n## Gunicorn的启动方式\n    /$path/bin/gunicorn $filename:application -c /$path/gunicorn.conf\n","source":"_posts/web.py与gunicorn.md","raw":"---\ntitle: web.py与gunicorn\ndate: 2017-07-07 17:02:35\ntags: [web.py, gunicorn]\n---\nweb.py的application.py模块，主要实现了WSGI兼容的接口，以便应用程序被WSGI应用服务器调用。   \n\n## WSGI接口的实现\n    app = web.application(urls, globals())\n    application = app.wsgifunc()\n\n## Gunicorn.conf的配置\n    workers = 3\n    bind = '127.0.0.1:8000'\n    \n## Gunicorn的启动方式\n    /$path/bin/gunicorn $filename:application -c /$path/gunicorn.conf\n","slug":"web.py与gunicorn","published":1,"updated":"2018-04-19T03:20:43.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8zb001msof7n8butt67","content":"<p>web.py的application.py模块，主要实现了WSGI兼容的接口，以便应用程序被WSGI应用服务器调用。   </p>\n<h2 id=\"WSGI接口的实现\"><a href=\"#WSGI接口的实现\" class=\"headerlink\" title=\"WSGI接口的实现\"></a>WSGI接口的实现</h2><pre><code>app = web.application(urls, globals())\napplication = app.wsgifunc()\n</code></pre><h2 id=\"Gunicorn-conf的配置\"><a href=\"#Gunicorn-conf的配置\" class=\"headerlink\" title=\"Gunicorn.conf的配置\"></a>Gunicorn.conf的配置</h2><pre><code>workers = 3\nbind = &apos;127.0.0.1:8000&apos;\n</code></pre><h2 id=\"Gunicorn的启动方式\"><a href=\"#Gunicorn的启动方式\" class=\"headerlink\" title=\"Gunicorn的启动方式\"></a>Gunicorn的启动方式</h2><pre><code>/$path/bin/gunicorn $filename:application -c /$path/gunicorn.conf\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>web.py的application.py模块，主要实现了WSGI兼容的接口，以便应用程序被WSGI应用服务器调用。   </p>\n<h2 id=\"WSGI接口的实现\"><a href=\"#WSGI接口的实现\" class=\"headerlink\" title=\"WSGI接口的实现\"></a>WSGI接口的实现</h2><pre><code>app = web.application(urls, globals())\napplication = app.wsgifunc()\n</code></pre><h2 id=\"Gunicorn-conf的配置\"><a href=\"#Gunicorn-conf的配置\" class=\"headerlink\" title=\"Gunicorn.conf的配置\"></a>Gunicorn.conf的配置</h2><pre><code>workers = 3\nbind = &apos;127.0.0.1:8000&apos;\n</code></pre><h2 id=\"Gunicorn的启动方式\"><a href=\"#Gunicorn的启动方式\" class=\"headerlink\" title=\"Gunicorn的启动方式\"></a>Gunicorn的启动方式</h2><pre><code>/$path/bin/gunicorn $filename:application -c /$path/gunicorn.conf\n</code></pre>"},{"title":"win10启动vagrant","date":"2017-07-18T08:37:55.000Z","_content":"win10环境下vagrant启动会报错。    \n## 正常启动步骤：\n### 设置virtual box的adapter网卡    \n打开Preferences -> Network -> Host-only Networks Tab    \n\n* 将默认的adapter网卡的ipv4的地址，改写成192.168.xx.1\n* 将mask改为255.255.255.0\n\n### 启动vagrant\n\n    $ vagrant up \n    \n如果启动时报错    \n    \n    Bringing machine 'default' up with 'virtualbox' provider...\n    There was an error while executing `VBoxManage`, a CLI used by Vagrant\n    for controlling VirtualBox. The command and stderr is shown below.\n\n    Command: [\"hostonlyif\", \"create\"]\n\n    Stderr: 0%...\n    Progress state: E_FAIL\n    VBoxManage.exe: error: Failed to create the host-only adapter\n    VBoxManage.exe: error: Code E_FAIL (0x80004005) - Unspecified error (extended info not available)\n    VBoxManage.exe: error: Context: \"int __cdecl handleCreate(struct HandlerArg ,int,int )\" at line 68 of file VBoxManageHostonly.cpp\n    \n1. check下virtual box有没有创建一个新的adapter网卡。\n2. check该网卡的ipv4的地址是以192.168开头的。\n3. 如果成功创建了，则再次vagrant up。就启动成功了。","source":"_posts/win10启动vagrant.md","raw":"---\ntitle: win10启动vagrant\ndate: 2017-07-18 16:37:55\ntags: [vagrant,win10]\n---\nwin10环境下vagrant启动会报错。    \n## 正常启动步骤：\n### 设置virtual box的adapter网卡    \n打开Preferences -> Network -> Host-only Networks Tab    \n\n* 将默认的adapter网卡的ipv4的地址，改写成192.168.xx.1\n* 将mask改为255.255.255.0\n\n### 启动vagrant\n\n    $ vagrant up \n    \n如果启动时报错    \n    \n    Bringing machine 'default' up with 'virtualbox' provider...\n    There was an error while executing `VBoxManage`, a CLI used by Vagrant\n    for controlling VirtualBox. The command and stderr is shown below.\n\n    Command: [\"hostonlyif\", \"create\"]\n\n    Stderr: 0%...\n    Progress state: E_FAIL\n    VBoxManage.exe: error: Failed to create the host-only adapter\n    VBoxManage.exe: error: Code E_FAIL (0x80004005) - Unspecified error (extended info not available)\n    VBoxManage.exe: error: Context: \"int __cdecl handleCreate(struct HandlerArg ,int,int )\" at line 68 of file VBoxManageHostonly.cpp\n    \n1. check下virtual box有没有创建一个新的adapter网卡。\n2. check该网卡的ipv4的地址是以192.168开头的。\n3. 如果成功创建了，则再次vagrant up。就启动成功了。","slug":"win10启动vagrant","published":1,"updated":"2018-04-19T03:20:43.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8zd001nsof7svhcqjtq","content":"<p>win10环境下vagrant启动会报错。    </p>\n<h2 id=\"正常启动步骤：\"><a href=\"#正常启动步骤：\" class=\"headerlink\" title=\"正常启动步骤：\"></a>正常启动步骤：</h2><h3 id=\"设置virtual-box的adapter网卡\"><a href=\"#设置virtual-box的adapter网卡\" class=\"headerlink\" title=\"设置virtual box的adapter网卡\"></a>设置virtual box的adapter网卡</h3><p>打开Preferences -&gt; Network -&gt; Host-only Networks Tab    </p>\n<ul>\n<li>将默认的adapter网卡的ipv4的地址，改写成192.168.xx.1</li>\n<li>将mask改为255.255.255.0</li>\n</ul>\n<h3 id=\"启动vagrant\"><a href=\"#启动vagrant\" class=\"headerlink\" title=\"启动vagrant\"></a>启动vagrant</h3><pre><code>$ vagrant up \n</code></pre><p>如果启动时报错    </p>\n<pre><code>Bringing machine &apos;default&apos; up with &apos;virtualbox&apos; provider...\nThere was an error while executing `VBoxManage`, a CLI used by Vagrant\nfor controlling VirtualBox. The command and stderr is shown below.\n\nCommand: [&quot;hostonlyif&quot;, &quot;create&quot;]\n\nStderr: 0%...\nProgress state: E_FAIL\nVBoxManage.exe: error: Failed to create the host-only adapter\nVBoxManage.exe: error: Code E_FAIL (0x80004005) - Unspecified error (extended info not available)\nVBoxManage.exe: error: Context: &quot;int __cdecl handleCreate(struct HandlerArg ,int,int )&quot; at line 68 of file VBoxManageHostonly.cpp\n</code></pre><ol>\n<li>check下virtual box有没有创建一个新的adapter网卡。</li>\n<li>check该网卡的ipv4的地址是以192.168开头的。</li>\n<li>如果成功创建了，则再次vagrant up。就启动成功了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>win10环境下vagrant启动会报错。    </p>\n<h2 id=\"正常启动步骤：\"><a href=\"#正常启动步骤：\" class=\"headerlink\" title=\"正常启动步骤：\"></a>正常启动步骤：</h2><h3 id=\"设置virtual-box的adapter网卡\"><a href=\"#设置virtual-box的adapter网卡\" class=\"headerlink\" title=\"设置virtual box的adapter网卡\"></a>设置virtual box的adapter网卡</h3><p>打开Preferences -&gt; Network -&gt; Host-only Networks Tab    </p>\n<ul>\n<li>将默认的adapter网卡的ipv4的地址，改写成192.168.xx.1</li>\n<li>将mask改为255.255.255.0</li>\n</ul>\n<h3 id=\"启动vagrant\"><a href=\"#启动vagrant\" class=\"headerlink\" title=\"启动vagrant\"></a>启动vagrant</h3><pre><code>$ vagrant up \n</code></pre><p>如果启动时报错    </p>\n<pre><code>Bringing machine &apos;default&apos; up with &apos;virtualbox&apos; provider...\nThere was an error while executing `VBoxManage`, a CLI used by Vagrant\nfor controlling VirtualBox. The command and stderr is shown below.\n\nCommand: [&quot;hostonlyif&quot;, &quot;create&quot;]\n\nStderr: 0%...\nProgress state: E_FAIL\nVBoxManage.exe: error: Failed to create the host-only adapter\nVBoxManage.exe: error: Code E_FAIL (0x80004005) - Unspecified error (extended info not available)\nVBoxManage.exe: error: Context: &quot;int __cdecl handleCreate(struct HandlerArg ,int,int )&quot; at line 68 of file VBoxManageHostonly.cpp\n</code></pre><ol>\n<li>check下virtual box有没有创建一个新的adapter网卡。</li>\n<li>check该网卡的ipv4的地址是以192.168开头的。</li>\n<li>如果成功创建了，则再次vagrant up。就启动成功了。</li>\n</ol>\n"},{"title":"上传IOS APP一直卡在'Authenticating with the iTunes store'","date":"2017-09-29T05:32:42.000Z","_content":"### 打开终端：\n```shell\ncd ~\nmv .itmstransporter/ .old_itmstransporter/\n\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter\"\n```\n当Transporter更新完成之后，再上传ios app就好了。\n[参考stackoverflow](https://stackoverflow.com/questions/22443425/application-loader-stuck-at-authenticating-with-the-itunes-store-when-uploadin/40423739#40423739)","source":"_posts/上传IOS-APP一直卡在-Authenticating-with-the-iTunes-store.md","raw":"---\ntitle: 上传IOS APP一直卡在'Authenticating with the iTunes store'\ndate: 2017-09-29 13:32:42\ntags: [app, ios]\n---\n### 打开终端：\n```shell\ncd ~\nmv .itmstransporter/ .old_itmstransporter/\n\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter\"\n```\n当Transporter更新完成之后，再上传ios app就好了。\n[参考stackoverflow](https://stackoverflow.com/questions/22443425/application-loader-stuck-at-authenticating-with-the-itunes-store-when-uploadin/40423739#40423739)","slug":"上传IOS-APP一直卡在-Authenticating-with-the-iTunes-store","published":1,"updated":"2018-04-19T03:20:43.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8zi001psof7o1ajsrwy","content":"<h3 id=\"打开终端：\"><a href=\"#打开终端：\" class=\"headerlink\" title=\"打开终端：\"></a>打开终端：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mv .itmstransporter/ .old_itmstransporter/</span><br><span class=\"line\">\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter\"</span><br></pre></td></tr></table></figure>\n<p>当Transporter更新完成之后，再上传ios app就好了。<br><a href=\"https://stackoverflow.com/questions/22443425/application-loader-stuck-at-authenticating-with-the-itunes-store-when-uploadin/40423739#40423739\" target=\"_blank\" rel=\"noopener\">参考stackoverflow</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"打开终端：\"><a href=\"#打开终端：\" class=\"headerlink\" title=\"打开终端：\"></a>打开终端：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mv .itmstransporter/ .old_itmstransporter/</span><br><span class=\"line\">\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter\"</span><br></pre></td></tr></table></figure>\n<p>当Transporter更新完成之后，再上传ios app就好了。<br><a href=\"https://stackoverflow.com/questions/22443425/application-loader-stuck-at-authenticating-with-the-itunes-store-when-uploadin/40423739#40423739\" target=\"_blank\" rel=\"noopener\">参考stackoverflow</a></p>\n"},{"title":"使用virtualenv","date":"2016-05-27T14:00:05.000Z","_content":"\n虚拟环境非常有用。可以在系统的python解释器中避免包的混乱和版本的冲突。\n\n## 安装virtualenv\n\n    sudo pip install virtualenv\n\n## 创建python虚拟环境\n\n在工程文件夹下创建python虚拟环境。创建虚拟环境后，当前文件夹中会出现一个子文件夹，名字为下述命令中指定的参数venv。  \n\n    virtualenv venv     \n    \n## 激活\n\n    source venv/bin/activate\n    \n## 退出\n\n    deactivate","source":"_posts/使用virtualenv.md","raw":"---\ntitle: 使用virtualenv\ndate: 2016-05-27 22:00:05\ntags: python\n---\n\n虚拟环境非常有用。可以在系统的python解释器中避免包的混乱和版本的冲突。\n\n## 安装virtualenv\n\n    sudo pip install virtualenv\n\n## 创建python虚拟环境\n\n在工程文件夹下创建python虚拟环境。创建虚拟环境后，当前文件夹中会出现一个子文件夹，名字为下述命令中指定的参数venv。  \n\n    virtualenv venv     \n    \n## 激活\n\n    source venv/bin/activate\n    \n## 退出\n\n    deactivate","slug":"使用virtualenv","published":1,"updated":"2018-04-19T03:20:43.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8zj001qsof7iohqib7f","content":"<p>虚拟环境非常有用。可以在系统的python解释器中避免包的混乱和版本的冲突。</p>\n<h2 id=\"安装virtualenv\"><a href=\"#安装virtualenv\" class=\"headerlink\" title=\"安装virtualenv\"></a>安装virtualenv</h2><pre><code>sudo pip install virtualenv\n</code></pre><h2 id=\"创建python虚拟环境\"><a href=\"#创建python虚拟环境\" class=\"headerlink\" title=\"创建python虚拟环境\"></a>创建python虚拟环境</h2><p>在工程文件夹下创建python虚拟环境。创建虚拟环境后，当前文件夹中会出现一个子文件夹，名字为下述命令中指定的参数venv。  </p>\n<pre><code>virtualenv venv     \n</code></pre><h2 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h2><pre><code>source venv/bin/activate\n</code></pre><h2 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h2><pre><code>deactivate\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>虚拟环境非常有用。可以在系统的python解释器中避免包的混乱和版本的冲突。</p>\n<h2 id=\"安装virtualenv\"><a href=\"#安装virtualenv\" class=\"headerlink\" title=\"安装virtualenv\"></a>安装virtualenv</h2><pre><code>sudo pip install virtualenv\n</code></pre><h2 id=\"创建python虚拟环境\"><a href=\"#创建python虚拟环境\" class=\"headerlink\" title=\"创建python虚拟环境\"></a>创建python虚拟环境</h2><p>在工程文件夹下创建python虚拟环境。创建虚拟环境后，当前文件夹中会出现一个子文件夹，名字为下述命令中指定的参数venv。  </p>\n<pre><code>virtualenv venv     \n</code></pre><h2 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h2><pre><code>source venv/bin/activate\n</code></pre><h2 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h2><pre><code>deactivate\n</code></pre>"},{"title":"react native初体验","date":"2016-07-07T06:21:11.000Z","_content":"今天想体验一下react native\n\n    $ brew install node\n    $ brew install watchman\n    $ brew install flow\n    $ sudo npm install -g react-native-cli\n    \n结果报错如下\n\n    $ network getaddrinfo ENOTFOUND registry.npmjs.org registry.npmjs.org:443\n    \n给npm设置proxy翻墙安装就成功了。\n\n    $ npm config set proxy http://address:8080\n\n初始化一个project\n\n    $ react-native init HelloWorld\n\n成功后，新new的project里，会建立好ios和android的初始工程。\n运行IOS应用程序：\n\n    $ react-native run-ios\n\n运行Android应用程序：\n\n    $ react-native run-android\n\nIOS环境配置很快啊，只要网络没有问题，就很快可以run成功。\nAndroid环境配了三天啊。。。各种坑，各种查资料，还好最后也run好了。\n\n开始实战吧。\n","source":"_posts/react-native初体验.md","raw":"---\ntitle: react native初体验\ndate: 2016-07-07 14:21:11\ntags: [react native,npmjs.org:443]\n---\n今天想体验一下react native\n\n    $ brew install node\n    $ brew install watchman\n    $ brew install flow\n    $ sudo npm install -g react-native-cli\n    \n结果报错如下\n\n    $ network getaddrinfo ENOTFOUND registry.npmjs.org registry.npmjs.org:443\n    \n给npm设置proxy翻墙安装就成功了。\n\n    $ npm config set proxy http://address:8080\n\n初始化一个project\n\n    $ react-native init HelloWorld\n\n成功后，新new的project里，会建立好ios和android的初始工程。\n运行IOS应用程序：\n\n    $ react-native run-ios\n\n运行Android应用程序：\n\n    $ react-native run-android\n\nIOS环境配置很快啊，只要网络没有问题，就很快可以run成功。\nAndroid环境配了三天啊。。。各种坑，各种查资料，还好最后也run好了。\n\n开始实战吧。\n","slug":"react-native初体验","published":1,"updated":"2018-04-19T03:20:43.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck8zl001ssof7c0bb3ft4","content":"<p>今天想体验一下react native</p>\n<pre><code>$ brew install node\n$ brew install watchman\n$ brew install flow\n$ sudo npm install -g react-native-cli\n</code></pre><p>结果报错如下</p>\n<pre><code>$ network getaddrinfo ENOTFOUND registry.npmjs.org registry.npmjs.org:443\n</code></pre><p>给npm设置proxy翻墙安装就成功了。</p>\n<pre><code>$ npm config set proxy http://address:8080\n</code></pre><p>初始化一个project</p>\n<pre><code>$ react-native init HelloWorld\n</code></pre><p>成功后，新new的project里，会建立好ios和android的初始工程。<br>运行IOS应用程序：</p>\n<pre><code>$ react-native run-ios\n</code></pre><p>运行Android应用程序：</p>\n<pre><code>$ react-native run-android\n</code></pre><p>IOS环境配置很快啊，只要网络没有问题，就很快可以run成功。<br>Android环境配了三天啊。。。各种坑，各种查资料，还好最后也run好了。</p>\n<p>开始实战吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天想体验一下react native</p>\n<pre><code>$ brew install node\n$ brew install watchman\n$ brew install flow\n$ sudo npm install -g react-native-cli\n</code></pre><p>结果报错如下</p>\n<pre><code>$ network getaddrinfo ENOTFOUND registry.npmjs.org registry.npmjs.org:443\n</code></pre><p>给npm设置proxy翻墙安装就成功了。</p>\n<pre><code>$ npm config set proxy http://address:8080\n</code></pre><p>初始化一个project</p>\n<pre><code>$ react-native init HelloWorld\n</code></pre><p>成功后，新new的project里，会建立好ios和android的初始工程。<br>运行IOS应用程序：</p>\n<pre><code>$ react-native run-ios\n</code></pre><p>运行Android应用程序：</p>\n<pre><code>$ react-native run-android\n</code></pre><p>IOS环境配置很快啊，只要网络没有问题，就很快可以run成功。<br>Android环境配了三天啊。。。各种坑，各种查资料，还好最后也run好了。</p>\n<p>开始实战吧。</p>\n"},{"title":"关于android资源文件路径","date":"2017-11-04T10:33:16.000Z","_content":"## android资源文件的目录：    \n\n* res/raw文件夹\n* asserts文件夹\n\n#### res/raw\n不能创建文件夹，只可创建文件。\n\n#### asserts\n* 可以创建文件夹。\n* AssertManager没有提供直接获取asserts文件夹folder路径的function。 \n","source":"_posts/关于android资源文件路径.md","raw":"---\ntitle: 关于android资源文件路径\ndate: 2017-11-04 18:33:16\ntags: [android]\n---\n## android资源文件的目录：    \n\n* res/raw文件夹\n* asserts文件夹\n\n#### res/raw\n不能创建文件夹，只可创建文件。\n\n#### asserts\n* 可以创建文件夹。\n* AssertManager没有提供直接获取asserts文件夹folder路径的function。 \n","slug":"关于android资源文件路径","published":1,"updated":"2018-04-19T03:20:43.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck910004msof7h1i1x12b","content":"<h2 id=\"android资源文件的目录：\"><a href=\"#android资源文件的目录：\" class=\"headerlink\" title=\"android资源文件的目录：\"></a>android资源文件的目录：</h2><ul>\n<li>res/raw文件夹</li>\n<li>asserts文件夹</li>\n</ul>\n<h4 id=\"res-raw\"><a href=\"#res-raw\" class=\"headerlink\" title=\"res/raw\"></a>res/raw</h4><p>不能创建文件夹，只可创建文件。</p>\n<h4 id=\"asserts\"><a href=\"#asserts\" class=\"headerlink\" title=\"asserts\"></a>asserts</h4><ul>\n<li>可以创建文件夹。</li>\n<li>AssertManager没有提供直接获取asserts文件夹folder路径的function。 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"android资源文件的目录：\"><a href=\"#android资源文件的目录：\" class=\"headerlink\" title=\"android资源文件的目录：\"></a>android资源文件的目录：</h2><ul>\n<li>res/raw文件夹</li>\n<li>asserts文件夹</li>\n</ul>\n<h4 id=\"res-raw\"><a href=\"#res-raw\" class=\"headerlink\" title=\"res/raw\"></a>res/raw</h4><p>不能创建文件夹，只可创建文件。</p>\n<h4 id=\"asserts\"><a href=\"#asserts\" class=\"headerlink\" title=\"asserts\"></a>asserts</h4><ul>\n<li>可以创建文件夹。</li>\n<li>AssertManager没有提供直接获取asserts文件夹folder路径的function。 </li>\n</ul>\n"},{"title":"搭建gitbucket的docker环境","date":"2016-12-27T05:49:09.000Z","_content":"为了更方便简洁的部署各种服务器应用，我在社内环境安装了docker。  \n从社内直连github有时极不稳定。社内团队协同开发，搭建本地的git仓库，我选择搭建gitbucket。  \n  \n    $ docker search gitbucket\n\n虽然没有docker官方放出的gitbucket镜像，但从列表里选stars最多也算靠谱点儿吧。  \n\n    $ docker pull f99aq8ove/gitbucket\n\ngithub也不网络稳定啊。。。下载两次都失败，寻找国内的镜像找到了daocloud。去daocloud官网去注册一下，然后配置docker加速器。  \n\n    $ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://5706b345.m.daocloud.io\n\n该脚本可以将 --registry-mirror 加入到你的docker配置文件 /etc/default/docker 中。\n\n配置好了之后，再次docker pull。成功！   \n启动镜像。  \n\n    $ docker run -d -p 8080:8080 -p 29418:29418 -v ${PWD}/gitbucket-data:/gitbucket f99aq8ove/gitbucket\n配置了映射端口8080是gitbucket的网页入口，映射端口29418是ssh的端口。  \n正常启动后，通过网页打开，显示正常。  \n创建用户组，创建新的repository。  \n在客户端local创建开发环境。  \n\n    $ mkdir xxxdir\n    $ cd xxxdir\n    $ touch README.md\n    $ git add .\n    $ git commit -m \"first commit\"\n    $ git remote add origin [URL]\n    $ git push origin master\n在进行push的时候，失败了，报错如下。  \n\n    fatal: unable to access 'http://xxx.git/': The requested URL returned error: 503\n    \n查了一下，有可能是在gitbucket服务器之前，设置了http代理所导致的。设置git http操作的debug。  \n\n    $ export GIT_CURL_VERBOSE = 1\n再次git push查看，的确有从http代理向gitbucket服务器发出的请求。但我不知道在哪里配置了http代理了。。。  \n使用git config命令查看配置文件  \n\n查看仓库级的config  \n\n    $ git config -local -l\n查看全局级的config\n\n    $ git config -global -l\n查看系统级的config\n\n    $ git config -system -l\n查看当前生效的配置\n\n    $ git config -l\nok！将设置的http代理全部注释掉，git push成功啦！  \n社内gitbucket搭建成功！\n\n","source":"_posts/搭建gitbucket的docker环境.md","raw":"---\ntitle: 搭建gitbucket的docker环境\ndate: 2016-12-27 13:49:09\ntags: [gitbucket,git,docker]\n---\n为了更方便简洁的部署各种服务器应用，我在社内环境安装了docker。  \n从社内直连github有时极不稳定。社内团队协同开发，搭建本地的git仓库，我选择搭建gitbucket。  \n  \n    $ docker search gitbucket\n\n虽然没有docker官方放出的gitbucket镜像，但从列表里选stars最多也算靠谱点儿吧。  \n\n    $ docker pull f99aq8ove/gitbucket\n\ngithub也不网络稳定啊。。。下载两次都失败，寻找国内的镜像找到了daocloud。去daocloud官网去注册一下，然后配置docker加速器。  \n\n    $ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://5706b345.m.daocloud.io\n\n该脚本可以将 --registry-mirror 加入到你的docker配置文件 /etc/default/docker 中。\n\n配置好了之后，再次docker pull。成功！   \n启动镜像。  \n\n    $ docker run -d -p 8080:8080 -p 29418:29418 -v ${PWD}/gitbucket-data:/gitbucket f99aq8ove/gitbucket\n配置了映射端口8080是gitbucket的网页入口，映射端口29418是ssh的端口。  \n正常启动后，通过网页打开，显示正常。  \n创建用户组，创建新的repository。  \n在客户端local创建开发环境。  \n\n    $ mkdir xxxdir\n    $ cd xxxdir\n    $ touch README.md\n    $ git add .\n    $ git commit -m \"first commit\"\n    $ git remote add origin [URL]\n    $ git push origin master\n在进行push的时候，失败了，报错如下。  \n\n    fatal: unable to access 'http://xxx.git/': The requested URL returned error: 503\n    \n查了一下，有可能是在gitbucket服务器之前，设置了http代理所导致的。设置git http操作的debug。  \n\n    $ export GIT_CURL_VERBOSE = 1\n再次git push查看，的确有从http代理向gitbucket服务器发出的请求。但我不知道在哪里配置了http代理了。。。  \n使用git config命令查看配置文件  \n\n查看仓库级的config  \n\n    $ git config -local -l\n查看全局级的config\n\n    $ git config -global -l\n查看系统级的config\n\n    $ git config -system -l\n查看当前生效的配置\n\n    $ git config -l\nok！将设置的http代理全部注释掉，git push成功啦！  \n社内gitbucket搭建成功！\n\n","slug":"搭建gitbucket的docker环境","published":1,"updated":"2018-04-19T03:20:43.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck914004nsof7g4q6f19f","content":"<p>为了更方便简洁的部署各种服务器应用，我在社内环境安装了docker。<br>从社内直连github有时极不稳定。社内团队协同开发，搭建本地的git仓库，我选择搭建gitbucket。  </p>\n<pre><code>$ docker search gitbucket\n</code></pre><p>虽然没有docker官方放出的gitbucket镜像，但从列表里选stars最多也算靠谱点儿吧。  </p>\n<pre><code>$ docker pull f99aq8ove/gitbucket\n</code></pre><p>github也不网络稳定啊。。。下载两次都失败，寻找国内的镜像找到了daocloud。去daocloud官网去注册一下，然后配置docker加速器。  </p>\n<pre><code>$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://5706b345.m.daocloud.io\n</code></pre><p>该脚本可以将 –registry-mirror 加入到你的docker配置文件 /etc/default/docker 中。</p>\n<p>配置好了之后，再次docker pull。成功！<br>启动镜像。  </p>\n<pre><code>$ docker run -d -p 8080:8080 -p 29418:29418 -v ${PWD}/gitbucket-data:/gitbucket f99aq8ove/gitbucket\n</code></pre><p>配置了映射端口8080是gitbucket的网页入口，映射端口29418是ssh的端口。<br>正常启动后，通过网页打开，显示正常。<br>创建用户组，创建新的repository。<br>在客户端local创建开发环境。  </p>\n<pre><code>$ mkdir xxxdir\n$ cd xxxdir\n$ touch README.md\n$ git add .\n$ git commit -m &quot;first commit&quot;\n$ git remote add origin [URL]\n$ git push origin master\n</code></pre><p>在进行push的时候，失败了，报错如下。  </p>\n<pre><code>fatal: unable to access &apos;http://xxx.git/&apos;: The requested URL returned error: 503\n</code></pre><p>查了一下，有可能是在gitbucket服务器之前，设置了http代理所导致的。设置git http操作的debug。  </p>\n<pre><code>$ export GIT_CURL_VERBOSE = 1\n</code></pre><p>再次git push查看，的确有从http代理向gitbucket服务器发出的请求。但我不知道在哪里配置了http代理了。。。<br>使用git config命令查看配置文件  </p>\n<p>查看仓库级的config  </p>\n<pre><code>$ git config -local -l\n</code></pre><p>查看全局级的config</p>\n<pre><code>$ git config -global -l\n</code></pre><p>查看系统级的config</p>\n<pre><code>$ git config -system -l\n</code></pre><p>查看当前生效的配置</p>\n<pre><code>$ git config -l\n</code></pre><p>ok！将设置的http代理全部注释掉，git push成功啦！<br>社内gitbucket搭建成功！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为了更方便简洁的部署各种服务器应用，我在社内环境安装了docker。<br>从社内直连github有时极不稳定。社内团队协同开发，搭建本地的git仓库，我选择搭建gitbucket。  </p>\n<pre><code>$ docker search gitbucket\n</code></pre><p>虽然没有docker官方放出的gitbucket镜像，但从列表里选stars最多也算靠谱点儿吧。  </p>\n<pre><code>$ docker pull f99aq8ove/gitbucket\n</code></pre><p>github也不网络稳定啊。。。下载两次都失败，寻找国内的镜像找到了daocloud。去daocloud官网去注册一下，然后配置docker加速器。  </p>\n<pre><code>$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://5706b345.m.daocloud.io\n</code></pre><p>该脚本可以将 –registry-mirror 加入到你的docker配置文件 /etc/default/docker 中。</p>\n<p>配置好了之后，再次docker pull。成功！<br>启动镜像。  </p>\n<pre><code>$ docker run -d -p 8080:8080 -p 29418:29418 -v ${PWD}/gitbucket-data:/gitbucket f99aq8ove/gitbucket\n</code></pre><p>配置了映射端口8080是gitbucket的网页入口，映射端口29418是ssh的端口。<br>正常启动后，通过网页打开，显示正常。<br>创建用户组，创建新的repository。<br>在客户端local创建开发环境。  </p>\n<pre><code>$ mkdir xxxdir\n$ cd xxxdir\n$ touch README.md\n$ git add .\n$ git commit -m &quot;first commit&quot;\n$ git remote add origin [URL]\n$ git push origin master\n</code></pre><p>在进行push的时候，失败了，报错如下。  </p>\n<pre><code>fatal: unable to access &apos;http://xxx.git/&apos;: The requested URL returned error: 503\n</code></pre><p>查了一下，有可能是在gitbucket服务器之前，设置了http代理所导致的。设置git http操作的debug。  </p>\n<pre><code>$ export GIT_CURL_VERBOSE = 1\n</code></pre><p>再次git push查看，的确有从http代理向gitbucket服务器发出的请求。但我不知道在哪里配置了http代理了。。。<br>使用git config命令查看配置文件  </p>\n<p>查看仓库级的config  </p>\n<pre><code>$ git config -local -l\n</code></pre><p>查看全局级的config</p>\n<pre><code>$ git config -global -l\n</code></pre><p>查看系统级的config</p>\n<pre><code>$ git config -system -l\n</code></pre><p>查看当前生效的配置</p>\n<pre><code>$ git config -l\n</code></pre><p>ok！将设置的http代理全部注释掉，git push成功啦！<br>社内gitbucket搭建成功！</p>\n"},{"title":"开发团队跨平台开发环境集中管理化之vagrant","date":"2016-08-12T01:58:01.000Z","_content":"**vagrant**是一款用来构建虚拟开发环境的工具，非常适合各类开发语言的web应用，因统一安装本地开发环境浪费的人力成本及时间成本，以及不可避免的“work on my machine”错误，将永久告别～  \n\n## 安装virtualbox及vagrant\nvagrant对virtualbox支持的非常好。但不匹配的版本，加载box会发生或多或少的问题。    \n\n我的工作环境的软件版本是：  \nvagrant 1.6.3  \nvirtualbox 4.2.12-84980\n\n## 添加镜像\n安装好后运行以下命令可以添加vagrant官方的box镜像。  \n\n    $ vagrant box add hashicorp/precise64\n这是一个标准的64bit的ubuntu系统。  \n如果要下载其他系统的镜像，可以在这里下载:<a href=\"https://atlas.hashicorp.com/boxes/search\">https://atlas.hashicorp.com/boxes/search</a>   \n\n## 初始化开发环境\n切换到box文件所在目录，加载box文件及初始化 \n   \n    $ cd ~/dev \n    $ vagrant box add test test.box \n    $ vagrant init test\n    $ vagrant up\n\n## ssh登录\nmac下ssh登录，虚拟机目录 /vagrant 就是宿主机的 ~/dev  \n    \n    $ vagrant ssh\n    $ cd /vagrant\n**windows用户注意:** windows终端需要使用ssh客户端，比如putty等。\n\n## 其他设置\nvagrant 初始化成功后，会在初始化的目录里生成一个 vagrantfile 的配置文件，可以修改配置文件进行个性化的定制。  \n\nvagrant 默认是使用端口映射的方式将虚拟机的端口映射本地从而实现类似 http://localhost:80 这种访问方式。  \n相比之下，host-only模式显得非常方便。打开 vagrantfile，将下面的注释去掉，便可以访问192.168.33.10机器上的服务了。 \n \n    config.vm.network \"private_network\", ip:\"192.168.33.10\"\n\n## 打包分发\n当配置好开发环境后，退出并关闭虚拟机。对开发环境进行打包。\n    \n    $ vagrant package\n\n打包后，就会在当前目录下生成一个 package.box 的文件。可以分发这个文件给其他开发者。\n\n## 集成预安装\nvagrant 还提供预安装定制，打开 vagrantfile, 可以放开这些在文件末尾处有被注释的代码：\n\n    config.vm.provision \"shell\", inline: <<-SHELL\n    \tapt-get update\n    \tapt-get install -y apache2\n    SHELL\n\n可以把需要安装的软件应用全部写在里面，在初次 vagrant up 的时候，虚拟机会预先执行这些命令。  \n\n如果不是初次运行，但又修改了这些命令。则可以进行重载vagrant。  \n\n    $ vagrant reload --provision\n\n也可以把这些配置写在shell脚本里面，让vagrant加载运行这些脚本。因此整个团队可以维护一个 vagrantfile 或者 shell 脚本，把这个文件放在github上，还可以监控它的版本，多么简单和容易啊！哈哈\n\n## 常用命令\n\t$ vagrant init  # 初始化\n\t$ vagrant up  # 启动\n\t$ vagrant halt  # 关闭\n\t$ vagrant reload  # 重启\n\t$ vagrant ssh  # ssh\n\t$ vagrant status  # 查看状态\n\t$ vagrant destroy  # 销毁\n","source":"_posts/跨平台开发环境集中管理化之vagrant.md","raw":"---\ntitle: 开发团队跨平台开发环境集中管理化之vagrant\ndate: 2016-08-12 09:58:01\ntags: [vagrant, 跨平台]\n---\n**vagrant**是一款用来构建虚拟开发环境的工具，非常适合各类开发语言的web应用，因统一安装本地开发环境浪费的人力成本及时间成本，以及不可避免的“work on my machine”错误，将永久告别～  \n\n## 安装virtualbox及vagrant\nvagrant对virtualbox支持的非常好。但不匹配的版本，加载box会发生或多或少的问题。    \n\n我的工作环境的软件版本是：  \nvagrant 1.6.3  \nvirtualbox 4.2.12-84980\n\n## 添加镜像\n安装好后运行以下命令可以添加vagrant官方的box镜像。  \n\n    $ vagrant box add hashicorp/precise64\n这是一个标准的64bit的ubuntu系统。  \n如果要下载其他系统的镜像，可以在这里下载:<a href=\"https://atlas.hashicorp.com/boxes/search\">https://atlas.hashicorp.com/boxes/search</a>   \n\n## 初始化开发环境\n切换到box文件所在目录，加载box文件及初始化 \n   \n    $ cd ~/dev \n    $ vagrant box add test test.box \n    $ vagrant init test\n    $ vagrant up\n\n## ssh登录\nmac下ssh登录，虚拟机目录 /vagrant 就是宿主机的 ~/dev  \n    \n    $ vagrant ssh\n    $ cd /vagrant\n**windows用户注意:** windows终端需要使用ssh客户端，比如putty等。\n\n## 其他设置\nvagrant 初始化成功后，会在初始化的目录里生成一个 vagrantfile 的配置文件，可以修改配置文件进行个性化的定制。  \n\nvagrant 默认是使用端口映射的方式将虚拟机的端口映射本地从而实现类似 http://localhost:80 这种访问方式。  \n相比之下，host-only模式显得非常方便。打开 vagrantfile，将下面的注释去掉，便可以访问192.168.33.10机器上的服务了。 \n \n    config.vm.network \"private_network\", ip:\"192.168.33.10\"\n\n## 打包分发\n当配置好开发环境后，退出并关闭虚拟机。对开发环境进行打包。\n    \n    $ vagrant package\n\n打包后，就会在当前目录下生成一个 package.box 的文件。可以分发这个文件给其他开发者。\n\n## 集成预安装\nvagrant 还提供预安装定制，打开 vagrantfile, 可以放开这些在文件末尾处有被注释的代码：\n\n    config.vm.provision \"shell\", inline: <<-SHELL\n    \tapt-get update\n    \tapt-get install -y apache2\n    SHELL\n\n可以把需要安装的软件应用全部写在里面，在初次 vagrant up 的时候，虚拟机会预先执行这些命令。  \n\n如果不是初次运行，但又修改了这些命令。则可以进行重载vagrant。  \n\n    $ vagrant reload --provision\n\n也可以把这些配置写在shell脚本里面，让vagrant加载运行这些脚本。因此整个团队可以维护一个 vagrantfile 或者 shell 脚本，把这个文件放在github上，还可以监控它的版本，多么简单和容易啊！哈哈\n\n## 常用命令\n\t$ vagrant init  # 初始化\n\t$ vagrant up  # 启动\n\t$ vagrant halt  # 关闭\n\t$ vagrant reload  # 重启\n\t$ vagrant ssh  # ssh\n\t$ vagrant status  # 查看状态\n\t$ vagrant destroy  # 销毁\n","slug":"跨平台开发环境集中管理化之vagrant","published":1,"updated":"2018-04-19T03:20:43.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck915004psof714fkb7he","content":"<p><strong>vagrant</strong>是一款用来构建虚拟开发环境的工具，非常适合各类开发语言的web应用，因统一安装本地开发环境浪费的人力成本及时间成本，以及不可避免的“work on my machine”错误，将永久告别～  </p>\n<h2 id=\"安装virtualbox及vagrant\"><a href=\"#安装virtualbox及vagrant\" class=\"headerlink\" title=\"安装virtualbox及vagrant\"></a>安装virtualbox及vagrant</h2><p>vagrant对virtualbox支持的非常好。但不匹配的版本，加载box会发生或多或少的问题。    </p>\n<p>我的工作环境的软件版本是：<br>vagrant 1.6.3<br>virtualbox 4.2.12-84980</p>\n<h2 id=\"添加镜像\"><a href=\"#添加镜像\" class=\"headerlink\" title=\"添加镜像\"></a>添加镜像</h2><p>安装好后运行以下命令可以添加vagrant官方的box镜像。  </p>\n<pre><code>$ vagrant box add hashicorp/precise64\n</code></pre><p>这是一个标准的64bit的ubuntu系统。<br>如果要下载其他系统的镜像，可以在这里下载:<a href=\"https://atlas.hashicorp.com/boxes/search\" target=\"_blank\" rel=\"noopener\">https://atlas.hashicorp.com/boxes/search</a>   </p>\n<h2 id=\"初始化开发环境\"><a href=\"#初始化开发环境\" class=\"headerlink\" title=\"初始化开发环境\"></a>初始化开发环境</h2><p>切换到box文件所在目录，加载box文件及初始化 </p>\n<pre><code>$ cd ~/dev \n$ vagrant box add test test.box \n$ vagrant init test\n$ vagrant up\n</code></pre><h2 id=\"ssh登录\"><a href=\"#ssh登录\" class=\"headerlink\" title=\"ssh登录\"></a>ssh登录</h2><p>mac下ssh登录，虚拟机目录 /vagrant 就是宿主机的 ~/dev  </p>\n<pre><code>$ vagrant ssh\n$ cd /vagrant\n</code></pre><p><strong>windows用户注意:</strong> windows终端需要使用ssh客户端，比如putty等。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><p>vagrant 初始化成功后，会在初始化的目录里生成一个 vagrantfile 的配置文件，可以修改配置文件进行个性化的定制。  </p>\n<p>vagrant 默认是使用端口映射的方式将虚拟机的端口映射本地从而实现类似 <a href=\"http://localhost:80\" target=\"_blank\" rel=\"noopener\">http://localhost:80</a> 这种访问方式。<br>相比之下，host-only模式显得非常方便。打开 vagrantfile，将下面的注释去掉，便可以访问192.168.33.10机器上的服务了。 </p>\n<pre><code>config.vm.network &quot;private_network&quot;, ip:&quot;192.168.33.10&quot;\n</code></pre><h2 id=\"打包分发\"><a href=\"#打包分发\" class=\"headerlink\" title=\"打包分发\"></a>打包分发</h2><p>当配置好开发环境后，退出并关闭虚拟机。对开发环境进行打包。</p>\n<pre><code>$ vagrant package\n</code></pre><p>打包后，就会在当前目录下生成一个 package.box 的文件。可以分发这个文件给其他开发者。</p>\n<h2 id=\"集成预安装\"><a href=\"#集成预安装\" class=\"headerlink\" title=\"集成预安装\"></a>集成预安装</h2><p>vagrant 还提供预安装定制，打开 vagrantfile, 可以放开这些在文件末尾处有被注释的代码：</p>\n<pre><code>config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL\n    apt-get update\n    apt-get install -y apache2\nSHELL\n</code></pre><p>可以把需要安装的软件应用全部写在里面，在初次 vagrant up 的时候，虚拟机会预先执行这些命令。  </p>\n<p>如果不是初次运行，但又修改了这些命令。则可以进行重载vagrant。  </p>\n<pre><code>$ vagrant reload --provision\n</code></pre><p>也可以把这些配置写在shell脚本里面，让vagrant加载运行这些脚本。因此整个团队可以维护一个 vagrantfile 或者 shell 脚本，把这个文件放在github上，还可以监控它的版本，多么简单和容易啊！哈哈</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><pre><code>$ vagrant init  # 初始化\n$ vagrant up  # 启动\n$ vagrant halt  # 关闭\n$ vagrant reload  # 重启\n$ vagrant ssh  # ssh\n$ vagrant status  # 查看状态\n$ vagrant destroy  # 销毁\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><strong>vagrant</strong>是一款用来构建虚拟开发环境的工具，非常适合各类开发语言的web应用，因统一安装本地开发环境浪费的人力成本及时间成本，以及不可避免的“work on my machine”错误，将永久告别～  </p>\n<h2 id=\"安装virtualbox及vagrant\"><a href=\"#安装virtualbox及vagrant\" class=\"headerlink\" title=\"安装virtualbox及vagrant\"></a>安装virtualbox及vagrant</h2><p>vagrant对virtualbox支持的非常好。但不匹配的版本，加载box会发生或多或少的问题。    </p>\n<p>我的工作环境的软件版本是：<br>vagrant 1.6.3<br>virtualbox 4.2.12-84980</p>\n<h2 id=\"添加镜像\"><a href=\"#添加镜像\" class=\"headerlink\" title=\"添加镜像\"></a>添加镜像</h2><p>安装好后运行以下命令可以添加vagrant官方的box镜像。  </p>\n<pre><code>$ vagrant box add hashicorp/precise64\n</code></pre><p>这是一个标准的64bit的ubuntu系统。<br>如果要下载其他系统的镜像，可以在这里下载:<a href=\"https://atlas.hashicorp.com/boxes/search\" target=\"_blank\" rel=\"noopener\">https://atlas.hashicorp.com/boxes/search</a>   </p>\n<h2 id=\"初始化开发环境\"><a href=\"#初始化开发环境\" class=\"headerlink\" title=\"初始化开发环境\"></a>初始化开发环境</h2><p>切换到box文件所在目录，加载box文件及初始化 </p>\n<pre><code>$ cd ~/dev \n$ vagrant box add test test.box \n$ vagrant init test\n$ vagrant up\n</code></pre><h2 id=\"ssh登录\"><a href=\"#ssh登录\" class=\"headerlink\" title=\"ssh登录\"></a>ssh登录</h2><p>mac下ssh登录，虚拟机目录 /vagrant 就是宿主机的 ~/dev  </p>\n<pre><code>$ vagrant ssh\n$ cd /vagrant\n</code></pre><p><strong>windows用户注意:</strong> windows终端需要使用ssh客户端，比如putty等。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><p>vagrant 初始化成功后，会在初始化的目录里生成一个 vagrantfile 的配置文件，可以修改配置文件进行个性化的定制。  </p>\n<p>vagrant 默认是使用端口映射的方式将虚拟机的端口映射本地从而实现类似 <a href=\"http://localhost:80\" target=\"_blank\" rel=\"noopener\">http://localhost:80</a> 这种访问方式。<br>相比之下，host-only模式显得非常方便。打开 vagrantfile，将下面的注释去掉，便可以访问192.168.33.10机器上的服务了。 </p>\n<pre><code>config.vm.network &quot;private_network&quot;, ip:&quot;192.168.33.10&quot;\n</code></pre><h2 id=\"打包分发\"><a href=\"#打包分发\" class=\"headerlink\" title=\"打包分发\"></a>打包分发</h2><p>当配置好开发环境后，退出并关闭虚拟机。对开发环境进行打包。</p>\n<pre><code>$ vagrant package\n</code></pre><p>打包后，就会在当前目录下生成一个 package.box 的文件。可以分发这个文件给其他开发者。</p>\n<h2 id=\"集成预安装\"><a href=\"#集成预安装\" class=\"headerlink\" title=\"集成预安装\"></a>集成预安装</h2><p>vagrant 还提供预安装定制，打开 vagrantfile, 可以放开这些在文件末尾处有被注释的代码：</p>\n<pre><code>config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL\n    apt-get update\n    apt-get install -y apache2\nSHELL\n</code></pre><p>可以把需要安装的软件应用全部写在里面，在初次 vagrant up 的时候，虚拟机会预先执行这些命令。  </p>\n<p>如果不是初次运行，但又修改了这些命令。则可以进行重载vagrant。  </p>\n<pre><code>$ vagrant reload --provision\n</code></pre><p>也可以把这些配置写在shell脚本里面，让vagrant加载运行这些脚本。因此整个团队可以维护一个 vagrantfile 或者 shell 脚本，把这个文件放在github上，还可以监控它的版本，多么简单和容易啊！哈哈</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><pre><code>$ vagrant init  # 初始化\n$ vagrant up  # 启动\n$ vagrant halt  # 关闭\n$ vagrant reload  # 重启\n$ vagrant ssh  # ssh\n$ vagrant status  # 查看状态\n$ vagrant destroy  # 销毁\n</code></pre>"},{"title":"配置gitbucket的webhook触发jenkins自动构建","date":"2017-11-20T04:10:22.000Z","_content":"\n## jenkins安装gitbucket插件\n在jenkins中安装插件:**Gitbucket Plugin**   \n安装好了之后配置构建触发器。    \n![构建触发器](http://obksgg9lx.bkt.clouddn.com/triggle.png)\n\n## gitbucket设置webhook\n使用root管理员账户进入需要设置webhook的具体项目中Settings->Service Hooks菜单下，配置gitbucket的webhook。    \n![配置webhook](http://obksgg9lx.bkt.clouddn.com/gitbucket.png)\n\n## 自动触发\nsource提交git。    \n![push状态](http://obksgg9lx.bkt.clouddn.com/push-status.png)\n\n自动触发构建。    \n![自动构建](http://obksgg9lx.bkt.clouddn.com/console.png)","source":"_posts/配置gitbucket的webhook触发jenkins自动构建.md","raw":"---\ntitle: 配置gitbucket的webhook触发jenkins自动构建\ndate: 2017-11-20 12:10:22\ntags: [gitbucket, webhook, jenkins, 持续部署]\n---\n\n## jenkins安装gitbucket插件\n在jenkins中安装插件:**Gitbucket Plugin**   \n安装好了之后配置构建触发器。    \n![构建触发器](http://obksgg9lx.bkt.clouddn.com/triggle.png)\n\n## gitbucket设置webhook\n使用root管理员账户进入需要设置webhook的具体项目中Settings->Service Hooks菜单下，配置gitbucket的webhook。    \n![配置webhook](http://obksgg9lx.bkt.clouddn.com/gitbucket.png)\n\n## 自动触发\nsource提交git。    \n![push状态](http://obksgg9lx.bkt.clouddn.com/push-status.png)\n\n自动触发构建。    \n![自动构建](http://obksgg9lx.bkt.clouddn.com/console.png)","slug":"配置gitbucket的webhook触发jenkins自动构建","published":1,"updated":"2018-04-19T03:20:43.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck918004qsof78uvvdezj","content":"<h2 id=\"jenkins安装gitbucket插件\"><a href=\"#jenkins安装gitbucket插件\" class=\"headerlink\" title=\"jenkins安装gitbucket插件\"></a>jenkins安装gitbucket插件</h2><p>在jenkins中安装插件:<strong>Gitbucket Plugin</strong><br>安装好了之后配置构建触发器。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/triggle.png\" alt=\"构建触发器\"></p>\n<h2 id=\"gitbucket设置webhook\"><a href=\"#gitbucket设置webhook\" class=\"headerlink\" title=\"gitbucket设置webhook\"></a>gitbucket设置webhook</h2><p>使用root管理员账户进入需要设置webhook的具体项目中Settings-&gt;Service Hooks菜单下，配置gitbucket的webhook。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/gitbucket.png\" alt=\"配置webhook\"></p>\n<h2 id=\"自动触发\"><a href=\"#自动触发\" class=\"headerlink\" title=\"自动触发\"></a>自动触发</h2><p>source提交git。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/push-status.png\" alt=\"push状态\"></p>\n<p>自动触发构建。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/console.png\" alt=\"自动构建\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"jenkins安装gitbucket插件\"><a href=\"#jenkins安装gitbucket插件\" class=\"headerlink\" title=\"jenkins安装gitbucket插件\"></a>jenkins安装gitbucket插件</h2><p>在jenkins中安装插件:<strong>Gitbucket Plugin</strong><br>安装好了之后配置构建触发器。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/triggle.png\" alt=\"构建触发器\"></p>\n<h2 id=\"gitbucket设置webhook\"><a href=\"#gitbucket设置webhook\" class=\"headerlink\" title=\"gitbucket设置webhook\"></a>gitbucket设置webhook</h2><p>使用root管理员账户进入需要设置webhook的具体项目中Settings-&gt;Service Hooks菜单下，配置gitbucket的webhook。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/gitbucket.png\" alt=\"配置webhook\"></p>\n<h2 id=\"自动触发\"><a href=\"#自动触发\" class=\"headerlink\" title=\"自动触发\"></a>自动触发</h2><p>source提交git。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/push-status.png\" alt=\"push状态\"></p>\n<p>自动触发构建。<br><img src=\"http://obksgg9lx.bkt.clouddn.com/console.png\" alt=\"自动构建\"></p>\n"},{"title":"认识javascript","date":"2016-08-08T09:08:33.000Z","_content":"## javascript基础\n\n#### 声明\n* 声明变量不用var时，该变量为全局变量\n\n#### 数据类型\n* Number  \n * *整型常量*(10进制\\8进制\\16进制)  \n \t 十六进制以0x或0X开头, 例如: 0x8a  \n    八进制必须以0开头, 例如: 0123  \n    十进制的第一位不能是0(数字0除外), 例如: 123\n * *实型常量*  \n   12.32, 193.98, 5E7, 4e5等\n  \n* Boolean\n* String  \n * \"abc\"，'abc'  \n   双引号会搜索引号内的内容是否含有变量，有则输出其值，没有则输出原有内容  \n   单引号则不会检测内容，因此效率更高\n * 特殊字符，需要以反斜杠(\\)后跟一个普通字符来表示  \n   例如: \\r, \\n, \\t, \\b, \\'\n* null常量\n* undefined常量\n* 特殊数值  \n  NaN, Infinity(无穷大), isNaN(), isFinite()\n\n#### 逻辑运算符\n* && 逻辑与\n* || 逻辑或\n* ! 逻辑非\n\n## 定义一个类\n    function Person(name) {\n    \tthis.name = name;\n    }\n## 一切都是对象\n类(函数)也是对象\n\n## 创建对象\n    var p = new Person(\"张三\")\n\n## 闭包closure\n函数内部可以直接读取全局变量。  \n     \n        var n = 999;\n        \n        function f1() {\n        \talert(n);\n        }\n        \n        f1(); // 999\n函数外部无法读取函数内的局部变量。  \n        \n        function f1() {\n        \tvar n = 999;\n        }\n        \n        alert(n); // error\n利用闭包，从函数外部读取函数内的局部变量。\n\n        function f1() {\n        \tvar n = 999;\n        \t\n        \tfunction f2() {\n        \t\talert(n);\n        \t}\n        \t\n        \treturn f2;\n        }\n        \n        var result = f1();\n        result(); // 999\n\n## 作用域scope（上下文）\n上下文对象就是使用this指针，即被调用函数所处的环境。上下文对象在一个函数内部引用调用它的对象本身。  \n\n    var someuser = {\n    \tname: 'byvoid',\n    \tfunc: function() {\n    \t\tconsole.log(this.name);\n    \t}\n    };\n    \n    var foo = {\n    \tname: 'foobar'\n    };\n    \n    someuser.func(); // byvoid\n    \n    foo.func = someuser.func;\n    foo.func(); // foobar\n    \n    name = 'global';\n    func = someuser.func;\n    func(); // globar\n\n## prototype\n利用prototype可以扩展js类。  \n    \n    Number.prototype.add = function(v) {\n    \treturn this + v;\n    }    \n    \n    var d = 6;\n    d.add(8).add(9); // d = 6 + 8 + 9\n\n扩展自定义的类。\n\n    function Person(name) {\n    \tthis.name = name;\n    }\n    \n    Person.prototype.sayHello = function() {\n    \talert(this.name);\n    }\n    \n    var p = new Person(\"zhangsan\");\n    p.sayHello();\n\n## 继承\nclassB继承classA\n\n    function classA(name) {\n    \tthis.name = name;\n    \tthis.sayHello = function() {\n    \t\talert(this.name);\n    \t}\n    }\n方法1\n    \n    function classB(name) {\n    \tthis.tempMethod = classA;\n    \tthis.tempMethod(name);\n    }\n方法2\n\n    function classB(name) {\n    \tclassA.call(this, name);\n    }\n方法3\n\n    function classB(name) {\n    \tclassA.apply(this, [name]);\n    }\n调用classB\n\n    var b = new classB(\"lisa\");\n    b.sayHello();\n\n## 可变参数\n在js的世界里，内置属性arguments可以接收可辨参数。\n\n    function sum() {\n    \tvar s = 0;\n    \tfor(var i = 0; i < arguments.length; i++) {\n    \t\ts+ = arguments[i];\n    \t}\n    \t\n    \treturn s;\n    }\n    \n    alert(sum(1,4,5));\n    alert(sum(12,15,19,21,51));\n\n\n","source":"_posts/认识javascript.md","raw":"---\ntitle: 认识javascript\ndate: 2016-08-08 17:08:33\ntags: [js, 闭包, 作用域, 上下文]\n---\n## javascript基础\n\n#### 声明\n* 声明变量不用var时，该变量为全局变量\n\n#### 数据类型\n* Number  \n * *整型常量*(10进制\\8进制\\16进制)  \n \t 十六进制以0x或0X开头, 例如: 0x8a  \n    八进制必须以0开头, 例如: 0123  \n    十进制的第一位不能是0(数字0除外), 例如: 123\n * *实型常量*  \n   12.32, 193.98, 5E7, 4e5等\n  \n* Boolean\n* String  \n * \"abc\"，'abc'  \n   双引号会搜索引号内的内容是否含有变量，有则输出其值，没有则输出原有内容  \n   单引号则不会检测内容，因此效率更高\n * 特殊字符，需要以反斜杠(\\)后跟一个普通字符来表示  \n   例如: \\r, \\n, \\t, \\b, \\'\n* null常量\n* undefined常量\n* 特殊数值  \n  NaN, Infinity(无穷大), isNaN(), isFinite()\n\n#### 逻辑运算符\n* && 逻辑与\n* || 逻辑或\n* ! 逻辑非\n\n## 定义一个类\n    function Person(name) {\n    \tthis.name = name;\n    }\n## 一切都是对象\n类(函数)也是对象\n\n## 创建对象\n    var p = new Person(\"张三\")\n\n## 闭包closure\n函数内部可以直接读取全局变量。  \n     \n        var n = 999;\n        \n        function f1() {\n        \talert(n);\n        }\n        \n        f1(); // 999\n函数外部无法读取函数内的局部变量。  \n        \n        function f1() {\n        \tvar n = 999;\n        }\n        \n        alert(n); // error\n利用闭包，从函数外部读取函数内的局部变量。\n\n        function f1() {\n        \tvar n = 999;\n        \t\n        \tfunction f2() {\n        \t\talert(n);\n        \t}\n        \t\n        \treturn f2;\n        }\n        \n        var result = f1();\n        result(); // 999\n\n## 作用域scope（上下文）\n上下文对象就是使用this指针，即被调用函数所处的环境。上下文对象在一个函数内部引用调用它的对象本身。  \n\n    var someuser = {\n    \tname: 'byvoid',\n    \tfunc: function() {\n    \t\tconsole.log(this.name);\n    \t}\n    };\n    \n    var foo = {\n    \tname: 'foobar'\n    };\n    \n    someuser.func(); // byvoid\n    \n    foo.func = someuser.func;\n    foo.func(); // foobar\n    \n    name = 'global';\n    func = someuser.func;\n    func(); // globar\n\n## prototype\n利用prototype可以扩展js类。  \n    \n    Number.prototype.add = function(v) {\n    \treturn this + v;\n    }    \n    \n    var d = 6;\n    d.add(8).add(9); // d = 6 + 8 + 9\n\n扩展自定义的类。\n\n    function Person(name) {\n    \tthis.name = name;\n    }\n    \n    Person.prototype.sayHello = function() {\n    \talert(this.name);\n    }\n    \n    var p = new Person(\"zhangsan\");\n    p.sayHello();\n\n## 继承\nclassB继承classA\n\n    function classA(name) {\n    \tthis.name = name;\n    \tthis.sayHello = function() {\n    \t\talert(this.name);\n    \t}\n    }\n方法1\n    \n    function classB(name) {\n    \tthis.tempMethod = classA;\n    \tthis.tempMethod(name);\n    }\n方法2\n\n    function classB(name) {\n    \tclassA.call(this, name);\n    }\n方法3\n\n    function classB(name) {\n    \tclassA.apply(this, [name]);\n    }\n调用classB\n\n    var b = new classB(\"lisa\");\n    b.sayHello();\n\n## 可变参数\n在js的世界里，内置属性arguments可以接收可辨参数。\n\n    function sum() {\n    \tvar s = 0;\n    \tfor(var i = 0; i < arguments.length; i++) {\n    \t\ts+ = arguments[i];\n    \t}\n    \t\n    \treturn s;\n    }\n    \n    alert(sum(1,4,5));\n    alert(sum(12,15,19,21,51));\n\n\n","slug":"认识javascript","published":1,"updated":"2018-04-19T03:20:43.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7ck919004rsof7vh8t6upo","content":"<h2 id=\"javascript基础\"><a href=\"#javascript基础\" class=\"headerlink\" title=\"javascript基础\"></a>javascript基础</h2><h4 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h4><ul>\n<li>声明变量不用var时，该变量为全局变量</li>\n</ul>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li><p>Number  </p>\n<ul>\n<li><em>整型常量</em>(10进制\\8进制\\16进制)<br>  十六进制以0x或0X开头, 例如: 0x8a<br>八进制必须以0开头, 例如: 0123<br>十进制的第一位不能是0(数字0除外), 例如: 123</li>\n<li><em>实型常量</em><br>12.32, 193.98, 5E7, 4e5等</li>\n</ul>\n</li>\n<li><p>Boolean</p>\n</li>\n<li>String  <ul>\n<li>“abc”，’abc’<br>双引号会搜索引号内的内容是否含有变量，有则输出其值，没有则输出原有内容<br>单引号则不会检测内容，因此效率更高</li>\n<li>特殊字符，需要以反斜杠()后跟一个普通字符来表示<br>例如: \\r, \\n, \\t, \\b, \\’</li>\n</ul>\n</li>\n<li>null常量</li>\n<li>undefined常量</li>\n<li>特殊数值<br>NaN, Infinity(无穷大), isNaN(), isFinite()</li>\n</ul>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><ul>\n<li>&amp;&amp; 逻辑与</li>\n<li>|| 逻辑或</li>\n<li>! 逻辑非</li>\n</ul>\n<h2 id=\"定义一个类\"><a href=\"#定义一个类\" class=\"headerlink\" title=\"定义一个类\"></a>定义一个类</h2><pre><code>function Person(name) {\n    this.name = name;\n}\n</code></pre><h2 id=\"一切都是对象\"><a href=\"#一切都是对象\" class=\"headerlink\" title=\"一切都是对象\"></a>一切都是对象</h2><p>类(函数)也是对象</p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><pre><code>var p = new Person(&quot;张三&quot;)\n</code></pre><h2 id=\"闭包closure\"><a href=\"#闭包closure\" class=\"headerlink\" title=\"闭包closure\"></a>闭包closure</h2><p>函数内部可以直接读取全局变量。  </p>\n<pre><code>var n = 999;\n\nfunction f1() {\n    alert(n);\n}\n\nf1(); // 999\n</code></pre><p>函数外部无法读取函数内的局部变量。  </p>\n<pre><code>function f1() {\n    var n = 999;\n}\n\nalert(n); // error\n</code></pre><p>利用闭包，从函数外部读取函数内的局部变量。</p>\n<pre><code>function f1() {\n    var n = 999;\n\n    function f2() {\n        alert(n);\n    }\n\n    return f2;\n}\n\nvar result = f1();\nresult(); // 999\n</code></pre><h2 id=\"作用域scope（上下文）\"><a href=\"#作用域scope（上下文）\" class=\"headerlink\" title=\"作用域scope（上下文）\"></a>作用域scope（上下文）</h2><p>上下文对象就是使用this指针，即被调用函数所处的环境。上下文对象在一个函数内部引用调用它的对象本身。  </p>\n<pre><code>var someuser = {\n    name: &apos;byvoid&apos;,\n    func: function() {\n        console.log(this.name);\n    }\n};\n\nvar foo = {\n    name: &apos;foobar&apos;\n};\n\nsomeuser.func(); // byvoid\n\nfoo.func = someuser.func;\nfoo.func(); // foobar\n\nname = &apos;global&apos;;\nfunc = someuser.func;\nfunc(); // globar\n</code></pre><h2 id=\"prototype\"><a href=\"#prototype\" class=\"headerlink\" title=\"prototype\"></a>prototype</h2><p>利用prototype可以扩展js类。  </p>\n<pre><code>Number.prototype.add = function(v) {\n    return this + v;\n}    \n\nvar d = 6;\nd.add(8).add(9); // d = 6 + 8 + 9\n</code></pre><p>扩展自定义的类。</p>\n<pre><code>function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.sayHello = function() {\n    alert(this.name);\n}\n\nvar p = new Person(&quot;zhangsan&quot;);\np.sayHello();\n</code></pre><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>classB继承classA</p>\n<pre><code>function classA(name) {\n    this.name = name;\n    this.sayHello = function() {\n        alert(this.name);\n    }\n}\n</code></pre><p>方法1</p>\n<pre><code>function classB(name) {\n    this.tempMethod = classA;\n    this.tempMethod(name);\n}\n</code></pre><p>方法2</p>\n<pre><code>function classB(name) {\n    classA.call(this, name);\n}\n</code></pre><p>方法3</p>\n<pre><code>function classB(name) {\n    classA.apply(this, [name]);\n}\n</code></pre><p>调用classB</p>\n<pre><code>var b = new classB(&quot;lisa&quot;);\nb.sayHello();\n</code></pre><h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>在js的世界里，内置属性arguments可以接收可辨参数。</p>\n<pre><code>function sum() {\n    var s = 0;\n    for(var i = 0; i &lt; arguments.length; i++) {\n        s+ = arguments[i];\n    }\n\n    return s;\n}\n\nalert(sum(1,4,5));\nalert(sum(12,15,19,21,51));\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"javascript基础\"><a href=\"#javascript基础\" class=\"headerlink\" title=\"javascript基础\"></a>javascript基础</h2><h4 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h4><ul>\n<li>声明变量不用var时，该变量为全局变量</li>\n</ul>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li><p>Number  </p>\n<ul>\n<li><em>整型常量</em>(10进制\\8进制\\16进制)<br>  十六进制以0x或0X开头, 例如: 0x8a<br>八进制必须以0开头, 例如: 0123<br>十进制的第一位不能是0(数字0除外), 例如: 123</li>\n<li><em>实型常量</em><br>12.32, 193.98, 5E7, 4e5等</li>\n</ul>\n</li>\n<li><p>Boolean</p>\n</li>\n<li>String  <ul>\n<li>“abc”，’abc’<br>双引号会搜索引号内的内容是否含有变量，有则输出其值，没有则输出原有内容<br>单引号则不会检测内容，因此效率更高</li>\n<li>特殊字符，需要以反斜杠()后跟一个普通字符来表示<br>例如: \\r, \\n, \\t, \\b, \\’</li>\n</ul>\n</li>\n<li>null常量</li>\n<li>undefined常量</li>\n<li>特殊数值<br>NaN, Infinity(无穷大), isNaN(), isFinite()</li>\n</ul>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><ul>\n<li>&amp;&amp; 逻辑与</li>\n<li>|| 逻辑或</li>\n<li>! 逻辑非</li>\n</ul>\n<h2 id=\"定义一个类\"><a href=\"#定义一个类\" class=\"headerlink\" title=\"定义一个类\"></a>定义一个类</h2><pre><code>function Person(name) {\n    this.name = name;\n}\n</code></pre><h2 id=\"一切都是对象\"><a href=\"#一切都是对象\" class=\"headerlink\" title=\"一切都是对象\"></a>一切都是对象</h2><p>类(函数)也是对象</p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><pre><code>var p = new Person(&quot;张三&quot;)\n</code></pre><h2 id=\"闭包closure\"><a href=\"#闭包closure\" class=\"headerlink\" title=\"闭包closure\"></a>闭包closure</h2><p>函数内部可以直接读取全局变量。  </p>\n<pre><code>var n = 999;\n\nfunction f1() {\n    alert(n);\n}\n\nf1(); // 999\n</code></pre><p>函数外部无法读取函数内的局部变量。  </p>\n<pre><code>function f1() {\n    var n = 999;\n}\n\nalert(n); // error\n</code></pre><p>利用闭包，从函数外部读取函数内的局部变量。</p>\n<pre><code>function f1() {\n    var n = 999;\n\n    function f2() {\n        alert(n);\n    }\n\n    return f2;\n}\n\nvar result = f1();\nresult(); // 999\n</code></pre><h2 id=\"作用域scope（上下文）\"><a href=\"#作用域scope（上下文）\" class=\"headerlink\" title=\"作用域scope（上下文）\"></a>作用域scope（上下文）</h2><p>上下文对象就是使用this指针，即被调用函数所处的环境。上下文对象在一个函数内部引用调用它的对象本身。  </p>\n<pre><code>var someuser = {\n    name: &apos;byvoid&apos;,\n    func: function() {\n        console.log(this.name);\n    }\n};\n\nvar foo = {\n    name: &apos;foobar&apos;\n};\n\nsomeuser.func(); // byvoid\n\nfoo.func = someuser.func;\nfoo.func(); // foobar\n\nname = &apos;global&apos;;\nfunc = someuser.func;\nfunc(); // globar\n</code></pre><h2 id=\"prototype\"><a href=\"#prototype\" class=\"headerlink\" title=\"prototype\"></a>prototype</h2><p>利用prototype可以扩展js类。  </p>\n<pre><code>Number.prototype.add = function(v) {\n    return this + v;\n}    \n\nvar d = 6;\nd.add(8).add(9); // d = 6 + 8 + 9\n</code></pre><p>扩展自定义的类。</p>\n<pre><code>function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.sayHello = function() {\n    alert(this.name);\n}\n\nvar p = new Person(&quot;zhangsan&quot;);\np.sayHello();\n</code></pre><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>classB继承classA</p>\n<pre><code>function classA(name) {\n    this.name = name;\n    this.sayHello = function() {\n        alert(this.name);\n    }\n}\n</code></pre><p>方法1</p>\n<pre><code>function classB(name) {\n    this.tempMethod = classA;\n    this.tempMethod(name);\n}\n</code></pre><p>方法2</p>\n<pre><code>function classB(name) {\n    classA.call(this, name);\n}\n</code></pre><p>方法3</p>\n<pre><code>function classB(name) {\n    classA.apply(this, [name]);\n}\n</code></pre><p>调用classB</p>\n<pre><code>var b = new classB(&quot;lisa&quot;);\nb.sayHello();\n</code></pre><h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>在js的世界里，内置属性arguments可以接收可辨参数。</p>\n<pre><code>function sum() {\n    var s = 0;\n    for(var i = 0; i &lt; arguments.length; i++) {\n        s+ = arguments[i];\n    }\n\n    return s;\n}\n\nalert(sum(1,4,5));\nalert(sum(12,15,19,21,51));\n</code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjg7ck8wg0000sof7qgqs9y6g","tag_id":"cjg7ck8wr0002sof7mhqfzuvn","_id":"cjg7ck8ww0008sof7dir9msr9"},{"post_id":"cjg7ck8wg0000sof7qgqs9y6g","tag_id":"cjg7ck8wu0003sof7ayjvdm49","_id":"cjg7ck8wx0009sof7u15hqvcd"},{"post_id":"cjg7ck8wg0000sof7qgqs9y6g","tag_id":"cjg7ck8wv0004sof73bb3gc64","_id":"cjg7ck8wx000asof7xy0yq8w1"},{"post_id":"cjg7ck8wg0000sof7qgqs9y6g","tag_id":"cjg7ck8wv0005sof7zrrfspk4","_id":"cjg7ck8wx000bsof7stbew8zv"},{"post_id":"cjg7ck8wg0000sof7qgqs9y6g","tag_id":"cjg7ck8ww0006sof73dn7yyy2","_id":"cjg7ck8wx000csof7lh4gjnen"},{"post_id":"cjg7ck8wm0001sof7mz54ttmn","tag_id":"cjg7ck8ww0007sof75agd4p8z","_id":"cjg7ck8wx000dsof76zysm5um"},{"post_id":"cjg7ck8x5000esof78os6oxkp","tag_id":"cjg7ck8xe000gsof7rkihgb65","_id":"cjg7ck8xz000ssof7s8ie28fl"},{"post_id":"cjg7ck8x5000esof78os6oxkp","tag_id":"cjg7ck8xi000ksof7ug7iji0w","_id":"cjg7ck8y2000usof7f4sl1tcb"},{"post_id":"cjg7ck8x5000esof78os6oxkp","tag_id":"cjg7ck8xp000nsof7eo94pm9v","_id":"cjg7ck8y6000xsof786l9d2f3"},{"post_id":"cjg7ck8x9000fsof7zmn11y6b","tag_id":"cjg7ck8xv000qsof71qzf3k6r","_id":"cjg7ck8y8000zsof76by05xal"},{"post_id":"cjg7ck8xf000hsof7cwz6s63j","tag_id":"cjg7ck8y3000vsof7mnrsg8hu","_id":"cjg7ck8yi0016sof7am8996fo"},{"post_id":"cjg7ck8xf000hsof7cwz6s63j","tag_id":"cjg7ck8yb0011sof7hnxr0p46","_id":"cjg7ck8yl0018sof7mgiqowua"},{"post_id":"cjg7ck8xg000isof7j5qx8k9p","tag_id":"cjg7ck8ye0014sof7z9ruu01u","_id":"cjg7ck8yx001esof7g8p1efpq"},{"post_id":"cjg7ck8xg000isof7j5qx8k9p","tag_id":"cjg7ck8yl0019sof7od1f9cca","_id":"cjg7ck8z2001gsof77pf7pnlm"},{"post_id":"cjg7ck8xh000jsof7b9wk1qs2","tag_id":"cjg7ck8yp001csof7sgcfmul8","_id":"cjg7ck8zq001usof780fafm8n"},{"post_id":"cjg7ck8xh000jsof7b9wk1qs2","tag_id":"cjg7ck8z4001isof761378dcp","_id":"cjg7ck8zq001vsof7pfbsz15o"},{"post_id":"cjg7ck8xh000jsof7b9wk1qs2","tag_id":"cjg7ck8za001lsof7at8vkmev","_id":"cjg7ck8zr001xsof7bovu6qrq"},{"post_id":"cjg7ck8xh000jsof7b9wk1qs2","tag_id":"cjg7ck8zh001osof7oc9u90yj","_id":"cjg7ck8zr001ysof7walx61hh"},{"post_id":"cjg7ck8xh000jsof7b9wk1qs2","tag_id":"cjg7ck8zl001rsof7xbcdhecb","_id":"cjg7ck8zs0020sof7bbyteoqm"},{"post_id":"cjg7ck8xj000lsof7z5p8eq5c","tag_id":"cjg7ck8ww0006sof73dn7yyy2","_id":"cjg7ck8zs0021sof7dtnsmixv"},{"post_id":"cjg7ck8xj000lsof7z5p8eq5c","tag_id":"cjg7ck8zp001tsof7qlornmks","_id":"cjg7ck8zs0023sof7f167an0d"},{"post_id":"cjg7ck8xm000msof71ldskhbu","tag_id":"cjg7ck8ww0006sof73dn7yyy2","_id":"cjg7ck8zt0024sof7ywsawk1l"},{"post_id":"cjg7ck8xm000msof71ldskhbu","tag_id":"cjg7ck8zq001wsof7z32ujarl","_id":"cjg7ck8zt0025sof7ehied46b"},{"post_id":"cjg7ck8xq000osof72u9i6ghk","tag_id":"cjg7ck8ww0006sof73dn7yyy2","_id":"cjg7ck8zu0027sof7qxbx0uhw"},{"post_id":"cjg7ck8xq000osof72u9i6ghk","tag_id":"cjg7ck8zr001zsof7bu939p6q","_id":"cjg7ck8zv0028sof7oe0njgsl"},{"post_id":"cjg7ck8xt000psof7ompydoll","tag_id":"cjg7ck8ww0006sof73dn7yyy2","_id":"cjg7ck8zw002asof7e0cma9y9"},{"post_id":"cjg7ck8xt000psof7ompydoll","tag_id":"cjg7ck8zs0022sof707xa9r0j","_id":"cjg7ck8zw002bsof7zzird5ge"},{"post_id":"cjg7ck8xw000rsof769vm8sen","tag_id":"cjg7ck8ww0006sof73dn7yyy2","_id":"cjg7ck8zx002esof7hflxehdp"},{"post_id":"cjg7ck8xw000rsof769vm8sen","tag_id":"cjg7ck8yb0011sof7hnxr0p46","_id":"cjg7ck8zx002fsof75njcqwjr"},{"post_id":"cjg7ck8xw000rsof769vm8sen","tag_id":"cjg7ck8zv0029sof7ivepc7kw","_id":"cjg7ck8zy002hsof7v7476rg3"},{"post_id":"cjg7ck8xw000rsof769vm8sen","tag_id":"cjg7ck8zw002csof7ka38yczj","_id":"cjg7ck8zz002isof7ksmkiayl"},{"post_id":"cjg7ck8xz000tsof79qrn5fk5","tag_id":"cjg7ck8za001lsof7at8vkmev","_id":"cjg7ck902002lsof7cb0od0bp"},{"post_id":"cjg7ck8xz000tsof79qrn5fk5","tag_id":"cjg7ck8zy002gsof7k86rn1nx","_id":"cjg7ck903002msof74njtyd5l"},{"post_id":"cjg7ck8xz000tsof79qrn5fk5","tag_id":"cjg7ck8zz002jsof7ht84mizh","_id":"cjg7ck904002osof7dbj4q8sx"},{"post_id":"cjg7ck8y3000wsof7c0ufdyn6","tag_id":"cjg7ck901002ksof7epba3cce","_id":"cjg7ck904002psof7vyjylcdf"},{"post_id":"cjg7ck8y90010sof7d09ov2f2","tag_id":"cjg7ck903002nsof7w6w22gl2","_id":"cjg7ck906002tsof7nbgxwzjo"},{"post_id":"cjg7ck8y90010sof7d09ov2f2","tag_id":"cjg7ck8za001lsof7at8vkmev","_id":"cjg7ck906002usof71onkz1y6"},{"post_id":"cjg7ck8y90010sof7d09ov2f2","tag_id":"cjg7ck905002rsof7pkqt9ows","_id":"cjg7ck908002wsof7dql8w6km"},{"post_id":"cjg7ck8yb0012sof7nwj0nzue","tag_id":"cjg7ck8wv0005sof7zrrfspk4","_id":"cjg7ck908002xsof792zmb9fe"},{"post_id":"cjg7ck8yb0012sof7nwj0nzue","tag_id":"cjg7ck906002ssof7y1oijnf2","_id":"cjg7ck909002zsof753bekcll"},{"post_id":"cjg7ck8yb0012sof7nwj0nzue","tag_id":"cjg7ck8ww0006sof73dn7yyy2","_id":"cjg7ck9090030sof70d2sljrx"},{"post_id":"cjg7ck8yd0013sof7e4b2c24o","tag_id":"cjg7ck901002ksof7epba3cce","_id":"cjg7ck9090032sof7z1asrntd"},{"post_id":"cjg7ck8yf0015sof7hirajw7i","tag_id":"cjg7ck8ww0006sof73dn7yyy2","_id":"cjg7ck90a0034sof7llifh0f1"},{"post_id":"cjg7ck8yf0015sof7hirajw7i","tag_id":"cjg7ck908002ysof7yvrc0bij","_id":"cjg7ck90a0035sof7phf5a6xy"},{"post_id":"cjg7ck8yf0015sof7hirajw7i","tag_id":"cjg7ck9090031sof7agc180mz","_id":"cjg7ck90c0037sof7rr7gfrb7"},{"post_id":"cjg7ck8yj0017sof74iayb2an","tag_id":"cjg7ck90a0033sof728i5at25","_id":"cjg7ck90d003asof7cn7akxw7"},{"post_id":"cjg7ck8yj0017sof74iayb2an","tag_id":"cjg7ck90b0036sof7mun8ldej","_id":"cjg7ck90e003bsof7fnn3w1cm"},{"post_id":"cjg7ck8yj0017sof74iayb2an","tag_id":"cjg7ck8za001lsof7at8vkmev","_id":"cjg7ck90e003dsof75moa0qqz"},{"post_id":"cjg7ck8yn001bsof7hg5cx977","tag_id":"cjg7ck90c0039sof7xf41s7mx","_id":"cjg7ck90f003fsof7y2ltwfwg"},{"post_id":"cjg7ck8yn001bsof7hg5cx977","tag_id":"cjg7ck90e003csof7rtdy7di4","_id":"cjg7ck90g003gsof7j4acctlp"},{"post_id":"cjg7ck8yp001dsof7v7sp5cyl","tag_id":"cjg7ck90f003esof7m35f4yqx","_id":"cjg7ck90i003ksof7r1ypu66d"},{"post_id":"cjg7ck8yp001dsof7v7sp5cyl","tag_id":"cjg7ck90g003hsof7x4cz3hvx","_id":"cjg7ck90i003lsof73u6wn2h2"},{"post_id":"cjg7ck8yp001dsof7v7sp5cyl","tag_id":"cjg7ck90g003isof7nk9zf7kj","_id":"cjg7ck90j003nsof7owanflkt"},{"post_id":"cjg7ck8yx001fsof79wv990wb","tag_id":"cjg7ck903002nsof7w6w22gl2","_id":"cjg7ck90k003osof7r1393jt4"},{"post_id":"cjg7ck8z2001hsof7qqqhx1q0","tag_id":"cjg7ck90i003msof75cw779l6","_id":"cjg7ck90m003ssof713j2120f"},{"post_id":"cjg7ck8z2001hsof7qqqhx1q0","tag_id":"cjg7ck90k003psof74gopeymm","_id":"cjg7ck90m003tsof7alkixbfc"},{"post_id":"cjg7ck8z2001hsof7qqqhx1q0","tag_id":"cjg7ck90l003qsof7v4albqa4","_id":"cjg7ck90o003vsof7tyjd0ik1"},{"post_id":"cjg7ck8z6001jsof74pp7riod","tag_id":"cjg7ck90c0039sof7xf41s7mx","_id":"cjg7ck90q003xsof793s0cyw2"},{"post_id":"cjg7ck8z6001jsof74pp7riod","tag_id":"cjg7ck8zy002gsof7k86rn1nx","_id":"cjg7ck90q003ysof7x58ayz1y"},{"post_id":"cjg7ck8z8001ksof7tjkrmr4r","tag_id":"cjg7ck90p003wsof7eple1xhl","_id":"cjg7ck90r0042sof7f8lcb9bn"},{"post_id":"cjg7ck8z8001ksof7tjkrmr4r","tag_id":"cjg7ck90q003zsof79ym0vzgl","_id":"cjg7ck90s0043sof7nlk92rzz"},{"post_id":"cjg7ck8z8001ksof7tjkrmr4r","tag_id":"cjg7ck90r0040sof7ek31wxor","_id":"cjg7ck90s0045sof7kw4biay6"},{"post_id":"cjg7ck8zb001msof7n8butt67","tag_id":"cjg7ck90r0040sof7ek31wxor","_id":"cjg7ck90t0047sof78rvp7rlj"},{"post_id":"cjg7ck8zb001msof7n8butt67","tag_id":"cjg7ck90s0044sof7i82s0d0p","_id":"cjg7ck90t0048sof79zv98fyw"},{"post_id":"cjg7ck8zd001nsof7svhcqjtq","tag_id":"cjg7ck90s0046sof77kz9rr29","_id":"cjg7ck90u004bsof7a0gqup7p"},{"post_id":"cjg7ck8zd001nsof7svhcqjtq","tag_id":"cjg7ck90t0049sof7wvchrupz","_id":"cjg7ck90u004csof7xwn22m4e"},{"post_id":"cjg7ck8zi001psof7o1ajsrwy","tag_id":"cjg7ck90u004asof76qe6kw5j","_id":"cjg7ck90v004fsof792lj1asn"},{"post_id":"cjg7ck8zi001psof7o1ajsrwy","tag_id":"cjg7ck90u004dsof70mejrgbp","_id":"cjg7ck90w004gsof7h8up4kqq"},{"post_id":"cjg7ck8zj001qsof7iohqib7f","tag_id":"cjg7ck903002nsof7w6w22gl2","_id":"cjg7ck90w004isof7p97kv6t9"},{"post_id":"cjg7ck8zl001ssof7c0bb3ft4","tag_id":"cjg7ck90i003msof75cw779l6","_id":"cjg7ck90x004ksof7s1hvf06b"},{"post_id":"cjg7ck8zl001ssof7c0bb3ft4","tag_id":"cjg7ck90x004jsof7j6hgos05","_id":"cjg7ck90y004lsof7v64kib7a"},{"post_id":"cjg7ck910004msof7h1i1x12b","tag_id":"cjg7ck915004osof7uoatw4jl","_id":"cjg7ck91b004tsof7ps79k8p5"},{"post_id":"cjg7ck914004nsof7g4q6f19f","tag_id":"cjg7ck91a004ssof70cw43m50","_id":"cjg7ck91c004vsof7yd4f0fzh"},{"post_id":"cjg7ck914004nsof7g4q6f19f","tag_id":"cjg7ck901002ksof7epba3cce","_id":"cjg7ck91d004wsof7jicif206"},{"post_id":"cjg7ck914004nsof7g4q6f19f","tag_id":"cjg7ck8ww0006sof73dn7yyy2","_id":"cjg7ck91d004ysof70ifnj75v"},{"post_id":"cjg7ck915004psof714fkb7he","tag_id":"cjg7ck90s0046sof77kz9rr29","_id":"cjg7ck91e004zsof7b9tj40dv"},{"post_id":"cjg7ck915004psof714fkb7he","tag_id":"cjg7ck91c004usof7q0p8ubpi","_id":"cjg7ck91e0051sof7u7qnw11q"},{"post_id":"cjg7ck918004qsof78uvvdezj","tag_id":"cjg7ck91a004ssof70cw43m50","_id":"cjg7ck91f0053sof7sub8n8tn"},{"post_id":"cjg7ck918004qsof78uvvdezj","tag_id":"cjg7ck91e0050sof7j8vio4h5","_id":"cjg7ck91f0054sof7eft9c2y4"},{"post_id":"cjg7ck918004qsof78uvvdezj","tag_id":"cjg7ck8wv0005sof7zrrfspk4","_id":"cjg7ck91g0056sof7envakh5t"},{"post_id":"cjg7ck918004qsof78uvvdezj","tag_id":"cjg7ck906002ssof7y1oijnf2","_id":"cjg7ck91g0057sof7krdf06m2"},{"post_id":"cjg7ck919004rsof7vh8t6upo","tag_id":"cjg7ck90a0033sof728i5at25","_id":"cjg7ck91h0059sof73diqqf2w"},{"post_id":"cjg7ck919004rsof7vh8t6upo","tag_id":"cjg7ck91f0052sof7uvxyxa9b","_id":"cjg7ck91h005asof741l8p627"},{"post_id":"cjg7ck919004rsof7vh8t6upo","tag_id":"cjg7ck91g0055sof73fywe2d2","_id":"cjg7ck91h005bsof79rfodbv4"},{"post_id":"cjg7ck919004rsof7vh8t6upo","tag_id":"cjg7ck91g0058sof7vy2ug49w","_id":"cjg7ck91i005csof7wzakx03c"},{"post_id":"cjg7ck8y7000ysof7txe91bm4","tag_id":"cjg7ck901002ksof7epba3cce","_id":"cjg7d230a0000lof7351bblhf"}],"Tag":[{"name":"持续集成","_id":"cjg7ck8wr0002sof7mhqfzuvn"},{"name":"CI","_id":"cjg7ck8wu0003sof7ayjvdm49"},{"name":"DooD","_id":"cjg7ck8wv0004sof73bb3gc64"},{"name":"jenkins","_id":"cjg7ck8wv0005sof7zrrfspk4"},{"name":"docker","_id":"cjg7ck8ww0006sof73dn7yyy2"},{"name":"aliyun","_id":"cjg7ck8ww0007sof75agd4p8z"},{"name":"anaconda","_id":"cjg7ck8xe000gsof7rkihgb65"},{"name":"conda","_id":"cjg7ck8xi000ksof7ug7iji0w"},{"name":"tensorflow","_id":"cjg7ck8xp000nsof7eo94pm9v"},{"name":"hexo","_id":"cjg7ck8xv000qsof71qzf3k6r"},{"name":"centos7","_id":"cjg7ck8y3000vsof7mnrsg8hu"},{"name":"postgresql","_id":"cjg7ck8yb0011sof7hnxr0p46"},{"name":"curl","_id":"cjg7ck8ye0014sof7z9ruu01u"},{"name":"restful","_id":"cjg7ck8yl0019sof7od1f9cca"},{"name":"centOS","_id":"cjg7ck8yp001csof7sgcfmul8"},{"name":"Virtualenv","_id":"cjg7ck8z4001isof761378dcp"},{"name":"flask","_id":"cjg7ck8za001lsof7at8vkmev"},{"name":"Gunicorn","_id":"cjg7ck8zh001osof7oc9u90yj"},{"name":"Supervisor","_id":"cjg7ck8zl001rsof7xbcdhecb"},{"name":"docker-compose","_id":"cjg7ck8zp001tsof7qlornmks"},{"name":"registry","_id":"cjg7ck8zq001wsof7z32ujarl"},{"name":"proxy","_id":"cjg7ck8zr001zsof7bu939p6q"},{"name":"iptables","_id":"cjg7ck8zs0022sof707xa9r0j"},{"name":"redis","_id":"cjg7ck8zv0029sof7ivepc7kw"},{"name":"web","_id":"cjg7ck8zw002csof7ka38yczj"},{"name":"shell","_id":"cjg7ck8zy002gsof7k86rn1nx"},{"name":"flask-ext-migrate","_id":"cjg7ck8zz002jsof7ht84mizh"},{"name":"git","_id":"cjg7ck901002ksof7epba3cce"},{"name":"python","_id":"cjg7ck903002nsof7w6w22gl2"},{"name":"flask-migrate","_id":"cjg7ck905002rsof7pkqt9ows"},{"name":"持续部署","_id":"cjg7ck906002ssof7y1oijnf2"},{"name":"java","_id":"cjg7ck908002ysof7yvrc0bij"},{"name":"No Route to host","_id":"cjg7ck9090031sof7agc180mz"},{"name":"js","_id":"cjg7ck90a0033sof728i5at25"},{"name":"七牛","_id":"cjg7ck90b0036sof7mun8ldej"},{"name":"linux","_id":"cjg7ck90c0039sof7xf41s7mx"},{"name":"磁盘扩容","_id":"cjg7ck90e003csof7rtdy7di4"},{"name":"mac","_id":"cjg7ck90f003esof7m35f4yqx"},{"name":"sed","_id":"cjg7ck90g003hsof7x4cz3hvx"},{"name":"grep","_id":"cjg7ck90g003isof7nk9zf7kj"},{"name":"react native","_id":"cjg7ck90i003msof75cw779l6"},{"name":"Runtime is not ready for debugging","_id":"cjg7ck90k003psof74gopeymm"},{"name":"Network request failed","_id":"cjg7ck90l003qsof7v4albqa4"},{"name":"supervisor","_id":"cjg7ck90p003wsof7eple1xhl"},{"name":"sprintboot","_id":"cjg7ck90q003zsof79ym0vzgl"},{"name":"web.py","_id":"cjg7ck90r0040sof7ek31wxor"},{"name":"gunicorn","_id":"cjg7ck90s0044sof7i82s0d0p"},{"name":"vagrant","_id":"cjg7ck90s0046sof77kz9rr29"},{"name":"win10","_id":"cjg7ck90t0049sof7wvchrupz"},{"name":"app","_id":"cjg7ck90u004asof76qe6kw5j"},{"name":"ios","_id":"cjg7ck90u004dsof70mejrgbp"},{"name":"npmjs.org:443","_id":"cjg7ck90x004jsof7j6hgos05"},{"name":"android","_id":"cjg7ck915004osof7uoatw4jl"},{"name":"gitbucket","_id":"cjg7ck91a004ssof70cw43m50"},{"name":"跨平台","_id":"cjg7ck91c004usof7q0p8ubpi"},{"name":"webhook","_id":"cjg7ck91e0050sof7j8vio4h5"},{"name":"闭包","_id":"cjg7ck91f0052sof7uvxyxa9b"},{"name":"作用域","_id":"cjg7ck91g0055sof73fywe2d2"},{"name":"上下文","_id":"cjg7ck91g0058sof7vy2ug49w"}]}}